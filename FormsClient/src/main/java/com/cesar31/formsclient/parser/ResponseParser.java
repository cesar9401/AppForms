
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.formsclient.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.cesar31.formsclient.control.HandleResponse;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ResponseParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ResponseParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ResponseParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ResponseParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ResponseParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\004\003\000\002\004\004" +
    "\000\002\005\007\000\002\006\003\000\002\006\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\010\000\002" +
    "\011\006\000\002\010\006\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\010\007\001\002\000\004\002\103\001" +
    "\002\000\004\002\uffff\001\002\000\004\010\073\001\002" +
    "\000\004\011\062\001\002\000\004\002\001\001\002\000" +
    "\004\015\012\001\002\000\020\024\014\025\022\026\023" +
    "\027\020\030\015\031\021\032\016\001\002\000\006\016" +
    "\ufffa\020\ufffa\001\002\000\004\017\060\001\002\000\004" +
    "\017\056\001\002\000\004\017\054\001\002\000\006\016" +
    "\045\020\044\001\002\000\004\017\042\001\002\000\004" +
    "\017\030\001\002\000\004\017\026\001\002\000\004\017" +
    "\024\001\002\000\004\022\025\001\002\000\006\016\ufff6" +
    "\020\ufff6\001\002\000\004\022\027\001\002\000\006\016" +
    "\ufff7\020\ufff7\001\002\000\022\023\032\024\033\025\040" +
    "\026\041\027\036\030\034\031\037\032\035\001\002\000" +
    "\006\016\ufff3\020\ufff3\001\002\000\006\016\ufff1\020\ufff1" +
    "\001\002\000\006\016\ufff0\020\ufff0\001\002\000\006\016" +
    "\uffec\020\uffec\001\002\000\006\016\uffea\020\uffea\001\002" +
    "\000\006\016\uffed\020\uffed\001\002\000\006\016\uffeb\020" +
    "\uffeb\001\002\000\006\016\uffef\020\uffef\001\002\000\006" +
    "\016\uffee\020\uffee\001\002\000\022\023\032\024\033\025" +
    "\040\026\041\027\036\030\034\031\037\032\035\001\002" +
    "\000\006\016\ufff5\020\ufff5\001\002\000\020\024\014\025" +
    "\022\026\023\027\020\030\015\031\021\032\016\001\002" +
    "\000\004\010\046\001\002\000\004\011\050\001\002\000" +
    "\006\002\ufffb\010\ufffb\001\002\000\004\005\051\001\002" +
    "\000\004\012\052\001\002\000\006\002\uffe7\010\uffe7\001" +
    "\002\000\006\016\ufff9\020\ufff9\001\002\000\022\023\032" +
    "\024\033\025\040\026\041\027\036\030\034\031\037\032" +
    "\035\001\002\000\006\016\ufff2\020\ufff2\001\002\000\022" +
    "\023\032\024\033\025\040\026\041\027\036\030\034\031" +
    "\037\032\035\001\002\000\006\016\ufff4\020\ufff4\001\002" +
    "\000\004\022\061\001\002\000\006\016\ufff8\020\ufff8\001" +
    "\002\000\006\004\063\006\064\001\002\000\004\017\066" +
    "\001\002\000\004\012\065\001\002\000\004\010\uffe8\001" +
    "\002\000\004\023\067\001\002\000\004\012\070\001\002" +
    "\000\004\015\uffe9\001\002\000\004\010\076\001\002\000" +
    "\004\010\ufffd\001\002\000\004\011\074\001\002\000\004" +
    "\004\063\001\002\000\004\010\ufffc\001\002\000\004\011" +
    "\100\001\002\000\004\002\ufffe\001\002\000\006\004\063" +
    "\007\101\001\002\000\004\012\102\001\002\000\004\002" +
    "\uffe6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\014\002\003\003\007\005\004\011\005\014" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\070\005\071\014\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\016\007\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\042\001\001\000\002" +
    "\001\001\000\004\007\052\001\001\000\004\010\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\054\001\001\000\002\001\001\000\004\013\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\074\012\076\014\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ResponseParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ResponseParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ResponseParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private HandleResponse handle;

	public ResponseParser(ResponseLex lex) {
		super(lex);
		handle = new HandleResponse();
	}

	public void syntax_error(Symbol cur_token) {
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);
        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
        }
        System.out.println("");
	}

	public HandleResponse getHandle() {
		return handle;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ResponseParser$actions {
  private final ResponseParser parser;

  /** Constructor */
  CUP$ResponseParser$actions(ResponseParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ResponseParser$do_action_part00000000(
    int                        CUP$ResponseParser$act_num,
    java_cup.runtime.lr_parser CUP$ResponseParser$parser,
    java.util.Stack            CUP$ResponseParser$stack,
    int                        CUP$ResponseParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ResponseParser$result;

      /* select the action based on the action number */
      switch (CUP$ResponseParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // response ::= m_res 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("response",0, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= response EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).value;
		RESULT = start_val;
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ResponseParser$parser.done_parsing();
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // response ::= res 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("response",0, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // m_res ::= header_m make_res footer_m 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("m_res",1, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // make_res ::= res 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("make_res",2, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // make_res ::= make_res res 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("make_res",2, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // res ::= header LBRACE body_res RBRACE footer 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-4)).value;
		 handle.createResponse(p); 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("res",3, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-4)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body_res ::= res_keys 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("body_res",4, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body_res ::= body_res COMMA res_keys 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("body_res",4, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // res_keys ::= REQ COLON INTEGER 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 handle.setParam("request", String.valueOf(p)); 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("res_keys",5, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // res_keys ::= LINE COLON INTEGER 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 handle.setParam("line", String.valueOf(p)); 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("res_keys",5, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // res_keys ::= COLUMN COLON INTEGER 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 handle.setParam("column", String.valueOf(p)); 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("res_keys",5, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // res_keys ::= TYPE COLON str_param 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 handle.setParam("type", p); 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("res_keys",5, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // res_keys ::= MESSAGE COLON str_param 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 handle.setParam("message", p); 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("res_keys",5, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // res_keys ::= LEXEMA COLON str_param 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 handle.setParam("lexema", p); 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("res_keys",5, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // res_keys ::= DESC COLON str_param 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 handle.setParam("description", p); 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("res_keys",5, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // str_param ::= STR 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("str_param",9, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // str_param ::= REQ 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("str_param",9, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // str_param ::= LINE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("str_param",9, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // str_param ::= COLUMN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("str_param",9, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_param ::= TYPE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("str_param",9, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_param ::= MESSAGE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("str_param",9, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // str_param ::= LEXEMA 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("str_param",9, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // str_param ::= DESC 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("str_param",9, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // header ::= SMALLER EXCL INI_R COLON STR GREATER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).value;
		 RESULT = p; 
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-5)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // header_m ::= SMALLER EXCL INI_RS GREATER 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("header_m",7, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-3)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // footer ::= SMALLER EXCL FIN_R GREATER 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("footer",6, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-3)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // footer_m ::= SMALLER EXCL FIN_RS GREATER 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("footer_m",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-3)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ResponseParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ResponseParser$do_action(
    int                        CUP$ResponseParser$act_num,
    java_cup.runtime.lr_parser CUP$ResponseParser$parser,
    java.util.Stack            CUP$ResponseParser$stack,
    int                        CUP$ResponseParser$top)
    throws java.lang.Exception
    {
              return CUP$ResponseParser$do_action_part00000000(
                               CUP$ResponseParser$act_num,
                               CUP$ResponseParser$parser,
                               CUP$ResponseParser$stack,
                               CUP$ResponseParser$top);
    }
}

}
