package com.cesar31.formsclient.parser;
import java_cup.runtime.Symbol;

import java.util.ArrayList;
import java.util.List;

import com.cesar31.formsclient.control.HandleResponse;

class ResponseParser;

parser code {:

	private HandleResponse handle;

	public ResponseParser(ResponseLex lex) {
		super(lex);
		handle = new HandleResponse();
	}

	public void syntax_error(Symbol cur_token) {
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);
        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
        }
        System.out.println("");
	}

	public HandleResponse getHandle() {
		return handle;
	}

:}

terminal INI_R, FIN_R, INI_RS, FIN_RS, SMALLER, EXCL, GREATER, LBRACKET, RBRACKET, LBRACE, RBRACE, COLON, COMMA;
terminal ERROR;
terminal Integer INTEGER;
terminal String STR, REQ, LINE, COLUMN, TYPE, MESSAGE, LEXEMA, DESC;

non terminal response, m_res, make_res, res, body_res, res_keys, footer, header_m, footer_m;
non terminal String str_param, header;

response	::=	m_res
				| res
				;

m_res		::=	header_m make_res footer_m
				;

make_res	::=	res
				| make_res res
				;

res			::=	header:p LBRACE body_res RBRACE footer
				{: handle.createResponse(p); :}
				;

body_res	::= res_keys
				| body_res COMMA res_keys
				;

res_keys	::=	REQ COLON INTEGER:p
				{: handle.setParam("request", String.valueOf(p)); :}
				| LINE COLON INTEGER:p
				{: handle.setParam("line", String.valueOf(p)); :}
				| COLUMN COLON INTEGER:p
				{: handle.setParam("column", String.valueOf(p)); :}
				| TYPE COLON str_param:p
				{: handle.setParam("type", p); :}
				| MESSAGE COLON str_param:p
				{: handle.setParam("message", p); :}
				| LEXEMA COLON str_param:p
				{: handle.setParam("lexema", p); :}
				| DESC COLON str_param:p
				{: handle.setParam("description", p); :}
				;

str_param	::=	STR:p {: RESULT = p; :}
				| REQ:p {: RESULT = p; :}
				| LINE:p {: RESULT = p; :}
				| COLUMN:p {: RESULT = p; :}
				| TYPE:p {: RESULT = p; :}
				| MESSAGE:p {: RESULT = p; :}
				| LEXEMA:p {: RESULT = p; :}
				| DESC:p {: RESULT = p; :}
				;

header		::= SMALLER EXCL INI_R COLON STR:p GREATER
				{: RESULT = p; :}
				;

header_m	::= SMALLER EXCL INI_RS GREATER
				;

footer		::=	SMALLER EXCL FIN_R GREATER
				;

footer_m	::=	SMALLER EXCL FIN_RS GREATER
				;