package com.cesar31.formsweb.parser.sqf;

import com.cesar31.formsweb.control.SQForm;
import com.cesar31.formsweb.model.FormData;
import com.cesar31.formsweb.model.Token;
import java_cup.runtime.*;

import java.util.ArrayList;
import java.util.List;

class SQFParser;

parser code {:

	private Symbol cur_token;
	private SQForm sqf;

	public SQFParser(SQFLex lex, SQForm sqf) {
		super(lex);
		this.sqf = sqf;
	}

	public void syntax_error(Symbol cur_token) {
		this.cur_token = cur_token;

		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
		}

		sqf.setError(cur_token, symbl_name_from_id(cur_token.sym), expected);
	}

	protected int error_sync_size() {
		return 1;
	}
:}

terminal Token SEL, TO, FM, ARROW, WHERE, LBRACKET, RBRACKET, AND, OR, NOT, GREATER, SMALLER, GR_EQ, SM_EQ;
terminal Token EQ, NEQ, COMMA, PLUS, MINUS, TIMES, DIVIDE, ID, STR, APOS, VALUE_STR;
terminal Token ERROR;

terminal Integer INTEGER;
terminal Double DECIMAL;

non terminal Boolean opt, where_cond;

non terminal ini, fields, make_field, field_keys, comps, make_comp, comp, yes_comp, no_comp;
non terminal opr_rel, values, opr_log_b, number_v, value_str;


ini			::=	SEL TO FM ARROW opt:o fields where_cond:w
				{: sqf.createQuery(o, w); :}
				| error TO FM ARROW opt fields where_cond
				| SEL error FM ARROW opt fields where_cond
				| SEL TO error ARROW opt fields where_cond
				| SEL TO FM error opt fields where_cond
				| SEL TO FM ARROW error fields where_cond
				| SEL TO FM ARROW opt error where_cond
				| SEL TO FM ARROW opt fields error
				;

opt			::=	ID:v
				{:
					sqf.setParam(v.getValue());
					RESULT = true;
				:}
				| STR:v
				{:
					sqf.setParam(v.getValue());
					RESULT = false;
				:}
				;

fields		::=	LBRACKET make_field RBRACKET
				| error make_field RBRACKET
				| LBRACKET make_field error
				;

make_field	::=	field_keys
				|
				;

field_keys	::=	STR:p
				{: sqf.setField(p); :}
				| field_keys COMMA STR:p
				{: sqf.setField(p); :}
				;

where_cond	::=	WHERE comps
				{: RESULT = true; :}
				| error comps
				|
				{: RESULT = false; :}
				;

comps		::=	LBRACKET make_comp RBRACKET
				| error make_comp RBRACKET
				| LBRACKET error RBRACKET
				| LBRACKET make_comp error
				;

make_comp	::=	comp
				| make_comp opr_log_b comp
				;

comp		::=	yes_comp
				| no_comp
				;

yes_comp	::=	STR opr_rel values
				| error opr_rel values
				| STR error values
				| STR opr_rel error
				;

no_comp		::=	NOT STR opr_rel values
				| error STR opr_rel values
				| NOT error opr_rel values
				| NOT STR error values
				| NOT STR opr_rel error
				;

opr_rel		::=	GREATER
				| SMALLER
				| GR_EQ
				| SM_EQ
				| EQ
				| NEQ
				;

opr_log_b	::=	AND
				| OR
				| error
				;

values		::=	VALUE_STR
				| number_v
				;

number_v	::=	INTEGER
				| DECIMAL
				;
