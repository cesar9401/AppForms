package com.cesar31.formsweb.parser.sqf;

import com.cesar31.formsweb.model.Token;
import java_cup.runtime.*;

import java.util.List;

class SQFParser;

parser code {:

	private Symbol cur_token;

	public SQFParser(SQFLex lex) {
		super(lex);
	}

	public void syntax_error(Symbol cur_token) {
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);
        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
        }
        System.out.println("");
	}

:}

terminal Token SEL, TO, FORM, ARROW, WHERE, LBRACKET, RBRACKET, AND, OR, NOT, GREATER, SMALLER, GR_EQ, SM_EQ;
terminal Token EQ, NEQ, COMMA, PLUS, MINUS, TIMES, DIVIDE, ID, STR, APOS, VALUE_STR;
terminal Token ERROR;

terminal Integer INTEGER;
terminal Double DECIMAL;

non terminal ini, opt, fields, make_field, field_keys, where_cond, comps, make_comp, comp, yes_comp, no_comp;
non terminal opr_rel, values, opr_log_b, number_v, value_str;

ini			::=	SEL TO FORM ARROW opt fields where_cond
				| error TO FORM ARROW opt fields where_cond
				| SEL error FORM ARROW opt fields where_cond
				| SEL TO error ARROW opt fields where_cond
				| SEL TO FORM error opt fields where_cond
				| SEL TO FORM ARROW error fields where_cond
				| SEL TO FORM ARROW opt error where_cond
				| SEL TO FORM ARROW opt fields error
				;

opt			::=	ID
				| STR
				;

fields		::=	LBRACKET make_field RBRACKET
				| error make_field RBRACKET
				| LBRACKET make_field error
				;

make_field	::=	field_keys
				|
				;

field_keys	::=	STR:p
				{: System.out.println(p.getValue()); :}
				| field_keys COMMA STR:p
				{: System.out.println(p.getValue()); :}
				;

where_cond	::=	WHERE comps
				| error comps
				|
				;

comps		::=	LBRACKET make_comp RBRACKET
				| error make_comp RBRACKET
				| LBRACKET error RBRACKET
				| LBRACKET make_comp error
				;

make_comp	::=	comp
				| make_comp opr_log_b comp
				;

comp		::=	yes_comp
				| no_comp
				;

yes_comp	::=	STR opr_rel values
				| error opr_rel values
				| STR error values
				| STR opr_rel error
				;

no_comp		::=	NOT STR opr_rel values
				{: System.out.println("not"); :}
				| error STR opr_rel values
				| NOT error opr_rel values
				| NOT STR error values
				| NOT STR opr_rel error
				;

opr_rel		::=	GREATER
				| SMALLER
				| GR_EQ
				| SM_EQ
				| EQ
				| NEQ
				;

opr_log_b	::=	AND
				| OR
				| error
				;

values		::=	VALUE_STR
				| number_v
				;

number_v	::=	INTEGER
				| DECIMAL
				;
