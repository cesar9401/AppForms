package com.cesar31.formsweb.parser.answer;

import java_cup.runtime.Symbol;
import com.cesar31.formsweb.control.*;
import com.cesar31.formsweb.model.*;
import java.util.ArrayList;
import java.util.List;

class AnswerParser;

parser code {:

	private DaoDB dao;

	public AnswerParser(AnswerLex lex) {
		super(lex);
		dao = new DaoDB();
	}

	public void syntax_error(Symbol cur_token) {
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);
        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
        }
        System.out.println("");
	}

	public DaoDB getDaoDB() {
		return dao;
	}

:}

terminal COLLECTED, LBRACKET, RBRACKET, LBRACE, RBRACE, COLON, COMMA;
terminal ERROR;
terminal String ID, NAME, DATA, STR;

non terminal json_data, make_d, data_m_form, data_form, form, fd_keys, data, make_data, data_fms, data_f, data_body, data_keys;
non terminal String str;

json_data 	::=	COLLECTED LBRACKET make_d RBRACKET
				;

make_d		::= data_m_form
				|
				;

data_m_form	::=	data_form
				| data_m_form COMMA data_form
				;

data_form	::=	LBRACE form RBRACE
				{: dao.createFormWithData(); :}
				;

form		::=	fd_keys
				| form COMMA fd_keys
				;

fd_keys		::=	ID COLON str:q
				{: dao.setDataFm("ID", q); :}
				| NAME COLON str:q
				{: dao.setDataFm("NAME", q); :}
				| DATA COLON data
				;

data		::=	LBRACKET make_data RBRACKET
				;

make_data	::=	data_fms
				|
				;

data_fms	::=	data_f
				| data_fms COMMA data_f
				;

data_f		::=	LBRACE data_body RBRACE
				{: dao.createDataForm(); :}
				;

data_body	::=	data_keys
				| data_body COMMA data_keys
				;

data_keys	::=	str:p COLON str:q
				{: dao.setDataParam(p, q); :}
				;

str			::=	STR:p {: RESULT = p; :}
				| ID:p {: RESULT = p; :}
				| NAME:p {: RESULT = p; :}
				| DATA:p {: RESULT = p; :}
				;