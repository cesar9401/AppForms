package com.cesar31.formsweb.parser.db;

import com.cesar31.formsweb.parser.db.DataLex;
import com.cesar31.formsweb.control.*;
import com.cesar31.formsweb.model.*;
import java_cup.runtime.Symbol;

import java.util.ArrayList;
import java.util.List;

class DataParser;

parser code {:

	private boolean parsed;
	private DaoDB dao;

	public DataParser(DataLex lex) {
		super(lex);
		this.parsed = true;
		this.dao = new DaoDB();
	}

	public void report_fatal_error(String message, Object info) {
        /* parsed */
        this.parsed = false;
	}

	public void syntax_error(Symbol cur_token) {
        /* parsed */
        this.parsed = false;

        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);
        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
        }
        System.out.println("");
	}

	public boolean isParsed() {
		return parsed;
	}

	public DaoDB getDaoDB() {
		return dao;
	}
:}

terminal FORMS, USERS, LBRACKET, RBRACKET, LBRACE, RBRACE, COLON, COMMA;
terminal ERROR;
terminal String STR, USER, PASS, C_DATE, E_DATE, NULL, ID, TITLE, NAME, THEME, COMP, FIELD_N;
terminal String FORM, TIPO, INDEX, TEXT, ALING, REQUIRED, URL, OPT, ROWS, COLUMNS;
terminal Boolean TRUE, FALSE;
terminal Integer INTEGER;

non terminal json, json_form, make_u, opt, opts, user, users, make_op, components, comps, comp, make_comp, cmp;
non terminal value;
non terminal String str, colon;
non terminal Boolean boolean_v;
non terminal User us;
non terminal Form form;

json		::=	USERS LBRACKET make_u RBRACKET json_form
				;

// json_form 	::=	FORMS

make_u		::=	users
				|
				;

users		::=	user
				| users COMMA user
				;

user		::=	LBRACE us:u RBRACE
				{:
					dao.setUser(u);
				:}
				;

/* Usuarios */
us			::=	USER colon:p COMMA PASS colon:q COMMA C_DATE colon:r COMMA E_DATE colon:s
				{: RESULT = dao.createUser(p, q, r, s); :}
				;

/* Formularios */
form		::=	ID colon COMMA TITLE colon COMMA NAME colon COMMA THEME colon COMMA USER colon COMMA C_DATE colon  COMMA components
				;

/*Componentes*/
components	::=	COMP COLON LBRACKET comps RBRACKET
				;

comps		::=	make_comp
				|
				;

make_comp	::=	comp
				| make_comp COMMA comp
				;

comp		::=	LBRACE cmp RBRACE
				;

cmp			::= ID colon COMMA FIELD_N colon COMMA FORM colon COMMA TIPO colon COMMA INDEX COLON INTEGER COMMA TEXT colon COMMA ALING colon COMMA REQUIRED COLON boolean_v COMMA URL colon COMMA OPT COLON opt COMMA ROWS COLON value COMMA COLUMNS COLON value
				;

/* Options */
opt			::=	LBRACKET make_op RBRACKET
				;

make_op		::= opts
				|
				;

opts		::=	str:p
				| opts COMMA str:p
				;

colon		::=	COLON str:p
				{: RESULT = p; :}
				;

str			::=	STR:p {: RESULT = p; :}
				| USER:p {: RESULT = p; :}
				| PASS:p {: RESULT = p; :}
				| C_DATE:p {: RESULT = p; :}
				| E_DATE:p {: RESULT = p; :}
				| NULL:p {: RESULT = p; :}
				| ID:p {: RESULT = p; :}
				| TITLE:p {: RESULT = p; :}
				| NAME:p {: RESULT = p; :}
				| THEME:p {: RESULT = p; :}
				| COMP:p {: RESULT = p; :}
				| FIELD_N:p {: RESULT = p; :}
				| FORM:p {: RESULT = p; :}
				| TIPO:p {: RESULT = p; :}
				| INDEX:p {: RESULT = p; :}
				| TEXT:p {: RESULT = p; :}
				| ALING:p {: RESULT = p; :}
				| REQUIRED:p {: RESULT = p; :}
				| URL:p {: RESULT = p; :}
				| OPT:p {: RESULT = p; :}
				| ROWS:p {: RESULT = p; :}
				| COLUMNS:p {: RESULT = p; :}
				;

boolean_v	::= TRUE:p {: RESULT = p; :}
				| FALSE:p {: RESULT = p; :}
				;

value		::=	INTEGER:p {: RESULT = p; :}
				| NULL:p {: RESULT = p; :}
				;