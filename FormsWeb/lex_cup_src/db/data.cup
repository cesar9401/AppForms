package com.cesar31.formsweb.parser.db;

import com.cesar31.formsweb.parser.db.DataLex;
import com.cesar31.formsweb.control.*;
import com.cesar31.formsweb.model.*;
import java_cup.runtime.Symbol;

import java.util.ArrayList;
import java.util.List;

class DataParser;

parser code {:

	private boolean parsed;
	private DaoDB dao;

	public DataParser(DataLex lex) {
		super(lex);
		this.parsed = true;
		this.dao = new DaoDB();
	}

	public void report_fatal_error(String message, Object info) {
        /* parsed */
        this.parsed = false;
	}

	public void syntax_error(Symbol cur_token) {
        /* parsed */
        this.parsed = false;

        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);
        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
        }
        System.out.println("");
	}

	public boolean isParsed() {
		return parsed;
	}

	public DaoDB getDaoDB() {
		return dao;
	}
:}

terminal FORMS, USERS, LBRACKET, RBRACKET, LBRACE, RBRACE, COLON, COMMA;
terminal ERROR;
terminal String USER, PASS, DATE_USER, E_DATE, NULL, ID_FORM, TITLE, NAME, THEME, USER_C, DATE_FORM, COMP, ID_COMP, FIELD_N;
terminal String FORM_ID, TIPO, INDEX, TEXT, ALING, REQUIRED, URL, OPT, ROWS, COLUMNS, STR;
terminal Boolean TRUE, FALSE;
terminal Integer INTEGER;

non terminal json, json_form, make_u, opt, user, users, make_op, components, comps, comp, make_c, cm;
non terminal value, u_keys, f_keys, c_keys, json_user;
non terminal make_f, forms, fm;
non terminal String str;
non terminal Boolean boolean_v;
non terminal User us;
non terminal Form form;
non terminal ArrayList<String> opts;

json		::=	json_user json_form
				;

json_user	::=	USERS LBRACKET make_u RBRACKET
				;

json_form 	::=	FORMS LBRACKET make_f RBRACKET
				;

/* Usuarios */
make_u		::=	users
				|
				;

users		::=	user
				| users COMMA user
				;

/* USUARIO */
user		::=	LBRACE us RBRACE
				{: dao.createUser(); :}
				;

us			::=	u_keys
				| us COMMA u_keys
				;

u_keys		::=	USER COLON str:p
				{: dao.setParam("user", p); :}
				| PASS COLON str:p
				{: dao.setParam("pass", p); :}
				| DATE_USER COLON str:p
				{: dao.setParam("cDate", p); :}
				| E_DATE COLON str:p
				{: dao.setParam("eDate", p); :}
				;

/* Formularios */
make_f		::=	forms
				|
				;

forms		::=	form
				| forms COMMA form
				;

/* FORMULARIO */
form		::=	LBRACE fm RBRACE
				{: dao.createForms(); :}
				;

fm			::=	f_keys
				| fm COMMA f_keys
				;

f_keys		::=	ID_FORM COLON str:p
				{: dao.setParam("id_form", p); :}
				| TITLE COLON str:p
				{: dao.setParam("title", p); :}
				| NAME COLON str:p
				{: dao.setParam("name", p); :}
				| THEME COLON str:p
				{: dao.setParam("theme", p); :}
				| USER_C COLON str:p
				{: dao.setParam("user_c", p); :}
				| DATE_FORM COLON str:p
				{: dao.setParam("date_form", p); :}
				| COMP COLON components /* componentes */
				;

/*Componentes*/
components	::=	LBRACKET make_c RBRACKET
				;

make_c		::=	comps
				|
				;

comps		::=	comp
				| comps COMMA comp
				;

/* COMPONENTE */
comp		::=	LBRACE cm RBRACE
				{: dao.createComponents(); :}
				;

cm			::=	c_keys
				| cm COMMA c_keys
				;

c_keys		::=	ID_COMP COLON str:p
				{: dao.setParamC("id_comp", p); :}
				| FIELD_N COLON str:p
				{: dao.setParamC("field", p); :}
				| FORM_ID COLON str:p
				{: dao.setParamC("form_id", p); :}
				| TIPO COLON str:p
				{: dao.setParamC("kind", p); :}
				| INDEX COLON INTEGER:p
				{: dao.setParamC("index", String.valueOf(p)); :}
				| TEXT COLON str:p
				{: dao.setParamC("text", p); :}
				| ALING COLON str:p
				{: dao.setParamC("aling", p); :}
				| REQUIRED COLON boolean_v:p
				{: dao.setParamC("req", String.valueOf(p)); :}
				| URL COLON str:p
				{: dao.setParamC("url", p); :}
				| OPT COLON opt /* Opciones */
				| ROWS COLON value:p
				{: dao.setParamC("rows", String.valueOf(p)); :}
				| COLUMNS COLON value:p
				{: dao.setParamC("cols", String.valueOf(p)); :}
				;

/* Options */
opt			::=	LBRACKET make_op RBRACKET
				;

make_op		::= opts
				|
				;

opts		::=	str:p
				{: dao.setOption(p); :}
				| opts COMMA str:p
				{: dao.setOption(p); :}
				;

str			::=	STR:p {: RESULT = p; :}
				| USER:p {: RESULT = p; :}
				| PASS:p {: RESULT = p; :}
				| DATE_USER:p {: RESULT = p; :}
				| E_DATE:p {: RESULT = p; :}
				| NULL:p {: RESULT = p; :}
				| ID_FORM:p {: RESULT = p; :}
				| TITLE:p {: RESULT = p; :}
				| NAME:p {: RESULT = p; :}
				| THEME:p {: RESULT = p; :}
				| USER_C:p {: RESULT = p; :}
				| DATE_FORM:p {: RESULT = p; :}
				| COMP:p {: RESULT = p; :}
				| ID_COMP:p {: RESULT = p; :}
				| FIELD_N:p {: RESULT = p; :}
				| FORM_ID:p {: RESULT = p; :}
				| TIPO:p {: RESULT = p; :}
				| INDEX:p {: RESULT = p; :}
				| TEXT:p {: RESULT = p; :}
				| ALING:p {: RESULT = p; :}
				| REQUIRED:p {: RESULT = p; :}
				| URL:p {: RESULT = p; :}
				| OPT:p {: RESULT = p; :}
				| ROWS:p {: RESULT = p; :}
				| COLUMNS:p {: RESULT = p; :}
				;

boolean_v	::= TRUE:p {: RESULT = p; :}
				| FALSE:p {: RESULT = p; :}
				;

value		::=	INTEGER:p {: RESULT = p; :}
				| NULL:p {: RESULT = p; :}
				;