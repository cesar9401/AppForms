package com.cesar31.formsweb.lexerandparser;

import com.cesar31.formsweb.lexerandparser.FormsLex;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

//class FormsParser;

parser code {:

	private Symbol cur_token;
	private boolean parsed;

	// public FormsParser(FormsLex lex) {
	// 	super(lex);
	// 	this.parsed = true;
	// }

	public parser(FormsLex lex) {
		super(lex);
		this.parsed = true;
	}

	public void report_fatal_error(String message, Object info) {
        /* parsed */
        this.parsed = false;

        //System.out.println("report_fatal_error");
        //System.out.println("Message: " + message);
        //System.out.println("Object info: " + info);

        /* Armando reportes de errores */
        List<String> expected = new ArrayList<>();
        List<Integer> tokens = expected_token_ids();
        for(Integer i : tokens) {
            expected.add(symbl_name_from_id(i));
        }
	}

	public void syntax_error(Symbol cur_token) {
        /* parsed */
        this.parsed = false;
        /**/

        List<String> expected = new ArrayList<>();

        this.cur_token = cur_token;
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);

        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
            expected.add(symbl_name_from_id(i));
        }
        System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}

	public boolean isParsed() {
		return parsed;
	}

:}

terminal INIT_SOL, FIN_SOL, INIT_MANY_SOL, FIN_MANY_SOL;
terminal PARAM, INTEGER, ID, COLON, SMALLER, GREATER, LBRACE, RBRACE, LBRACKET, RBRACKET, COMMA, EXCL;
terminal PLUS, MINUS, TIMES, DIVIDE;
terminal ERROR, SYMB, QUOTE;

terminal String STR, DATE, ADD_USER, CRED, DATE_ADD, EDIT_USER, DEL_USER, LOGIN, OLD_USER, NEW_USER, NEW_PASS, DATE_MOD, USER, PASS;
terminal String NEW_FORM, PARAM_F;


non terminal ini_sol, fin_sol, sol, sol_user_nl, user_date, creden, new_user, pass_user;
non terminal ini, fin, colon, greater, smaller, excl, lbrace, comma, rbrace, lbracket, rbracket, date_add;
non terminal edit_user, old_user, edit_date, oper, edit_pass, n_user, date_mod;

non terminal String str_param, user, cred, pass, date, str;

sol			::=	ini_sol sol
				| ini_sol
				;

/* inicio solicitud */
ini_sol		::=	SMALLER excl ini colon sol_user_nl
				| error EXCL ini colon sol_user_nl
				// | error sol_user_nl
				;

/* Nuevo Usuario */
sol_user_nl	::=	ADD_USER greater creden /* add user */
				| EDIT_USER greater creden /* edit user */
				| error GREATER creden
				// | error creden
				;

creden		::=	LBRACE cred colon lbracket oper
				| error CRED colon lbracket oper
				// | error oper
				;

oper		::= new_user /* add user */
				| edit_user /* edit user */
				;

new_user	::=	LBRACE user colon str_param:u pass_user rbracket rbrace fin_sol
				{:
					System.out.printf("User = %s\n", u);
				:}
				| error USER colon str_param pass_user rbracket rbrace fin_sol
				{:
					System.out.println("new_user ::= error COLON ...");
				:}
				// | error fin_sol
				;

pass_user	::=	COMMA pass colon str_param:p user_date rbrace
				{:
					System.out.printf("Pass = %s\n", p);
				:}
				| error PASS colon str_param user_date rbrace
				;

edit_user	::=	LBRACE OLD_USER colon str_param:u comma n_user colon str_param:v edit_pass rbracket rbrace fin_sol
				{:
					System.out.printf("oldUser = %s\n", u);
					System.out.printf("newUser = %s\n", v);
				:}
				| error OLD_USER colon str_param comma n_user colon str_param edit_pass rbracket rbrace fin_sol
				;

edit_pass	::=	COMMA NEW_PASS colon str_param:w edit_date rbrace
				{:
					System.out.printf("newPass = %s\n", w);
				:}
				| error NEW_PASS colon str_param edit_date rbrace
				{:
					System.out.println("edit_pass ::= error NEW_PASS");
				:}
				;

user_date	::=	COMMA date_add colon date:a
				{:
					System.out.printf("DateMod = %s\n", a);
				:}
				|
				;

edit_date	::=	COMMA date_mod colon date:a
				{: System.out.printf("Date = %s\n", a); :}
				|
				;

/* fin solicitud */
fin_sol		::= smaller fin excl greater
				;

str_param	::=	STR:p {: RESULT = p; :}
				| DATE:p {: RESULT = p; :}
				| ADD_USER:p {: RESULT = p; :}
				| CRED:p {: RESULT = p; :}
				| USER:p {: RESULT = p; :}
				| PASS:p {: RESULT = p; :}
				| DATE_ADD:p {: RESULT = p; :}
				| EDIT_USER:p {: RESULT = p; :}
				| DEL_USER:p {: RESULT = p; :}
				| LOGIN:p {: RESULT = p; :}
				| OLD_USER:p {: RESULT = p; :}
				| NEW_USER:p {: RESULT = p; :}
				| NEW_PASS:p {: RESULT = p; :}
				| DATE_MOD:p {: RESULT = p; :}
				| NEW_FORM:p {: RESULT = p; :}
				| PARAM_F:p {: RESULT = p; :}
				| error
				;

/* -------------------- terminales con errores para no terminales ----------------------------- */
ini			::=	INIT_SOL
				| error
				{: System.out.println("ini ::= error"); :}
				;

fin			::=	FIN_SOL
				| error
				{: System.out.println("fin ::= error"); :}
				;

user		::= USER
				| error
				{: System.out.println("user ::= error"); :}
				;

cred		::=	CRED
				| error
				{: System.out.println("cred ::= error"); :}
				;

pass		::=	PASS
				| error
				{: System.out.println("pass ::= error"); :}
				;

date_add	::=	DATE_ADD
				| error
				{: System.out.println("date_add ::= error"); :}
				;

date		::=	DATE:p {: RESULT = p; :}
				| error
				{: System.out.println("date ::= error"); :}
				;

colon		::=	COLON
				| error
				{: System.out.println("colon ::= error"); :}
				;

greater		::=	GREATER
				| error
				{: System.out.println("greater ::= error"); :}
				;

smaller		::=	SMALLER
				| error
				{: System.out.println("smaller ::= error"); :}
				;

excl		::=	EXCL
				| error
				{: System.out.println("excl ::= error"); :}
				;

// lbrace		::=	LBRACE
// 				| error
// 				{: System.out.println("lbrace ::= error"); :}
// 				;

rbrace		::=	RBRACE
				| error
				{: System.out.println("rbrace ::= error"); :}
				;

comma		::=	COMMA
				| error
				{: System.out.println("comma ::= error"); :}
				;

lbracket	::=	LBRACKET
				| error
				{: System.out.println("lbracket ::= error"); :}
				;

rbracket	::=	RBRACKET
				| error
				{: System.out.println("rbracket ::= error"); :}
				;

n_user		::= NEW_USER
				| error
				{: System.out.println("n_user ::= error"); :}
				;

date_mod	::=	DATE_MOD
				| error
				{: System.out.println("date_mod ::= error"); :}
				;
