package com.cesar31.formsweb.parser.main;

import com.cesar31.formsweb.parser.main.FormsLex;
import com.cesar31.formsweb.control.*;
import com.cesar31.formsweb.model.*;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

class FormsParser;

parser code {:

	private Symbol cur_token;
	private boolean parsed;
	private UserContainer u;
	private User usuario;

	public FormsParser(FormsLex lex) {
		super(lex);
		this.parsed = true;
		this.u = new UserContainer();
	}

	/* Constructor sin cambiar nombre */
	// public parser(FormsLex lex) {
	// 	super(lex);
	// 	this.parsed = true;
	// 	u = new UserContainer();
	// }

	public void report_fatal_error(String message, Object info) {
        /* parsed */
        this.parsed = false;

        //System.out.println("report_fatal_error");
        //System.out.println("Message: " + message);
        //System.out.println("Object info: " + info);

        /* Armando reportes de errores */
        List<String> expected = new ArrayList<>();
        List<Integer> tokens = expected_token_ids();
        for(Integer i : tokens) {
            expected.add(symbl_name_from_id(i));
        }
	}

	public void syntax_error(Symbol cur_token) {
        /* parsed */
        this.parsed = false;
        /**/

        List<String> expected = new ArrayList<>();

        this.cur_token = cur_token;
		Token t = (Token) cur_token.value;
        System.out.printf("syntax_error: %s, %s\n", symbl_name_from_id(cur_token.sym), t.toString());

        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
            expected.add(symbl_name_from_id(i));
        }
        System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}

	public boolean isParsed() {
		return parsed;
	}

	public UserContainer getContainer() {
		return u;
	}

:}

terminal Token INIT_SOL, FIN_SOL, INIT_MANY_SOL, FIN_MANY_SOL;
terminal Token PARAM, INTEGER, ID, COLON, SMALLER, GREATER, LBRACE, RBRACE, LBRACKET, RBRACKET, COMMA, EXCL;
terminal Token PLUS, MINUS, TIMES, DIVIDE;
terminal Token ERROR, SYMB, QUOTE;

terminal Token STR, STR_N, DATE, ADD_USER, CRED, DATE_ADD, EDIT_USER, DEL_USER, LOGIN, OLD_USER, NEW_USER, NEW_PASS, DATE_MOD, USER, PASS;
terminal Token NEW_FORM, PARAM_F;


non terminal ini_sol, fin_sol, sol, sol_user_nl, user_date, credNew, credEdit, credDel, new_user, pass_user;
non terminal edit_user, edit_date, edit_pass, user_n, del_user;

non terminal String str_param;

/* non terminal para crear usuario*/
non terminal us, pass, date, add_u, add;


sol			::=	ini_sol sol
				| ini_sol
				;

ini_sol		::=	SMALLER EXCL INIT_SOL COLON sol_user_nl
				| error EXCL INIT_SOL COLON sol_user_nl
				| SMALLER error INIT_SOL COLON sol_user_nl
				| SMALLER EXCL error COLON sol_user_nl
				| SMALLER EXCL INIT_SOL error sol_user_nl
				;

sol_user_nl	::=	ADD_USER GREATER credNew /* add user */
				{: System.out.println("Crear Usuario"); :}
				| error GREATER credNew
				| ADD_USER error credNew
				| EDIT_USER GREATER credEdit /* edit user */
				| error GREATER credEdit
				| EDIT_USER error credEdit
				| DEL_USER GREATER credDel /* del user */
				| error GREATER credDel
				| DEL_USER error credDel
				| LOGIN GREATER credNew /* login user */
				{: System.out.println("Login Usuario"); :}
				| LOGIN error credNew
				;

/* add user */
credNew	::=		LBRACE CRED COLON LBRACKET new_user
				| error CRED COLON LBRACKET new_user
				| LBRACE error COLON LBRACKET new_user
				| LBRACE CRED error LBRACKET new_user
				| LBRACE CRED COLON error new_user
				;

/* edit user */
credEdit	::=	LBRACE CRED COLON LBRACKET edit_user
				| error CRED COLON LBRACKET edit_user
				| LBRACE error COLON LBRACKET edit_user
				| LBRACE CRED error LBRACKET edit_user
				| LBRACE CRED COLON error edit_user
				;

/* del user */
credDel		::= LBRACE CRED COLON LBRACKET del_user
				| error CRED COLON LBRACKET del_user
				| LBRACE error COLON LBRACKET del_user
				| LBRACE CRED error LBRACKET del_user
				| LBRACE CRED COLON error del_user
				;

/* add user */
new_user	::=	LBRACE add RBRACE RBRACKET RBRACE fin_sol
				| error add RBRACE RBRACKET RBRACE fin_sol
				// | LBRACE error RBRACE RBRACKET RBRACE fin_sol
				| LBRACE add error RBRACKET RBRACE fin_sol
				| LBRACE add RBRACE error RBRACE fin_sol
				| LBRACE add RBRACE RBRACKET error fin_sol
				;

/* producciones para crear usuario nuevo */
us		::=		USER:a COLON str_param:p
				{:
					System.out.println("User: " + p);
					u.setUser(a, p);
				:}
				// | error COLON str_param
				| USER error str_param
				| USER COLON error
				;

pass	::=		PASS:a COLON str_param:p
				{:
					System.out.println("pass: " + p);
					u.setPassword(a, p);
				:}
				// | error COLON str_param
				| PASS error str_param
				| PASS COLON error
				;

date	::=		DATE_ADD:a COLON DATE:p
				{:
					System.out.println("date: " + p.getValue());
					u.setDate(a, p.getValue());
				:}
				// | error COLON DATE
				| DATE_ADD error DATE
				| DATE_ADD COLON error
				;

add_u	::=		us
				| pass
				| date
				| error
				;

add		::=		add_u
				| add_u COMMA add
				;
/* producciones para crear usuario nuevo */

// pass_user	::=	COMMA PASS COLON str_param:p user_date:user RBRACE
// 				{:
// 					RESULT = u.setPassword((User) user, p);
// 				:}
// 				| error PASS COLON str_param user_date RBRACE
// 				| COMMA error COLON str_param user_date RBRACE
// 				| COMMA PASS error str_param user_date RBRACE
// 				| COMMA PASS COLON error user_date RBRACE
// 				| COMMA PASS COLON str_param user_date error
// 				;

/* edit user */
edit_user	::=	LBRACE OLD_USER COLON str_param:u user_n RBRACKET RBRACE fin_sol
				{:
					System.out.printf("oldUser = %s\n", u);
				:}
				| error OLD_USER COLON str_param user_n RBRACKET RBRACE fin_sol
				| LBRACE error COLON str_param user_n RBRACKET RBRACE fin_sol
				| LBRACE OLD_USER error str_param user_n RBRACKET RBRACE fin_sol
				| LBRACE OLD_USER COLON str_param user_n error RBRACE fin_sol
				| LBRACE OLD_USER COLON str_param user_n RBRACKET error fin_sol
				;

user_n		::=	COMMA NEW_USER COLON str_param:v edit_pass
				{:
					System.out.printf("newUser = %s\n", v);
				:}
				| error NEW_USER COLON str_param edit_pass
				| COMMA error COLON str_param edit_pass
				| COMMA NEW_USER error str_param edit_pass
				;

edit_pass	::=	COMMA NEW_PASS COLON str_param:w edit_date RBRACE
				{:
					System.out.printf("newPass = %s\n", w);
				:}
				| error NEW_PASS COLON str_param edit_date RBRACE
				| COMMA error COLON str_param edit_date RBRACE
				| COMMA NEW_PASS error str_param edit_date RBRACE
				| COMMA NEW_USER COLON str_param edit_date error
				;

// user_date	::=	COMMA DATE_ADD COLON DATE:a
// 				{:
// 					RESULT = u.setDate(new User(), a.getValue());
// 				:}
// 				// | COMMA error COLON DATE: /* REVISAR */
// 				| COMMA DATE_ADD error DATE
// 				| COMMA DATE_ADD COLON error
// 				|
// 				{:
// 					RESULT = u.setDate(new User(), "");
// 				:}
// 				;

edit_date	::=	COMMA DATE_MOD COLON DATE:a
				{: System.out.printf("DateMod = %s\n", a.getValue()); :}
				| COMMA error COLON DATE
				| COMMA DATE_MOD error DATE
				| COMMA DATE_MOD COLON error
				|
				;

/* delete user */
// del_user	::=	LBRACE USER COLON str_param:u RBRACE RBRACKET RBRACE fin_sol
// 				{:
// 					System.out.printf("delUser = %s\n", u);
// 				:}
// 				| error USER COLON str_param RBRACE RBRACKET RBRACE fin_sol
// 				| LBRACE error COLON str_param RBRACE RBRACKET RBRACE fin_sol
// 				| LBRACE USER error str_param RBRACE RBRACKET RBRACE fin_sol
// 				| LBRACE USER COLON str_param error RBRACKET RBRACE fin_sol
// 				| LBRACE USER COLON str_param RBRACE error RBRACE fin_sol
// 				| LBRACE USER COLON str_param RBRACE RBRACKET error fin_sol
// 				;

/* fin solicitud */
fin_sol		::= SMALLER FIN_SOL EXCL GREATER
				| error FIN_SOL EXCL GREATER
				| SMALLER error EXCL GREATER
				| SMALLER FIN_SOL error GREATER
				| SMALLER FIN_SOL EXCL error
				;

str_param	::=	STR:p {: RESULT = p.getValue(); :}
				| DATE:p {: RESULT = p.getValue(); :}
				| ADD_USER:p {: RESULT = p.getValue(); :}
				| CRED:p {: RESULT = p.getValue(); :}
				| USER:p {: RESULT = p.getValue(); :}
				| PASS:p {: RESULT = p.getValue(); :}
				| DATE_ADD:p {: RESULT = p.getValue(); :}
				| EDIT_USER:p {: RESULT = p.getValue(); :}
				| DEL_USER:p {: RESULT = p.getValue(); :}
				| LOGIN:p {: RESULT = p.getValue(); :}
				| OLD_USER:p {: RESULT = p.getValue(); :}
				| NEW_USER:p {: RESULT = p.getValue(); :}
				| NEW_PASS:p {: RESULT = p.getValue(); :}
				| DATE_MOD:p {: RESULT = p.getValue(); :}
				| NEW_FORM:p {: RESULT = p.getValue(); :}
				| PARAM_F:p {: RESULT = p.getValue(); :}
				;
