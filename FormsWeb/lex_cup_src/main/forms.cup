package com.cesar31.formsweb.parser.main;

import com.cesar31.formsweb.parser.main.FormsLex;
import com.cesar31.formsweb.control.*;
import com.cesar31.formsweb.model.*;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

class FormsParser;

parser code {:

	private Symbol cur_token;
	private UserContainer u;
	private User usuario;

	public FormsParser(FormsLex lex) {
		super(lex);
		this.u = new UserContainer();
	}

	/* Constructor sin cambiar nombre */
	// public parser(FormsLex lex) {
	// 	super(lex);
	// 	this.parsed = true;
	// 	u = new UserContainer();
	// }

	public void report_fatal_error(String message, Object info) {

        //System.out.println("report_fatal_error");
        //System.out.println("Message: " + message);
        //System.out.println("Object info: " + info);

        /* Armando reportes de errores */
        // List<String> expected = new ArrayList<>();
        // List<Integer> tokens = expected_token_ids();
        // for(Integer i : tokens) {
        //     expected.add(symbl_name_from_id(i));
        // }

		// this.u.setError(this.cur_token, symbl_name_from_id(this.cur_token.sym), expected);
	}

	public void syntax_error(Symbol cur_token) {
        List<String> expected = new ArrayList<>();

        this.cur_token = cur_token;
		//Token t = (Token) cur_token.value;
        //System.out.printf("syntax_error: %s, %s\n", symbl_name_from_id(cur_token.sym), t.toString());

        List<Integer> tokens = expected_token_ids();
        // System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			//System.out.printf("%s, ", symbl_name_from_id(i));
            expected.add(symbl_name_from_id(i));
        }
        //System.out.println("");

		/* Reporte de Errores */
		this.u.setError(cur_token, symbl_name_from_id(cur_token.sym), expected);
	}

	protected int error_sync_size() {
		return 1;
	}

	public boolean isParsed() {
		return u.getErrors().isEmpty();
	}

	public UserContainer getContainer() {
		return u;
	}

:}

terminal Token INIT_SOL, FIN_SOL, INIT_MANY_SOL, FIN_MANY_SOL;
terminal Token PARAM, INTEGER, ID, COLON, SMALLER, GREATER, LBRACE, RBRACE, LBRACKET, RBRACKET, COMMA, EXCL;
terminal Token PLUS, MINUS, TIMES, DIVIDE;
terminal Token ERROR, SYMB, QUOTE;

terminal Token STR, STR_N, DATE, ADD_USER, CRED, DATE_ADD, EDIT_USER, DEL_USER, LOGIN, OLD_USER, NEW_USER, NEW_PASS, DATE_MOD, USER, PASS;
terminal Token NEW_FORM, PARAM_F;


non terminal ini_sol, fin_sol, sol, sol_user_nl, user_date, credNew, credEdit, credDel, new_user, pass_user;
non terminal edit_user, del_user;

non terminal String str_param;

/* non terminal para crear usuario*/
non terminal us, pass, date, add_u, add;
/* not terminal para editar usuario */
non terminal old_u, new_u, new_p, e_date, edit_u, edit;

sol			::=	ini_sol sol
				| ini_sol
				;

ini_sol		::=	SMALLER:q EXCL INIT_SOL COLON sol_user_nl:r
				{: u.setResult(q, (String) r); :}
				| error EXCL:q INIT_SOL COLON sol_user_nl:r
				{: u.setResult((Token) q, (String) r); :}
				| SMALLER:q error INIT_SOL COLON sol_user_nl:r
				{: u.setResult(q, (String) r); :}
				| SMALLER:q EXCL error COLON sol_user_nl:r
				{: u.setResult(q, (String) r); :}
				| SMALLER:q EXCL INIT_SOL error sol_user_nl:r
				{: u.setResult(q, (String) r); :}
				;

sol_user_nl	::=	ADD_USER GREATER credNew /* add user */
				{: RESULT = "CREAR"; :}
				| error GREATER credNew
				{: RESULT = "CREAR"; :}
				| ADD_USER error credNew
				{: RESULT = "CREAR"; :}
				| EDIT_USER GREATER credEdit /* edit user */
				{: RESULT = "EDIT"; :}
				| error GREATER credEdit
				{: RESULT = "EDIT"; :}
				| EDIT_USER error credEdit
				{: RESULT = "EDIT"; :}
				| DEL_USER GREATER credDel /* del user */
				| error GREATER credDel
				| DEL_USER error credDel
				| LOGIN GREATER credNew /* login user */
				{: RESULT = "LOGIN"; :}
				| LOGIN error credNew
				{: RESULT = "LOGIN"; :}
				;

/* add user */
credNew	::=		LBRACE CRED COLON LBRACKET new_user
				| error CRED COLON LBRACKET new_user
				| LBRACE error COLON LBRACKET new_user
				| LBRACE CRED error LBRACKET new_user
				| LBRACE CRED COLON error new_user
				;

/* edit user */
credEdit	::=	LBRACE CRED COLON LBRACKET edit_user
				| error CRED COLON LBRACKET edit_user
				| LBRACE error COLON LBRACKET edit_user
				| LBRACE CRED error LBRACKET edit_user
				| LBRACE CRED COLON error edit_user
				;

/* del user */
credDel		::= LBRACE CRED COLON LBRACKET del_user
				| error CRED COLON LBRACKET del_user
				| LBRACE error COLON LBRACKET del_user
				| LBRACE CRED error LBRACKET del_user
				| LBRACE CRED COLON error del_user
				;

/* ----------------------------------------------------------- producciones para crear usuario nuevo */
us		::=		USER:a COLON str_param:p
				{:
					u.setNewParam(a, p, "USUARIO");
					System.out.println("USUARIO");
				:}
				// | error COLON str_param
				| USER error str_param
				| USER COLON error
				;

pass	::=		PASS:a COLON str_param:p
				{:
					u.setNewParam(a, p, "PASSWORD");
					System.out.println("PASSWORD");
				:}
				// | error COLON str_param
				| PASS error str_param
				| PASS COLON error
				;

date	::=		DATE_ADD:a COLON DATE:p
				{:
					u.setNewParam(a, p.getValue(), "FECHA_CREACION");
					System.out.println("FECHA_CREACION");
				:}
				// | error COLON DATE
				| DATE_ADD error DATE
				| DATE_ADD COLON error
				;

add_u	::=		us
				| pass
				| date
				// | error
				;

add		::=		add_u
				| add_u COMMA add
				;

new_user	::=	LBRACE add RBRACE RBRACKET RBRACE fin_sol
				| error add RBRACE RBRACKET RBRACE fin_sol
				// | LBRACE error RBRACE RBRACKET RBRACE fin_sol
				| LBRACE add error RBRACKET RBRACE fin_sol
				| LBRACE add RBRACE error RBRACE fin_sol
				| LBRACE add RBRACE RBRACKET error fin_sol
				;
/* ----------------------------------------------------------- producciones para crear usuario nuevo */

/* ----------------------------------------------------------- producciones para modificar usuario */
old_u	::=		OLD_USER:a COLON str_param:p
				{:
					u.setEditParam(a, p, "USUARIO_ANTIGUO");
					// System.out.println("USUARIO_ANTIGUO");
				:}
				// | error COLON str_param
				| OLD_USER error str_param
				| OLD_USER COLON error
				;

new_u	::=		NEW_USER:a COLON str_param:p
				{:
					u.setEditParam(a, p, "USUARIO_NUEVO");
					// System.out.println("USUARIO_NUEVO");
				:}
				// | error COLON str_param
				| NEW_USER error str_param
				| NEW_USER COLON error
				;

new_p	::=		NEW_PASS:a COLON str_param:p
				{:
					u.setEditParam(a, p, "NUEVO_PASSWORD");
					// System.out.println("NUEVO_PASSWORD");
				:}
				// | error COLON str_param
				| NEW_PASS error str_param
				| NEW_PASS COLON error
				;

e_date	::=		DATE_MOD:a COLON DATE:p
				{:
					u.setEditParam(a, p.getValue(), "FECHA_MODIFICACION");
					// System.out.println("FECHA_MODIFICACION");
				:}
				// | error COLON DATE
				| DATE_MOD error DATE
				| DATE_MOD COLON error
				;

edit_u	::=		old_u
				| new_u
				| new_p
				| e_date
				// | error
				;

edit	::=		edit_u
				| edit_u COMMA edit
				;

edit_user	::=	LBRACE edit RBRACE RBRACKET RBRACE fin_sol
				| error edit RBRACE RBRACKET RBRACE fin_sol
				// | LBRACE error RBRACE RBRACKET RBRACE fin_sol
				| LBRACE edit error RBRACKET RBRACE fin_sol
				| LBRACE edit RBRACE error RBRACE fin_sol
				| LBRACE edit RBRACE RBRACKET error fin_sol
				;
/* ----------------------------------------------------------- producciones para modificar usuario */

/* fin solicitud */
fin_sol		::= SMALLER FIN_SOL EXCL GREATER
				| error FIN_SOL EXCL GREATER
				| SMALLER error EXCL GREATER
				| SMALLER FIN_SOL error GREATER
				| SMALLER FIN_SOL EXCL error
				;

str_param	::=	STR:p {: RESULT = p.getValue(); :}
				| DATE:p {: RESULT = p.getValue(); :}
				| ADD_USER:p {: RESULT = p.getValue(); :}
				| CRED:p {: RESULT = p.getValue(); :}
				| USER:p {: RESULT = p.getValue(); :}
				| PASS:p {: RESULT = p.getValue(); :}
				| DATE_ADD:p {: RESULT = p.getValue(); :}
				| EDIT_USER:p {: RESULT = p.getValue(); :}
				| DEL_USER:p {: RESULT = p.getValue(); :}
				| LOGIN:p {: RESULT = p.getValue(); :}
				| OLD_USER:p {: RESULT = p.getValue(); :}
				| NEW_USER:p {: RESULT = p.getValue(); :}
				| NEW_PASS:p {: RESULT = p.getValue(); :}
				| DATE_MOD:p {: RESULT = p.getValue(); :}
				| NEW_FORM:p {: RESULT = p.getValue(); :}
				| PARAM_F:p {: RESULT = p.getValue(); :}
				;
