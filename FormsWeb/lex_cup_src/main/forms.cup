package com.cesar31.formsweb.lexerandparser;

import com.cesar31.formsweb.lexerandparser.FormsLex;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

//class FormsParser;

parser code {:

	private Symbol cur_token;
	private boolean parsed;

	// public FormsParser(FormsLex lex) {
	// 	super(lex);
	// 	this.parsed = true;
	// }

	public parser(FormsLex lex) {
		super(lex);
		this.parsed = true;
	}

	public void report_fatal_error(String message, Object info) {
        /* parsed */
        this.parsed = false;

        //System.out.println("report_fatal_error");
        //System.out.println("Message: " + message);
        //System.out.println("Object info: " + info);

        /* Armando reportes de errores */
        List<String> expected = new ArrayList<>();
        List<Integer> tokens = expected_token_ids();
        for(Integer i : tokens) {
            expected.add(symbl_name_from_id(i));
        }
	}

	public void syntax_error(Symbol cur_token) {
        /* parsed */
        this.parsed = false;
        /**/

        List<String> expected = new ArrayList<>();

        this.cur_token = cur_token;
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);

        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
            expected.add(symbl_name_from_id(i));
        }
        System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}

	public boolean isParsed() {
		return parsed;
	}

:}

terminal INIT_SOL, FIN_SOL, INIT_MANY_SOL, FIN_MANY_SOL, NEW_USER, CRED, USER, PASS, DATE, EDIT_USER, DEL_USER, LOGIN;
terminal PARAM, INTEGER, ID, QUOTE, COLON, SMALLER, GREATER, LBRACE, RBRACE, LBRACKET, RBRACKET, COMMA, EXCL;
terminal PLUS, MINUS, TIMES, DIVIDE;
terminal ERROR, STRING_LITERAL;

non terminal user_user, user_pass, user_nl, sol_user_nl;
non terminal ini, fin, new_user, cred, colon, quote, greater, lbrace, comma, rbrace, lbracket, rbracket;

sol_user_nl	::=	ini colon quote new_user quote greater user_nl fin
				;

user_nl		::=	lbrace quote cred quote colon lbracket lbrace user_user comma user_pass rbrace rbracket rbrace
				;

user_user	::=	quote USER quote colon quote PARAM:user quote
				{:
					System.out.printf("User = %s\n", user);
				:}
				;

user_pass	::=	quote PASS quote colon quote PARAM:pass quote
				{:
					System.out.printf("Pass = %s\n", pass); :}
				;

ini		::=		INIT_SOL
				| error
				{: System.out.println("ini ::= error"); :}
				;

fin			::=	FIN_SOL
				| error
				{: System.out.println("fin ::= error"); :}
				;

new_user	::=	NEW_USER
				| error
				{: System.out.println("new_user ::= error"); :}
				;

cred		::=	CRED
				| error
				{: System.out.println("cred ::= error"); :}
				;

colon		::=	COLON
				| error
				{: System.out.println("colon ::= error"); :}
				;

quote		::=	QUOTE
				| error
				{: System.out.println("quote ::= error"); :}
				;

greater		::=	GREATER
				| error
				{: System.out.println("greater ::= error"); :}
				;

lbrace		::=	LBRACE
				| error
				{: System.out.println("lbrace ::= error"); :}
				;

rbrace		::=	RBRACE
				| error
				{: System.out.println("rbrace ::= error"); :}
				;

comma		::=	COMMA
				| error
				{: System.out.println("comma ::= error"); :}
				;

lbracket	::=	LBRACKET
				| error
				{: System.out.println("lbracket ::= error"); :}
				;

rbracket	::=	RBRACKET
				| error
				{: System.out.println("rbracket ::= error"); :}
				;
