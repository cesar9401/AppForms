
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.formsweb.parser.sqf;

import com.cesar31.formsweb.control.SQForm;
import com.cesar31.formsweb.model.FormData;
import com.cesar31.formsweb.model.Token;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SQFParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SQFParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SQFParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SQFParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SQFParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\004\011\000\002\002\004\000\002\004" +
    "\011\000\002\004\011\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\002\003\000\002\002\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\006\003\000\002\006" +
    "\002\000\002\007\003\000\002\007\005\000\002\003\004" +
    "\000\002\003\004\000\002\003\002\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\011\003\000\002\011\005\000\002\012\003\000\002\012" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\014\006\000\002\014\006\000" +
    "\002\014\006\000\002\014\006\000\002\014\006\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\016\003\000" +
    "\002\016\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\003\005\004\006\001\002\000\004\002" +
    "\152\001\002\000\004\005\144\001\002\000\006\003\010" +
    "\005\007\001\002\000\006\003\120\006\121\001\002\000" +
    "\004\006\011\001\002\000\004\007\012\001\002\000\006" +
    "\031\013\032\015\001\002\000\006\003\ufff8\011\ufff8\001" +
    "\002\000\006\003\017\011\020\001\002\000\006\003\ufff7" +
    "\011\ufff7\001\002\000\010\002\uffed\003\033\010\032\001" +
    "\002\000\006\012\ufff2\032\021\001\002\000\010\003\ufff2" +
    "\012\ufff2\032\021\001\002\000\010\003\ufff1\012\ufff1\024" +
    "\ufff1\001\002\000\006\003\026\012\027\001\002\000\010" +
    "\003\ufff3\012\ufff3\024\024\001\002\000\004\032\025\001" +
    "\002\000\010\003\ufff0\012\ufff0\024\ufff0\001\002\000\010" +
    "\002\ufff4\003\ufff4\010\ufff4\001\002\000\010\002\ufff6\003" +
    "\ufff6\010\ufff6\001\002\000\004\012\031\001\002\000\010" +
    "\002\ufff5\003\ufff5\010\ufff5\001\002\000\006\003\035\011" +
    "\036\001\002\000\006\003\035\011\036\001\002\000\004" +
    "\002\ufffe\001\002\000\010\003\074\015\043\032\046\001" +
    "\002\000\010\003\042\015\043\032\046\001\002\000\004" +
    "\002\uffee\001\002\000\012\003\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\001\002\000\012\003\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\001\002\000\022\012\113\016\050\017\052\020\056\021" +
    "\055\022\047\023\053\032\075\001\002\000\006\003\102" +
    "\032\103\001\002\000\012\003\067\012\071\013\066\014" +
    "\072\001\002\000\012\003\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\001\002\000\020\003\051\016\050\017\052\020\056\021" +
    "\055\022\047\023\053\001\002\000\012\003\uffd7\034\uffd7" +
    "\036\uffd7\037\uffd7\001\002\000\012\003\uffdb\034\uffdb\036" +
    "\uffdb\037\uffdb\001\002\000\010\034\062\036\057\037\064" +
    "\001\002\000\012\003\uffda\034\uffda\036\uffda\037\uffda\001" +
    "\002\000\012\003\uffd6\034\uffd6\036\uffd6\037\uffd6\001\002" +
    "\000\012\003\061\034\062\036\057\037\064\001\002\000" +
    "\012\003\uffd8\034\uffd8\036\uffd8\037\uffd8\001\002\000\012" +
    "\003\uffd9\034\uffd9\036\uffd9\037\uffd9\001\002\000\012\003" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\001\002\000\012\003\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\001\002\000\012\003\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\001\002\000\012\003\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\001\002\000\012\003\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\001\002\000\012\003\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\001\002\000\012\003\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\001\002\000\010\003\uffd5\015\uffd5\032\uffd5\001\002" +
    "\000\012\002\uffe9\003\uffd3\015\uffd3\032\uffd3\001\002\000" +
    "\010\003\074\015\043\032\046\001\002\000\004\002\uffec" +
    "\001\002\000\010\003\uffd4\015\uffd4\032\uffd4\001\002\000" +
    "\012\003\uffe7\012\uffe7\013\uffe7\014\uffe7\001\002\000\020" +
    "\016\050\017\052\020\056\021\055\022\047\023\053\032" +
    "\075\001\002\000\016\016\050\017\052\020\056\021\055" +
    "\022\047\023\053\001\002\000\010\034\062\036\057\037" +
    "\064\001\002\000\012\003\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\001\002\000\010\034\062\036\057\037\064\001\002\000" +
    "\012\003\uffdf\012\uffdf\013\uffdf\014\uffdf\001\002\000\016" +
    "\016\050\017\052\020\056\021\055\022\047\023\053\001" +
    "\002\000\020\003\104\016\050\017\052\020\056\021\055" +
    "\022\047\023\053\001\002\000\010\034\062\036\057\037" +
    "\064\001\002\000\012\003\107\034\062\036\057\037\064" +
    "\001\002\000\012\003\uffe0\012\uffe0\013\uffe0\014\uffe0\001" +
    "\002\000\012\003\uffdc\012\uffdc\013\uffdc\014\uffdc\001\002" +
    "\000\012\003\uffdd\012\uffdd\013\uffdd\014\uffdd\001\002\000" +
    "\010\034\062\036\057\037\064\001\002\000\012\003\uffde" +
    "\012\uffde\013\uffde\014\uffde\001\002\000\004\002\uffea\001" +
    "\002\000\012\003\115\012\116\013\066\014\072\001\002" +
    "\000\010\003\uffd3\015\uffd3\032\uffd3\001\002\000\004\002" +
    "\uffeb\001\002\000\004\002\uffef\001\002\000\004\007\140" +
    "\001\002\000\006\003\122\007\123\001\002\000\006\031" +
    "\013\032\015\001\002\000\010\003\124\031\013\032\015" +
    "\001\002\000\006\003\017\011\020\001\002\000\006\003" +
    "\127\011\020\001\002\000\010\002\uffed\003\131\010\032" +
    "\001\002\000\014\002\uffed\003\033\010\032\012\ufff2\032" +
    "\021\001\002\000\004\002\ufffa\001\002\000\010\002\ufff9" +
    "\003\035\011\036\001\002\000\004\002\001\001\002\000" +
    "\010\002\uffed\003\033\010\032\001\002\000\004\002\ufffb" +
    "\001\002\000\006\003\017\011\020\001\002\000\010\002" +
    "\uffed\003\033\010\032\001\002\000\004\002\ufffc\001\002" +
    "\000\006\031\013\032\015\001\002\000\006\003\017\011" +
    "\020\001\002\000\010\002\uffed\003\033\010\032\001\002" +
    "\000\004\002\ufffd\001\002\000\004\006\145\001\002\000" +
    "\004\007\146\001\002\000\006\031\013\032\015\001\002" +
    "\000\006\003\017\011\020\001\002\000\010\002\uffed\003" +
    "\033\010\032\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\004\004\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\013\001\001\000" +
    "\002\001\001\000\004\005\015\001\001\000\002\001\001" +
    "\000\004\003\033\001\001\000\006\006\027\007\022\001" +
    "\001\000\006\006\021\007\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\116\001\001\000" +
    "\004\010\036\001\001\000\002\001\001\000\012\011\113" +
    "\012\037\013\044\014\040\001\001\000\012\011\043\012" +
    "\037\013\044\014\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\075\001\001\000" +
    "\002\001\001\000\004\017\067\001\001\000\002\001\001" +
    "\000\004\015\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\064\020\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\057\020\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\072\013\044\014\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\075\001\001\000\004\015\077\001\001\000" +
    "\006\016\076\020\062\001\001\000\002\001\001\000\006" +
    "\016\100\020\062\001\001\000\002\001\001\000\004\015" +
    "\110\001\001\000\004\015\104\001\001\000\006\016\107" +
    "\020\062\001\001\000\006\016\105\020\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\111\020\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\134\001\001\000\004\002\124\001\001" +
    "\000\004\005\132\001\001\000\004\005\125\001\001\000" +
    "\004\003\131\001\001\000\010\003\127\006\027\007\022" +
    "\001\001\000\002\001\001\000\004\010\036\001\001\000" +
    "\002\001\001\000\004\003\133\001\001\000\002\001\001" +
    "\000\004\005\135\001\001\000\004\003\136\001\001\000" +
    "\002\001\001\000\004\002\140\001\001\000\004\005\141" +
    "\001\001\000\004\003\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\146\001\001" +
    "\000\004\005\147\001\001\000\004\003\150\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SQFParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SQFParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SQFParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Symbol cur_token;
	private SQForm sqf;

	public SQFParser(SQFLex lex, SQForm sqf) {
		super(lex);
		this.sqf = sqf;
	}

	public void syntax_error(Symbol cur_token) {
		this.cur_token = cur_token;

		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
		}

		sqf.setError(cur_token, symbl_name_from_id(cur_token.sym), expected);
	}

	protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SQFParser$actions {
  private final SQFParser parser;

  /** Constructor */
  CUP$SQFParser$actions(SQFParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SQFParser$do_action_part00000000(
    int                        CUP$SQFParser$act_num,
    java_cup.runtime.lr_parser CUP$SQFParser$parser,
    java.util.Stack            CUP$SQFParser$stack,
    int                        CUP$SQFParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SQFParser$result;

      /* select the action based on the action number */
      switch (CUP$SQFParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ini ::= SEL TO FM ARROW opt fields where_cond 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).right;
		Boolean w = (Boolean)((java_cup.runtime.Symbol) CUP$SQFParser$stack.peek()).value;
		 sqf.createQuery(o, w); 
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("ini",2, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-6)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)).value;
		RESULT = start_val;
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SQFParser$parser.done_parsing();
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= error TO FM ARROW opt fields where_cond 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("ini",2, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-6)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= SEL error FM ARROW opt fields where_cond 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("ini",2, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-6)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= SEL TO error ARROW opt fields where_cond 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("ini",2, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-6)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini ::= SEL TO FM error opt fields where_cond 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("ini",2, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-6)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini ::= SEL TO FM ARROW error fields where_cond 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("ini",2, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-6)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini ::= SEL TO FM ARROW opt error where_cond 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("ini",2, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-6)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ini ::= SEL TO FM ARROW opt fields error 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("ini",2, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-6)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opt ::= ID 
            {
              Boolean RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$SQFParser$stack.peek()).value;
		
					sqf.setParam(v.getValue());
					RESULT = true;
				
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opt",0, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opt ::= STR 
            {
              Boolean RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$SQFParser$stack.peek()).value;
		
					sqf.setParam(v.getValue());
					RESULT = false;
				
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opt",0, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fields ::= LBRACKET make_field RBRACKET 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("fields",3, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fields ::= error make_field RBRACKET 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("fields",3, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fields ::= LBRACKET make_field error 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("fields",3, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // make_field ::= field_keys 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("make_field",4, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // make_field ::= 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("make_field",4, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // field_keys ::= STR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$SQFParser$stack.peek()).value;
		 sqf.setField(p); 
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("field_keys",5, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // field_keys ::= field_keys COMMA STR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$SQFParser$stack.peek()).value;
		 sqf.setField(p); 
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("field_keys",5, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // where_cond ::= WHERE comps 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("where_cond",1, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // where_cond ::= error comps 
            {
              Boolean RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("where_cond",1, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // where_cond ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("where_cond",1, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comps ::= LBRACKET make_comp RBRACKET 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("comps",6, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comps ::= error make_comp RBRACKET 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("comps",6, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comps ::= LBRACKET error RBRACKET 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("comps",6, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comps ::= LBRACKET make_comp error 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("comps",6, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // make_comp ::= comp 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("make_comp",7, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // make_comp ::= make_comp opr_log_b comp 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("make_comp",7, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comp ::= yes_comp 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("comp",8, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comp ::= no_comp 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("comp",8, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // yes_comp ::= STR opr_rel values 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("yes_comp",9, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // yes_comp ::= error opr_rel values 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("yes_comp",9, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // yes_comp ::= STR error values 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("yes_comp",9, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // yes_comp ::= STR opr_rel error 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("yes_comp",9, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // no_comp ::= NOT STR opr_rel values 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("no_comp",10, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-3)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // no_comp ::= error STR opr_rel values 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("no_comp",10, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-3)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // no_comp ::= NOT error opr_rel values 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("no_comp",10, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-3)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // no_comp ::= NOT STR error values 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("no_comp",10, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-3)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // no_comp ::= NOT STR opr_rel error 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("no_comp",10, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-3)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opr_rel ::= GREATER 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",11, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opr_rel ::= SMALLER 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",11, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opr_rel ::= GR_EQ 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",11, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opr_rel ::= SM_EQ 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",11, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opr_rel ::= EQ 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",11, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // opr_rel ::= NEQ 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",11, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opr_log_b ::= AND 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_log_b",13, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opr_log_b ::= OR 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_log_b",13, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opr_log_b ::= error 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_log_b",13, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // values ::= VALUE_STR 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("values",12, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // values ::= number_v 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("values",12, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // number_v ::= INTEGER 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("number_v",14, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // number_v ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("number_v",14, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SQFParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SQFParser$do_action(
    int                        CUP$SQFParser$act_num,
    java_cup.runtime.lr_parser CUP$SQFParser$parser,
    java.util.Stack            CUP$SQFParser$stack,
    int                        CUP$SQFParser$top)
    throws java.lang.Exception
    {
              return CUP$SQFParser$do_action_part00000000(
                               CUP$SQFParser$act_num,
                               CUP$SQFParser$parser,
                               CUP$SQFParser$stack,
                               CUP$SQFParser$top);
    }
}

}
