
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.formsweb.parser.sqf;

import com.cesar31.formsweb.model.Token;
import java_cup.runtime.*;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SQFParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SQFParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SQFParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SQFParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SQFParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\011\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\004\005\000\002\005\003" +
    "\000\002\005\002\000\002\006\003\000\002\006\005\000" +
    "\002\007\004\000\002\007\002\000\002\010\005\000\002" +
    "\011\003\000\002\011\005\000\002\012\005\000\002\012" +
    "\006\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\015\003\000\002\015\003\000\002\014\003\000\002" +
    "\014\003\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\004\005\001\002\000\004\002\060\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\006\031\011\032\013\001" +
    "\002\000\004\011\uffff\001\002\000\004\011\015\001\002" +
    "\000\004\011\ufffe\001\002\000\006\002\ufff7\010\024\001" +
    "\002\000\006\012\ufffb\032\016\001\002\000\006\012\ufffa" +
    "\024\ufffa\001\002\000\004\012\023\001\002\000\006\012" +
    "\ufffc\024\021\001\002\000\004\032\022\001\002\000\006" +
    "\012\ufff9\024\ufff9\001\002\000\006\002\ufffd\010\ufffd\001" +
    "\002\000\004\011\026\001\002\000\004\002\001\001\002" +
    "\000\006\015\031\032\033\001\002\000\004\002\ufff8\001" +
    "\002\000\010\012\ufff5\013\ufff5\014\ufff5\001\002\000\004" +
    "\032\055\001\002\000\010\012\051\013\050\014\053\001" +
    "\002\000\016\016\035\017\036\020\042\021\041\022\034" +
    "\023\037\001\002\000\010\034\uffed\036\uffed\037\uffed\001" +
    "\002\000\010\034\ufff1\036\ufff1\037\ufff1\001\002\000\010" +
    "\034\ufff0\036\ufff0\037\ufff0\001\002\000\010\034\uffec\036" +
    "\uffec\037\uffec\001\002\000\010\034\046\036\043\037\047" +
    "\001\002\000\010\034\uffee\036\uffee\037\uffee\001\002\000" +
    "\010\034\uffef\036\uffef\037\uffef\001\002\000\010\012\uffe7" +
    "\013\uffe7\014\uffe7\001\002\000\010\012\ufff3\013\ufff3\014" +
    "\ufff3\001\002\000\010\012\uffe8\013\uffe8\014\uffe8\001\002" +
    "\000\010\012\uffe9\013\uffe9\014\uffe9\001\002\000\010\012" +
    "\uffe6\013\uffe6\014\uffe6\001\002\000\006\015\uffeb\032\uffeb" +
    "\001\002\000\004\002\ufff6\001\002\000\006\015\031\032" +
    "\033\001\002\000\006\015\uffea\032\uffea\001\002\000\010" +
    "\012\ufff4\013\ufff4\014\ufff4\001\002\000\016\016\035\017" +
    "\036\020\042\021\041\022\034\023\037\001\002\000\010" +
    "\034\046\036\043\037\047\001\002\000\010\012\ufff2\013" +
    "\ufff2\014\ufff2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\002\001\001\000\004\004\013\001" +
    "\001\000\002\001\001\000\004\007\024\001\001\000\006" +
    "\005\016\006\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\026\001\001\000\002\001" +
    "\001\000\006\011\031\012\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\051\001" +
    "\001\000\004\013\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\043\016\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\055\001\001\000\006\014\056" +
    "\016\044\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SQFParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SQFParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SQFParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Symbol cur_token;

	public SQFParser(SQFLex lex) {
		super(lex);
	}

	public void syntax_error(Symbol cur_token) {
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);
        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
        }
        System.out.println("");
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SQFParser$actions {
  private final SQFParser parser;

  /** Constructor */
  CUP$SQFParser$actions(SQFParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SQFParser$do_action_part00000000(
    int                        CUP$SQFParser$act_num,
    java_cup.runtime.lr_parser CUP$SQFParser$parser,
    java.util.Stack            CUP$SQFParser$stack,
    int                        CUP$SQFParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SQFParser$result;

      /* select the action based on the action number */
      switch (CUP$SQFParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ini ::= SEL TO FORM ARROW opt fields where_cond 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-6)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)).value;
		RESULT = start_val;
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SQFParser$parser.done_parsing();
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // opt ::= ID 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opt",1, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // opt ::= STR 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opt",1, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fields ::= LBRACKET make_field RBRACKET 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("fields",2, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // make_field ::= field_keys 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("make_field",3, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // make_field ::= 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("make_field",3, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_keys ::= STR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$SQFParser$stack.peek()).value;
		 System.out.println(p.getValue()); 
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("field_keys",4, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_keys ::= field_keys COMMA STR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$SQFParser$stack.peek()).value;
		 System.out.println(p.getValue()); 
              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("field_keys",4, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // where_cond ::= WHERE comps 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("where_cond",5, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // where_cond ::= 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("where_cond",5, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comps ::= LBRACKET make_comp RBRACKET 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("comps",6, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // make_comp ::= comp 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("make_comp",7, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // make_comp ::= make_comp opr_log_b comp 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("make_comp",7, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comp ::= STR opr_rel values 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("comp",8, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comp ::= NOT STR opr_rel values 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("comp",8, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.elementAt(CUP$SQFParser$top-3)), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opr_rel ::= GREATER 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",9, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opr_rel ::= SMALLER 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",9, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opr_rel ::= GR_EQ 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",9, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opr_rel ::= SM_EQ 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",9, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opr_rel ::= EQ 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",9, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opr_rel ::= NEQ 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_rel",9, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opr_log_b ::= AND 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_log_b",11, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opr_log_b ::= OR 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("opr_log_b",11, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // values ::= VALUE_STR 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("values",10, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // values ::= number_v 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("values",10, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // number_v ::= INTEGER 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("number_v",12, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // number_v ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SQFParser$result = parser.getSymbolFactory().newSymbol("number_v",12, ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQFParser$stack.peek()), RESULT);
            }
          return CUP$SQFParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SQFParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SQFParser$do_action(
    int                        CUP$SQFParser$act_num,
    java_cup.runtime.lr_parser CUP$SQFParser$parser,
    java.util.Stack            CUP$SQFParser$stack,
    int                        CUP$SQFParser$top)
    throws java.lang.Exception
    {
              return CUP$SQFParser$do_action_part00000000(
                               CUP$SQFParser$act_num,
                               CUP$SQFParser$parser,
                               CUP$SQFParser$stack,
                               CUP$SQFParser$top);
    }
}

}
