
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.formsweb.parser.main;

import com.cesar31.formsweb.parser.main.FormsLex;
import com.cesar31.formsweb.control.*;
import com.cesar31.formsweb.model.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FormsParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return FormsParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public FormsParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public FormsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FormsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\002\007\000\002\002\007\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\025\007\000\002\025\007\000\002\025\007\000\002\025" +
    "\007\000\002\006\007\000\002\006\007\000\002\006\007" +
    "\000\002\006\007\000\002\006\007\000\002\007\007\000" +
    "\002\007\007\000\002\007\007\000\002\007\007\000\002" +
    "\007\007\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\005\000\002\010\010\000" +
    "\002\010\010\000\002\010\010\000\002\010\010\000\002" +
    "\010\010\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\024\003\000\002\024\005\000\002\011\010" +
    "\000\002\011\010\000\002\011\010\000\002\011\010\000" +
    "\002\011\010\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\006\003\004\013\006\001\002\000\004\022" +
    "\u0142\001\002\000\004\002\u0141\001\002\000\006\003\011" +
    "\022\012\001\002\000\010\002\uffff\003\004\013\006\001" +
    "\002\000\004\002\001\001\002\000\004\004\u013e\001\002" +
    "\000\006\003\014\004\013\001\002\000\006\003\u013a\012" +
    "\u013b\001\002\000\004\012\015\001\002\000\022\003\023" +
    "\035\025\040\016\041\022\042\021\051\026\057\017\060" +
    "\024\001\002\000\006\003\u0127\014\u0126\001\002\000\006" +
    "\003\u0122\014\u0123\001\002\000\010\002\ufffb\003\ufffb\013" +
    "\ufffb\001\002\000\006\003\u011e\014\u011f\001\002\000\006" +
    "\003\u011b\014\u011a\001\002\000\004\014\317\001\002\000" +
    "\006\003\314\014\313\001\002\000\006\003\265\014\264" +
    "\001\002\000\006\003\027\014\030\001\002\000\006\003" +
    "\033\015\031\001\002\000\006\003\033\015\031\001\002" +
    "\000\004\052\252\001\002\000\010\002\uffef\003\uffef\013" +
    "\uffef\001\002\000\004\052\034\001\002\000\004\012\035" +
    "\001\002\000\004\017\036\001\002\000\006\003\041\015" +
    "\040\001\002\000\010\002\uffe7\003\uffe7\013\uffe7\001\002" +
    "\000\022\037\045\047\046\050\047\053\051\054\054\055" +
    "\044\056\052\111\043\001\002\000\022\037\045\047\046" +
    "\050\047\053\051\054\054\055\044\056\052\111\043\001" +
    "\002\000\010\003\uffc1\016\uffc1\021\uffc1\001\002\000\006" +
    "\003\227\012\230\001\002\000\006\003\222\012\223\001" +
    "\002\000\006\003\215\012\216\001\002\000\006\003\210" +
    "\012\211\001\002\000\006\003\203\012\204\001\002\000" +
    "\010\003\uffc2\016\uffc2\021\uffc2\001\002\000\006\003\176" +
    "\012\177\001\002\000\006\003\171\012\172\001\002\000" +
    "\004\016\147\001\002\000\006\003\066\012\067\001\002" +
    "\000\010\003\uffbf\016\uffbf\021\uffbf\001\002\000\010\003" +
    "\uffbb\016\uffbb\021\uffbb\001\002\000\010\003\uffbc\016\uffbc" +
    "\021\uffbc\001\002\000\010\003\uffc0\016\uffc0\021\uffc0\001" +
    "\002\000\010\003\uffba\016\uffba\021\064\001\002\000\010" +
    "\003\uffbe\016\uffbe\021\uffbe\001\002\000\010\003\uffbd\016" +
    "\uffbd\021\uffbd\001\002\000\022\037\045\047\046\050\047" +
    "\053\051\054\054\055\044\056\052\111\043\001\002\000" +
    "\006\003\uffb9\016\uffb9\001\002\000\132\032\073\034\102" +
    "\035\100\036\141\037\116\040\076\041\124\042\137\043" +
    "\111\044\071\045\122\046\120\047\144\050\110\051\077" +
    "\052\106\053\115\054\133\055\126\056\135\057\132\060" +
    "\104\061\134\062\107\063\114\064\070\065\113\066\103" +
    "\070\075\071\130\072\136\073\127\074\142\075\074\076" +
    "\131\077\143\100\145\101\112\102\105\103\101\104\140" +
    "\105\123\106\072\107\125\001\002\000\134\003\117\032" +
    "\073\034\102\035\100\036\141\037\116\040\076\041\124" +
    "\042\137\043\111\044\071\045\122\046\120\047\144\050" +
    "\110\051\077\052\106\053\115\054\133\055\126\056\135" +
    "\057\132\060\104\061\134\062\107\063\114\064\070\065" +
    "\113\066\103\070\075\071\130\072\136\073\127\074\142" +
    "\075\074\076\131\077\143\100\145\101\112\102\105\103" +
    "\101\104\140\105\123\106\072\107\125\001\002\000\010" +
    "\003\uff7e\016\uff7e\021\uff7e\001\002\000\010\003\uff8c\016" +
    "\uff8c\021\uff8c\001\002\000\010\003\uff6d\016\uff6d\021\uff6d" +
    "\001\002\000\010\003\uff97\016\uff97\021\uff97\001\002\000" +
    "\010\003\uff76\016\uff76\021\uff76\001\002\000\010\003\uff7b" +
    "\016\uff7b\021\uff7b\001\002\000\010\003\uff90\016\uff90\021" +
    "\uff90\001\002\000\010\003\uff89\016\uff89\021\uff89\001\002" +
    "\000\010\003\uff95\016\uff95\021\uff95\001\002\000\010\003" +
    "\uff70\016\uff70\021\uff70\001\002\000\010\003\uff96\016\uff96" +
    "\021\uff96\001\002\000\010\003\uff7c\016\uff7c\021\uff7c\001" +
    "\002\000\010\003\uff82\016\uff82\021\uff82\001\002\000\010" +
    "\003\uff71\016\uff71\021\uff71\001\002\000\010\003\uff88\016" +
    "\uff88\021\uff88\001\002\000\010\003\uff80\016\uff80\021\uff80" +
    "\001\002\000\010\003\uff92\016\uff92\021\uff92\001\002\000" +
    "\010\003\uff8d\016\uff8d\021\uff8d\001\002\000\010\003\uff72" +
    "\016\uff72\021\uff72\001\002\000\010\003\uff7d\016\uff7d\021" +
    "\uff7d\001\002\000\010\003\uff7f\016\uff7f\021\uff7f\001\002" +
    "\000\010\003\uff87\016\uff87\021\uff87\001\002\000\010\003" +
    "\uff91\016\uff91\021\uff91\001\002\000\010\003\uffd5\016\uffd5" +
    "\021\uffd5\001\002\000\010\003\uff8a\016\uff8a\021\uff8a\001" +
    "\002\000\010\003\uffd7\016\uffd7\021\uffd7\001\002\000\010" +
    "\003\uff8b\016\uff8b\021\uff8b\001\002\000\010\003\uff6e\016" +
    "\uff6e\021\uff6e\001\002\000\010\003\uff8f\016\uff8f\021\uff8f" +
    "\001\002\000\010\003\uff6c\016\uff6c\021\uff6c\001\002\000" +
    "\010\003\uff85\016\uff85\021\uff85\001\002\000\010\003\uff78" +
    "\016\uff78\021\uff78\001\002\000\010\003\uff7a\016\uff7a\021" +
    "\uff7a\001\002\000\010\003\uff75\016\uff75\021\uff75\001\002" +
    "\000\010\003\uff83\016\uff83\021\uff83\001\002\000\010\003" +
    "\uff86\016\uff86\021\uff86\001\002\000\010\003\uff81\016\uff81" +
    "\021\uff81\001\002\000\010\003\uff84\016\uff84\021\uff84\001" +
    "\002\000\010\003\uff79\016\uff79\021\uff79\001\002\000\010" +
    "\003\uff8e\016\uff8e\021\uff8e\001\002\000\010\003\uff6f\016" +
    "\uff6f\021\uff6f\001\002\000\010\003\uff94\016\uff94\021\uff94" +
    "\001\002\000\010\003\uff77\016\uff77\021\uff77\001\002\000" +
    "\010\003\uff74\016\uff74\021\uff74\001\002\000\010\003\uff93" +
    "\016\uff93\021\uff93\001\002\000\010\003\uff73\016\uff73\021" +
    "\uff73\001\002\000\010\003\uffd6\016\uffd6\021\uffd6\001\002" +
    "\000\004\020\150\001\002\000\004\016\151\001\002\000" +
    "\006\003\152\013\154\001\002\000\004\005\166\001\002" +
    "\000\010\002\uffb7\003\uffb7\013\uffb7\001\002\000\006\003" +
    "\156\005\155\001\002\000\006\003\161\022\162\001\002" +
    "\000\004\022\157\001\002\000\004\014\160\001\002\000" +
    "\010\002\uff9a\003\uff9a\013\uff9a\001\002\000\004\014\165" +
    "\001\002\000\006\003\164\014\163\001\002\000\010\002" +
    "\uff9c\003\uff9c\013\uff9c\001\002\000\010\002\uff98\003\uff98" +
    "\013\uff98\001\002\000\010\002\uff99\003\uff99\013\uff99\001" +
    "\002\000\004\022\167\001\002\000\004\014\170\001\002" +
    "\000\010\002\uff9b\003\uff9b\013\uff9b\001\002\000\132\032" +
    "\073\034\102\035\100\036\141\037\116\040\076\041\124" +
    "\042\137\043\111\044\071\045\122\046\120\047\144\050" +
    "\110\051\077\052\106\053\115\054\133\055\126\056\135" +
    "\057\132\060\104\061\134\062\107\063\114\064\070\065" +
    "\113\066\103\070\075\071\130\072\136\073\127\074\142" +
    "\075\074\076\131\077\143\100\145\101\112\102\105\103" +
    "\101\104\140\105\123\106\072\107\125\001\002\000\134" +
    "\003\173\032\073\034\102\035\100\036\141\037\116\040" +
    "\076\041\124\042\137\043\111\044\071\045\122\046\120" +
    "\047\144\050\110\051\077\052\106\053\115\054\133\055" +
    "\126\056\135\057\132\060\104\061\134\062\107\063\114" +
    "\064\070\065\113\066\103\070\075\071\130\072\136\073" +
    "\127\074\142\075\074\076\131\077\143\100\145\101\112" +
    "\102\105\103\101\104\140\105\123\106\072\107\125\001" +
    "\002\000\010\003\uffcf\016\uffcf\021\uffcf\001\002\000\010" +
    "\003\uffd1\016\uffd1\021\uffd1\001\002\000\010\003\uffd0\016" +
    "\uffd0\021\uffd0\001\002\000\004\110\202\001\002\000\006" +
    "\003\201\110\200\001\002\000\010\003\uffda\016\uffda\021" +
    "\uffda\001\002\000\010\003\uffd8\016\uffd8\021\uffd8\001\002" +
    "\000\010\003\uffd9\016\uffd9\021\uffd9\001\002\000\132\032" +
    "\073\034\102\035\100\036\141\037\116\040\076\041\124" +
    "\042\137\043\111\044\071\045\122\046\120\047\144\050" +
    "\110\051\077\052\106\053\115\054\133\055\126\056\135" +
    "\057\132\060\104\061\134\062\107\063\114\064\070\065" +
    "\113\066\103\070\075\071\130\072\136\073\127\074\142" +
    "\075\074\076\131\077\143\100\145\101\112\102\105\103" +
    "\101\104\140\105\123\106\072\107\125\001\002\000\134" +
    "\003\205\032\073\034\102\035\100\036\141\037\116\040" +
    "\076\041\124\042\137\043\111\044\071\045\122\046\120" +
    "\047\144\050\110\051\077\052\106\053\115\054\133\055" +
    "\126\056\135\057\132\060\104\061\134\062\107\063\114" +
    "\064\070\065\113\066\103\070\075\071\130\072\136\073" +
    "\127\074\142\075\074\076\131\077\143\100\145\101\112" +
    "\102\105\103\101\104\140\105\123\106\072\107\125\001" +
    "\002\000\010\003\uffc6\016\uffc6\021\uffc6\001\002\000\010" +
    "\003\uffc8\016\uffc8\021\uffc8\001\002\000\010\003\uffc7\016" +
    "\uffc7\021\uffc7\001\002\000\132\032\073\034\102\035\100" +
    "\036\141\037\116\040\076\041\124\042\137\043\111\044" +
    "\071\045\122\046\120\047\144\050\110\051\077\052\106" +
    "\053\115\054\133\055\126\056\135\057\132\060\104\061" +
    "\134\062\107\063\114\064\070\065\113\066\103\070\075" +
    "\071\130\072\136\073\127\074\142\075\074\076\131\077" +
    "\143\100\145\101\112\102\105\103\101\104\140\105\123" +
    "\106\072\107\125\001\002\000\134\003\212\032\073\034" +
    "\102\035\100\036\141\037\116\040\076\041\124\042\137" +
    "\043\111\044\071\045\122\046\120\047\144\050\110\051" +
    "\077\052\106\053\115\054\133\055\126\056\135\057\132" +
    "\060\104\061\134\062\107\063\114\064\070\065\113\066" +
    "\103\070\075\071\130\072\136\073\127\074\142\075\074" +
    "\076\131\077\143\100\145\101\112\102\105\103\101\104" +
    "\140\105\123\106\072\107\125\001\002\000\010\003\uffc9" +
    "\016\uffc9\021\uffc9\001\002\000\010\003\uffcb\016\uffcb\021" +
    "\uffcb\001\002\000\010\003\uffca\016\uffca\021\uffca\001\002" +
    "\000\004\034\221\001\002\000\006\003\217\034\220\001" +
    "\002\000\010\003\uffc3\016\uffc3\021\uffc3\001\002\000\010" +
    "\003\uffc5\016\uffc5\021\uffc5\001\002\000\010\003\uffc4\016" +
    "\uffc4\021\uffc4\001\002\000\132\032\073\034\102\035\100" +
    "\036\141\037\116\040\076\041\124\042\137\043\111\044" +
    "\071\045\122\046\120\047\144\050\110\051\077\052\106" +
    "\053\115\054\133\055\126\056\135\057\132\060\104\061" +
    "\134\062\107\063\114\064\070\065\113\066\103\070\075" +
    "\071\130\072\136\073\127\074\142\075\074\076\131\077" +
    "\143\100\145\101\112\102\105\103\101\104\140\105\123" +
    "\106\072\107\125\001\002\000\134\003\224\032\073\034" +
    "\102\035\100\036\141\037\116\040\076\041\124\042\137" +
    "\043\111\044\071\045\122\046\120\047\144\050\110\051" +
    "\077\052\106\053\115\054\133\055\126\056\135\057\132" +
    "\060\104\061\134\062\107\063\114\064\070\065\113\066" +
    "\103\070\075\071\130\072\136\073\127\074\142\075\074" +
    "\076\131\077\143\100\145\101\112\102\105\103\101\104" +
    "\140\105\123\106\072\107\125\001\002\000\010\003\uffd2" +
    "\016\uffd2\021\uffd2\001\002\000\010\003\uffd4\016\uffd4\021" +
    "\uffd4\001\002\000\010\003\uffd3\016\uffd3\021\uffd3\001\002" +
    "\000\132\032\073\034\102\035\100\036\141\037\116\040" +
    "\076\041\124\042\137\043\111\044\071\045\122\046\120" +
    "\047\144\050\110\051\077\052\106\053\115\054\133\055" +
    "\126\056\135\057\132\060\104\061\134\062\107\063\114" +
    "\064\070\065\113\066\103\070\075\071\130\072\136\073" +
    "\127\074\142\075\074\076\131\077\143\100\145\101\112" +
    "\102\105\103\101\104\140\105\123\106\072\107\125\001" +
    "\002\000\134\003\231\032\073\034\102\035\100\036\141" +
    "\037\116\040\076\041\124\042\137\043\111\044\071\045" +
    "\122\046\120\047\144\050\110\051\077\052\106\053\115" +
    "\054\133\055\126\056\135\057\132\060\104\061\134\062" +
    "\107\063\114\064\070\065\113\066\103\070\075\071\130" +
    "\072\136\073\127\074\142\075\074\076\131\077\143\100" +
    "\145\101\112\102\105\103\101\104\140\105\123\106\072" +
    "\107\125\001\002\000\010\003\uffcc\016\uffcc\021\uffcc\001" +
    "\002\000\010\003\uffce\016\uffce\021\uffce\001\002\000\010" +
    "\003\uffcd\016\uffcd\021\uffcd\001\002\000\006\003\235\016" +
    "\236\001\002\000\004\020\247\001\002\000\006\003\237" +
    "\020\240\001\002\000\004\016\245\001\002\000\006\003" +
    "\241\016\242\001\002\000\006\003\152\013\154\001\002" +
    "\000\006\003\152\013\154\001\002\000\010\002\uffb8\003" +
    "\uffb8\013\uffb8\001\002\000\010\002\uffb4\003\uffb4\013\uffb4" +
    "\001\002\000\006\003\152\013\154\001\002\000\010\002" +
    "\uffb5\003\uffb5\013\uffb5\001\002\000\004\016\250\001\002" +
    "\000\006\003\152\013\154\001\002\000\010\002\uffb6\003" +
    "\uffb6\013\uffb6\001\002\000\006\003\253\012\254\001\002" +
    "\000\004\017\261\001\002\000\006\003\255\017\256\001" +
    "\002\000\006\003\041\015\040\001\002\000\006\003\041" +
    "\015\040\001\002\000\010\002\uffe8\003\uffe8\013\uffe8\001" +
    "\002\000\010\002\uffe5\003\uffe5\013\uffe5\001\002\000\006" +
    "\003\041\015\040\001\002\000\010\002\uffe6\003\uffe6\013" +
    "\uffe6\001\002\000\010\002\uffed\003\uffed\013\uffed\001\002" +
    "\000\006\003\270\015\266\001\002\000\006\003\270\015" +
    "\266\001\002\000\006\003\276\036\275\001\002\000\010" +
    "\002\ufff7\003\ufff7\013\ufff7\001\002\000\004\036\271\001" +
    "\002\000\004\012\272\001\002\000\004\017\273\001\002" +
    "\000\006\003\041\015\040\001\002\000\010\002\uffe3\003" +
    "\uffe3\013\uffe3\001\002\000\006\003\302\012\303\001\002" +
    "\000\004\012\277\001\002\000\004\017\300\001\002\000" +
    "\006\003\041\015\040\001\002\000\010\002\uffe2\003\uffe2" +
    "\013\uffe2\001\002\000\004\017\310\001\002\000\006\003" +
    "\304\017\305\001\002\000\006\003\041\015\040\001\002" +
    "\000\006\003\041\015\040\001\002\000\010\002\uffe4\003" +
    "\uffe4\013\uffe4\001\002\000\010\002\uffe0\003\uffe0\013\uffe0" +
    "\001\002\000\006\003\041\015\040\001\002\000\010\002" +
    "\uffe1\003\uffe1\013\uffe1\001\002\000\010\002\ufff9\003\ufff9" +
    "\013\ufff9\001\002\000\006\003\033\015\031\001\002\000" +
    "\006\003\033\015\031\001\002\000\010\002\uffe9\003\uffe9" +
    "\013\uffe9\001\002\000\010\002\uffea\003\uffea\013\uffea\001" +
    "\002\000\006\003\323\015\321\001\002\000\010\002\ufff8" +
    "\003\ufff8\013\ufff8\001\002\000\010\003\u010e\036\u010d\052" +
    "\252\001\002\000\010\002\uffee\003\uffee\013\uffee\001\002" +
    "\000\006\036\325\052\034\001\002\000\010\002\ufff5\003" +
    "\ufff5\013\ufff5\001\002\000\004\012\326\001\002\000\004" +
    "\017\327\001\002\000\006\003\332\015\331\001\002\000" +
    "\010\002\uffde\003\uffde\013\uffde\001\002\000\032\037\045" +
    "\043\336\044\344\045\333\046\340\047\046\050\047\053" +
    "\051\054\054\055\044\056\052\111\043\001\002\000\032" +
    "\037\045\043\336\044\344\045\333\046\340\047\046\050" +
    "\047\053\051\054\054\055\044\056\052\111\043\001\002" +
    "\000\006\003\372\012\373\001\002\000\010\003\uffa6\016" +
    "\uffa6\021\uffa6\001\002\000\006\016\365\021\364\001\002" +
    "\000\006\003\357\012\360\001\002\000\010\003\uffa3\016" +
    "\uffa3\021\uffa3\001\002\000\006\003\352\012\353\001\002" +
    "\000\010\003\uffa5\016\uffa5\021\uffa5\001\002\000\010\003" +
    "\uffa7\016\uffa7\021\uffa7\001\002\000\010\003\uffa4\016\uffa4" +
    "\021\uffa4\001\002\000\006\003\345\012\346\001\002\000" +
    "\132\032\073\034\102\035\100\036\141\037\116\040\076" +
    "\041\124\042\137\043\111\044\071\045\122\046\120\047" +
    "\144\050\110\051\077\052\106\053\115\054\133\055\126" +
    "\056\135\057\132\060\104\061\134\062\107\063\114\064" +
    "\070\065\113\066\103\070\075\071\130\072\136\073\127" +
    "\074\142\075\074\076\131\077\143\100\145\101\112\102" +
    "\105\103\101\104\140\105\123\106\072\107\125\001\002" +
    "\000\134\003\347\032\073\034\102\035\100\036\141\037" +
    "\116\040\076\041\124\042\137\043\111\044\071\045\122" +
    "\046\120\047\144\050\110\051\077\052\106\053\115\054" +
    "\133\055\126\056\135\057\132\060\104\061\134\062\107" +
    "\063\114\064\070\065\113\066\103\070\075\071\130\072" +
    "\136\073\127\074\142\075\074\076\131\077\143\100\145" +
    "\101\112\102\105\103\101\104\140\105\123\106\072\107" +
    "\125\001\002\000\010\003\uffae\016\uffae\021\uffae\001\002" +
    "\000\010\003\uffb0\016\uffb0\021\uffb0\001\002\000\010\003" +
    "\uffaf\016\uffaf\021\uffaf\001\002\000\004\034\356\001\002" +
    "\000\006\003\354\034\355\001\002\000\010\003\uffa8\016" +
    "\uffa8\021\uffa8\001\002\000\010\003\uffaa\016\uffaa\021\uffaa" +
    "\001\002\000\010\003\uffa9\016\uffa9\021\uffa9\001\002\000" +
    "\132\032\073\034\102\035\100\036\141\037\116\040\076" +
    "\041\124\042\137\043\111\044\071\045\122\046\120\047" +
    "\144\050\110\051\077\052\106\053\115\054\133\055\126" +
    "\056\135\057\132\060\104\061\134\062\107\063\114\064" +
    "\070\065\113\066\103\070\075\071\130\072\136\073\127" +
    "\074\142\075\074\076\131\077\143\100\145\101\112\102" +
    "\105\103\101\104\140\105\123\106\072\107\125\001\002" +
    "\000\134\003\361\032\073\034\102\035\100\036\141\037" +
    "\116\040\076\041\124\042\137\043\111\044\071\045\122" +
    "\046\120\047\144\050\110\051\077\052\106\053\115\054" +
    "\133\055\126\056\135\057\132\060\104\061\134\062\107" +
    "\063\114\064\070\065\113\066\103\070\075\071\130\072" +
    "\136\073\127\074\142\075\074\076\131\077\143\100\145" +
    "\101\112\102\105\103\101\104\140\105\123\106\072\107" +
    "\125\001\002\000\010\003\uffb1\016\uffb1\021\uffb1\001\002" +
    "\000\010\003\uffb3\016\uffb3\021\uffb3\001\002\000\010\003" +
    "\uffb2\016\uffb2\021\uffb2\001\002\000\012\043\336\044\344" +
    "\045\333\046\340\001\002\000\004\020\366\001\002\000" +
    "\004\016\367\001\002\000\006\003\152\013\154\001\002" +
    "\000\010\002\uffa0\003\uffa0\013\uffa0\001\002\000\010\003" +
    "\uffa2\016\uffa2\021\uffa2\001\002\000\132\032\073\034\102" +
    "\035\100\036\141\037\116\040\076\041\124\042\137\043" +
    "\111\044\071\045\122\046\120\047\144\050\110\051\077" +
    "\052\106\053\115\054\133\055\126\056\135\057\132\060" +
    "\104\061\134\062\107\063\114\064\070\065\113\066\103" +
    "\070\075\071\130\072\136\073\127\074\142\075\074\076" +
    "\131\077\143\100\145\101\112\102\105\103\101\104\140" +
    "\105\123\106\072\107\125\001\002\000\134\003\374\032" +
    "\073\034\102\035\100\036\141\037\116\040\076\041\124" +
    "\042\137\043\111\044\071\045\122\046\120\047\144\050" +
    "\110\051\077\052\106\053\115\054\133\055\126\056\135" +
    "\057\132\060\104\061\134\062\107\063\114\064\070\065" +
    "\113\066\103\070\075\071\130\072\136\073\127\074\142" +
    "\075\074\076\131\077\143\100\145\101\112\102\105\103" +
    "\101\104\140\105\123\106\072\107\125\001\002\000\010" +
    "\003\uffab\016\uffab\021\uffab\001\002\000\010\003\uffad\016" +
    "\uffad\021\uffad\001\002\000\010\003\uffac\016\uffac\021\uffac" +
    "\001\002\000\010\003\u0100\016\u0101\021\364\001\002\000" +
    "\004\020\u010a\001\002\000\006\003\u0102\020\u0103\001\002" +
    "\000\004\016\u0108\001\002\000\006\003\u0104\016\u0105\001" +
    "\002\000\006\003\152\013\154\001\002\000\006\003\152" +
    "\013\154\001\002\000\010\002\uffa1\003\uffa1\013\uffa1\001" +
    "\002\000\010\002\uff9d\003\uff9d\013\uff9d\001\002\000\006" +
    "\003\152\013\154\001\002\000\010\002\uff9e\003\uff9e\013" +
    "\uff9e\001\002\000\004\016\u010b\001\002\000\006\003\152" +
    "\013\154\001\002\000\010\002\uff9f\003\uff9f\013\uff9f\001" +
    "\002\000\006\003\u0112\012\u0113\001\002\000\004\012\u010f" +
    "\001\002\000\004\017\u0110\001\002\000\006\003\332\015" +
    "\331\001\002\000\010\002\uffdd\003\uffdd\013\uffdd\001\002" +
    "\000\004\017\u0118\001\002\000\006\003\u0114\017\u0115\001" +
    "\002\000\006\003\332\015\331\001\002\000\006\003\332" +
    "\015\331\001\002\000\010\002\uffdf\003\uffdf\013\uffdf\001" +
    "\002\000\010\002\uffdb\003\uffdb\013\uffdb\001\002\000\006" +
    "\003\332\015\331\001\002\000\010\002\uffdc\003\uffdc\013" +
    "\uffdc\001\002\000\006\003\270\015\266\001\002\000\006" +
    "\003\270\015\266\001\002\000\010\002\ufff2\003\ufff2\013" +
    "\ufff2\001\002\000\010\002\ufff3\003\ufff3\013\ufff3\001\002" +
    "\000\006\003\270\015\266\001\002\000\006\003\270\015" +
    "\266\001\002\000\010\002\ufff1\003\ufff1\013\ufff1\001\002" +
    "\000\010\002\ufff0\003\ufff0\013\ufff0\001\002\000\006\003" +
    "\033\015\031\001\002\000\006\003\033\015\031\001\002" +
    "\000\010\002\uffec\003\uffec\013\uffec\001\002\000\010\002" +
    "\uffeb\003\uffeb\013\uffeb\001\002\000\006\003\u0129\015\u0128" +
    "\001\002\000\006\003\u0129\015\u0128\001\002\000\006\003" +
    "\u0131\036\u0130\001\002\000\004\036\u012b\001\002\000\010" +
    "\002\ufff4\003\ufff4\013\ufff4\001\002\000\004\012\u012c\001" +
    "\002\000\004\017\u012d\001\002\000\006\003\u012f\015\u012e" +
    "\001\002\000\012\043\336\044\344\045\333\046\340\001" +
    "\002\000\012\043\336\044\344\045\333\046\340\001\002" +
    "\000\006\003\u0134\012\u0135\001\002\000\004\012\u0132\001" +
    "\002\000\004\017\u0133\001\002\000\006\003\u012f\015\u012e" +
    "\001\002\000\004\017\u0138\001\002\000\006\003\u0136\017" +
    "\u0137\001\002\000\006\003\u012f\015\u012e\001\002\000\006" +
    "\003\u012f\015\u012e\001\002\000\006\003\u012f\015\u012e\001" +
    "\002\000\010\002\ufff6\003\ufff6\013\ufff6\001\002\000\022" +
    "\003\023\035\025\040\016\041\022\042\021\051\026\057" +
    "\017\060\024\001\002\000\022\003\023\035\025\040\016" +
    "\041\022\042\021\051\026\057\017\060\024\001\002\000" +
    "\010\002\ufffe\003\ufffe\013\ufffe\001\002\000\010\002\ufffa" +
    "\003\ufffa\013\ufffa\001\002\000\004\012\u013f\001\002\000" +
    "\022\003\023\035\025\040\016\041\022\042\021\051\026" +
    "\057\017\060\024\001\002\000\010\002\ufffc\003\ufffc\013" +
    "\ufffc\001\002\000\004\002\000\001\002\000\004\004\u0143" +
    "\001\002\000\004\012\u0144\001\002\000\022\003\023\035" +
    "\025\040\016\041\022\042\021\051\026\057\017\060\024" +
    "\001\002\000\010\002\ufffd\003\ufffd\013\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\006\002\006\004\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\006" +
    "\004\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\262\001\001\000\004\025\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\036\001\001" +
    "\000\002\001\001\000\026\012\047\013\041\014\057\015" +
    "\060\016\233\026\054\027\061\030\062\031\056\032\055" +
    "\001\001\000\026\012\047\013\041\014\057\015\060\016" +
    "\052\026\054\027\061\030\062\031\056\032\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\047\013\041" +
    "\014\057\015\060\016\064\026\054\027\061\030\062\031" +
    "\056\032\055\001\001\000\002\001\001\000\004\033\145" +
    "\001\001\000\004\033\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\174\001\001\000\004\033\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\206\001\001\000\004\033\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\213\001\001\000\004\033\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\225\001\001\000\004" +
    "\033\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\232\001\001\000\004\033\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\243\001" +
    "\001\000\004\003\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\257\001\001\000\004\010\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\311\001\001" +
    "\000\004\006\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\306\001\001\000\004\010\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\315" +
    "\001\001\000\004\025\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\317\007\323\025\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\273\011\327\001\001\000\002\001" +
    "\001\000\042\012\047\013\041\014\057\015\060\016\233" +
    "\017\341\020\333\021\340\022\342\023\336\024\376\026" +
    "\054\027\061\030\062\031\056\032\055\001\001\000\042" +
    "\012\047\013\041\014\057\015\060\016\052\017\341\020" +
    "\333\021\340\022\342\023\336\024\334\026\054\027\061" +
    "\030\062\031\056\032\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\350" +
    "\001\001\000\004\033\347\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\362\001\001\000\004\033\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\341\020\333\021\340\022\342\023\370\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\375" +
    "\001\001\000\004\033\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u0106\001\001\000\004\003\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u010b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\300\011\u0110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\306\011\u0116\001\001\000\006\010\305\011\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\310\011\u0118\001\001\000\002\001\001\000\004\006\u011c" +
    "\001\001\000\004\006\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0120\001\001\000\004\006\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u0124\001\001\000\004\025\u0123\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u0138\001\001\000\004\007" +
    "\u0129\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\327\001\001\000\016\017\341\020\333\021\340\022\342" +
    "\023\336\024\376\001\001\000\016\017\341\020\333\021" +
    "\340\022\342\023\336\024\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0110\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u0116" +
    "\001\001\000\004\011\u0115\001\001\000\004\011\u0118\001" +
    "\001\000\002\001\001\000\004\005\u013c\001\001\000\004" +
    "\005\u013b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u013f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0144\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FormsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FormsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FormsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Symbol cur_token;
	private UserContainer u;
	private User usuario;

	public FormsParser(FormsLex lex) {
		super(lex);
		this.u = new UserContainer();
	}

	/* Constructor sin cambiar nombre */
	// public parser(FormsLex lex) {
	// 	super(lex);
	// 	this.parsed = true;
	// 	u = new UserContainer();
	// }

	public void report_fatal_error(String message, Object info) {

        //System.out.println("report_fatal_error");
        //System.out.println("Message: " + message);
        //System.out.println("Object info: " + info);

        /* Armando reportes de errores */
        // List<String> expected = new ArrayList<>();
        // List<Integer> tokens = expected_token_ids();
        // for(Integer i : tokens) {
        //     expected.add(symbl_name_from_id(i));
        // }

		// this.u.setError(this.cur_token, symbl_name_from_id(this.cur_token.sym), expected);
	}

	public void syntax_error(Symbol cur_token) {
        List<String> expected = new ArrayList<>();

        this.cur_token = cur_token;
		//Token t = (Token) cur_token.value;
        //System.out.printf("syntax_error: %s, %s\n", symbl_name_from_id(cur_token.sym), t.toString());

        List<Integer> tokens = expected_token_ids();
        // System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			//System.out.printf("%s, ", symbl_name_from_id(i));
            expected.add(symbl_name_from_id(i));
        }
        //System.out.println("");

		/* Reporte de Errores */
		this.u.setError(cur_token, symbl_name_from_id(cur_token.sym), expected);
	}

	protected int error_sync_size() {
		return 1;
	}

	public boolean isParsed() {
		return u.getErrors().isEmpty();
	}

	public UserContainer getContainer() {
		return u;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FormsParser$actions {
  private final FormsParser parser;

  /** Constructor */
  CUP$FormsParser$actions(FormsParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FormsParser$do_action_part00000000(
    int                        CUP$FormsParser$act_num,
    java_cup.runtime.lr_parser CUP$FormsParser$parser,
    java.util.Stack            CUP$FormsParser$stack,
    int                        CUP$FormsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FormsParser$result;

      /* select the action based on the action number */
      switch (CUP$FormsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sol ::= ini_sol sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol",2, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sol EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).value;
		RESULT = start_val;
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FormsParser$parser.done_parsing();
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sol ::= ini_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol",2, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini_sol ::= SMALLER EXCL INIT_SOL COLON request 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setResult(q, (String) r);
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini_sol ::= error EXCL INIT_SOL COLON request 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setResult((Token) q, (String) r); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini_sol ::= SMALLER error INIT_SOL COLON request 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setResult(q, (String) r); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini_sol ::= SMALLER EXCL error COLON request 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setResult(q, (String) r); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini_sol ::= SMALLER EXCL INIT_SOL error request 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setResult(q, (String) r); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // request ::= ADD_USER GREATER req_u 
            {
              Object RESULT =null;
		 RESULT = "CREAR"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // request ::= error GREATER req_u 
            {
              Object RESULT =null;
		 RESULT = "CREAR"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // request ::= ADD_USER error req_u 
            {
              Object RESULT =null;
		 RESULT = "CREAR"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // request ::= EDIT_USER GREATER credEdit 
            {
              Object RESULT =null;
		 RESULT = "EDIT"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // request ::= error GREATER credEdit 
            {
              Object RESULT =null;
		 RESULT = "EDIT"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // request ::= EDIT_USER error credEdit 
            {
              Object RESULT =null;
		 RESULT = "EDIT"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // request ::= DEL_USER GREATER req_u 
            {
              Object RESULT =null;
		 RESULT = "DELETE"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // request ::= DEL_USER error req_u 
            {
              Object RESULT =null;
		 RESULT = "DELETE"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // request ::= LOGIN GREATER req_u 
            {
              Object RESULT =null;
		 RESULT = "LOGIN"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // request ::= LOGIN error req_u 
            {
              Object RESULT =null;
		 RESULT = "LOGIN"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // request ::= NEW_FORM GREATER forms 
            {
              Object RESULT =null;
		 RESULT = "NUEVO_FORMULARIO"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // request ::= error GREATER forms 
            {
              Object RESULT =null;
		 RESULT = "NUEVO_FORMULARIO"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // request ::= NEW_FORM error forms 
            {
              Object RESULT =null;
		 RESULT = "NUEVO_FORMULARIO"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // request ::= DEL_FORM GREATER forms 
            {
              Object RESULT =null;
		 RESULT = "ELIMINAR_FORMULARIO"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // request ::= DEL_FORM error forms 
            {
              Object RESULT =null;
		 RESULT = "ELIMINAR_FORMULARIO"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // request ::= EDIT_FORM GREATER forms 
            {
              Object RESULT =null;
		 RESULT = "MODIFICAR_FORMULARIO"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // request ::= EDIT_FORM error forms 
            {
              Object RESULT =null;
		 RESULT = "MODIFICAR_FORMULARIO"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("request",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // forms ::= LBRACE PARAM_F COLON LBRACKET body 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("forms",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // forms ::= error PARAM_F COLON LBRACKET body 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("forms",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // forms ::= LBRACE PARAM_F error LBRACKET body 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("forms",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // forms ::= LBRACE PARAM_F COLON error body 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("forms",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // req_u ::= LBRACE CRED COLON LBRACKET body 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("req_u",4, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // req_u ::= error CRED COLON LBRACKET body 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("req_u",4, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // req_u ::= LBRACE error COLON LBRACKET body 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("req_u",4, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // req_u ::= LBRACE CRED error LBRACKET body 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("req_u",4, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // req_u ::= LBRACE CRED COLON error body 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("req_u",4, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // credEdit ::= LBRACE CRED COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // credEdit ::= error CRED COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // credEdit ::= LBRACE error COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // credEdit ::= LBRACE CRED error LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // credEdit ::= LBRACE CRED COLON error edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // id ::= ID COLON ID_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setNewParam(a, p.getValue(), "ID"); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("id",20, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // id ::= ID error ID_ 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("id",20, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // id ::= ID COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("id",20, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // title ::= TITLE COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setNewParam(a, p, "TITULO"); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("title",21, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // title ::= TITLE error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("title",21, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // title ::= TITLE COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("title",21, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // name ::= NAME COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setNewParam(a, p, "NOMBRE"); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("name",22, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // name ::= NAME error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("name",22, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // name ::= NAME COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("name",22, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // theme ::= THEME COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setNewParam(a, p, "TEMA"); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("theme",23, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // theme ::= THEME error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("theme",23, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // theme ::= THEME COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("theme",23, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // user_c ::= USER_C COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setNewParam(a, p, "USUARIO_CREACION"); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("user_c",24, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // user_c ::= USER_C error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("user_c",24, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // user_c ::= USER_C COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("user_c",24, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // us ::= USER COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setNewParam(a, p, "USUARIO");
					// System.out.println("USUARIO");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("us",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // us ::= USER error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("us",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // us ::= USER COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("us",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // pass ::= PASS COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setNewParam(a, p, "PASSWORD");
					// System.out.println("PASSWORD");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("pass",9, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // pass ::= PASS error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("pass",9, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // pass ::= PASS COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("pass",9, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // date ::= DATE_ADD COLON DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setNewParam(a, p.getValue(), "FECHA_CREACION");
					// System.out.println("FECHA_CREACION");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("date",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // date ::= DATE_ADD error DATE 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("date",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // date ::= DATE_ADD COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("date",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // add_u ::= us 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // add_u ::= pass 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // add_u ::= date 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // add_u ::= id 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // add_u ::= title 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // add_u ::= name 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // add_u ::= theme 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // add_u ::= user_c 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // add ::= add_u 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // add ::= add_u COMMA add 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // body ::= LBRACE add RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("body",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // body ::= error add RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("body",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // body ::= LBRACE add error RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("body",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // body ::= LBRACE add RBRACE error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("body",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // body ::= LBRACE add RBRACE RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("body",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // old_u ::= OLD_USER COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setEditParam(a, p, "USUARIO_ANTIGUO");
					// System.out.println("USUARIO_ANTIGUO");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("old_u",13, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // old_u ::= OLD_USER error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("old_u",13, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // old_u ::= OLD_USER COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("old_u",13, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // new_u ::= NEW_USER COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setEditParam(a, p, "USUARIO_NUEVO");
					// System.out.println("USUARIO_NUEVO");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_u",14, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // new_u ::= NEW_USER error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_u",14, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // new_u ::= NEW_USER COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_u",14, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_p ::= NEW_PASS COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setEditParam(a, p, "NUEVO_PASSWORD");
					// System.out.println("NUEVO_PASSWORD");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_p",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // new_p ::= NEW_PASS error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_p",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // new_p ::= NEW_PASS COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_p",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // e_date ::= DATE_MOD COLON DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setEditParam(a, p.getValue(), "FECHA_MODIFICACION");
					// System.out.println("FECHA_MODIFICACION");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("e_date",16, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // e_date ::= DATE_MOD error DATE 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("e_date",16, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // e_date ::= DATE_MOD COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("e_date",16, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // edit_u ::= old_u 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_u",17, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // edit_u ::= new_u 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_u",17, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // edit_u ::= new_p 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_u",17, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // edit_u ::= e_date 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_u",17, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // edit ::= edit_u 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit",18, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // edit ::= edit COMMA edit_u 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit",18, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // edit_user ::= LBRACE edit RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // edit_user ::= error edit RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // edit_user ::= LBRACE edit error RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // edit_user ::= LBRACE edit RBRACE error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // edit_user ::= LBRACE edit RBRACE RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // fin_sol ::= SMALLER FIN_SOL EXCL GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // fin_sol ::= error FIN_SOL EXCL GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // fin_sol ::= SMALLER error EXCL GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // fin_sol ::= SMALLER FIN_SOL error GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // fin_sol ::= SMALLER FIN_SOL EXCL error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // str_param ::= STR 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // str_param ::= DATE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // str_param ::= ADD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // str_param ::= CRED 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // str_param ::= USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // str_param ::= PASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // str_param ::= DATE_ADD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // str_param ::= EDIT_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // str_param ::= DEL_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // str_param ::= LOGIN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // str_param ::= OLD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // str_param ::= NEW_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // str_param ::= NEW_PASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // str_param ::= DATE_MOD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // str_param ::= NEW_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // str_param ::= PARAM_F 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // str_param ::= ID 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // str_param ::= TITLE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // str_param ::= NAME 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // str_param ::= THEME 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // str_param ::= DEL_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // str_param ::= EDIT_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // str_param ::= ADD_COMP 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // str_param ::= PARAM_C 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // str_param ::= FIELD_N 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // str_param ::= FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // str_param ::= CLASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // str_param ::= TEXT_FIELD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // str_param ::= CHECKBOX 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // str_param ::= RADIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // str_param ::= FILE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // str_param ::= IMG 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // str_param ::= COMBO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // str_param ::= BTN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // str_param ::= INDEX 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // str_param ::= TEXT 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // str_param ::= ALIGN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // str_param ::= REQUIRED 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // str_param ::= OPTION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // str_param ::= ROWS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // str_param ::= COLUMNS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // str_param ::= URL 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // str_param ::= DEL_COMP 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // str_param ::= EDIT_COMP 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",25, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FormsParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FormsParser$do_action(
    int                        CUP$FormsParser$act_num,
    java_cup.runtime.lr_parser CUP$FormsParser$parser,
    java.util.Stack            CUP$FormsParser$stack,
    int                        CUP$FormsParser$top)
    throws java.lang.Exception
    {
              return CUP$FormsParser$do_action_part00000000(
                               CUP$FormsParser$act_num,
                               CUP$FormsParser$parser,
                               CUP$FormsParser$stack,
                               CUP$FormsParser$top);
    }
}

}
