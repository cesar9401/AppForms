
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.formsweb.parser.main;

import com.cesar31.formsweb.parser.main.FormsLex;
import com.cesar31.formsweb.control.*;
import com.cesar31.formsweb.model.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FormsParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return FormsParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public FormsParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public FormsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FormsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\002\007\000\002\002\007\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\007\007\000\002\007\007\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\010\007\000\002\010" +
    "\007\000\002\011\007\000\002\011\007\000\002\011\007" +
    "\000\002\011\007\000\002\011\007\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\005\000" +
    "\002\012\010\000\002\012\010\000\002\012\010\000\002" +
    "\012\010\000\002\012\010\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\031\003\000\002\031\005" +
    "\000\002\014\010\000\002\014\010\000\002\014\010\000" +
    "\002\014\010\000\002\014\010\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\006\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\006\003\004\014\006\001\002\000\004\023" +
    "\370\001\002\000\004\002\367\001\002\000\006\003\011" +
    "\023\012\001\002\000\010\002\uffff\003\004\014\006\001" +
    "\002\000\004\002\001\001\002\000\004\004\364\001\002" +
    "\000\006\003\014\004\013\001\002\000\006\003\360\013" +
    "\361\001\002\000\004\013\015\001\002\000\014\003\021" +
    "\036\023\041\017\042\016\043\020\001\002\000\006\003" +
    "\337\015\336\001\002\000\006\003\313\015\312\001\002" +
    "\000\006\003\307\015\306\001\002\000\004\015\166\001" +
    "\002\000\010\002\ufffb\003\ufffb\014\ufffb\001\002\000\006" +
    "\003\025\015\024\001\002\000\006\003\030\016\026\001" +
    "\002\000\006\003\030\016\026\001\002\000\006\003\151" +
    "\037\150\001\002\000\010\002\ufff7\003\ufff7\014\ufff7\001" +
    "\002\000\004\037\031\001\002\000\004\013\032\001\002" +
    "\000\004\020\033\001\002\000\006\003\035\016\034\001" +
    "\002\000\010\040\040\050\043\051\037\001\002\000\010" +
    "\040\040\050\043\051\037\001\002\000\010\002\uffed\003" +
    "\uffed\014\uffed\001\002\000\006\003\125\013\126\001\002" +
    "\000\006\003\120\013\121\001\002\000\010\003\uffd4\017" +
    "\uffd4\022\uffd4\001\002\000\010\003\uffd5\017\uffd5\022\uffd5" +
    "\001\002\000\006\003\073\013\074\001\002\000\004\017" +
    "\051\001\002\000\010\003\uffd6\017\uffd6\022\uffd6\001\002" +
    "\000\010\003\uffd3\017\uffd3\022\047\001\002\000\010\040" +
    "\040\050\043\051\037\001\002\000\006\003\uffd2\017\uffd2" +
    "\001\002\000\004\021\052\001\002\000\004\017\053\001" +
    "\002\000\006\003\054\014\056\001\002\000\004\005\070" +
    "\001\002\000\010\002\uffd0\003\uffd0\014\uffd0\001\002\000" +
    "\006\003\060\005\057\001\002\000\006\003\063\023\064" +
    "\001\002\000\004\023\061\001\002\000\004\015\062\001" +
    "\002\000\010\002\uffb3\003\uffb3\014\uffb3\001\002\000\004" +
    "\015\067\001\002\000\006\003\065\015\066\001\002\000" +
    "\010\002\uffb1\003\uffb1\014\uffb1\001\002\000\010\002\uffb5" +
    "\003\uffb5\014\uffb5\001\002\000\010\002\uffb2\003\uffb2\014" +
    "\uffb2\001\002\000\004\023\071\001\002\000\004\015\072" +
    "\001\002\000\010\002\uffb4\003\uffb4\014\uffb4\001\002\000" +
    "\042\033\115\035\101\036\112\037\107\040\103\041\110" +
    "\042\077\043\100\044\111\045\116\046\075\047\113\050" +
    "\104\051\105\052\076\053\106\001\002\000\044\003\114" +
    "\033\115\035\101\036\112\037\107\040\103\041\110\042" +
    "\077\043\100\044\111\045\116\046\075\047\113\050\104" +
    "\051\105\052\076\053\106\001\002\000\010\003\uffa4\017" +
    "\uffa4\022\uffa4\001\002\000\010\003\uffa2\017\uffa2\022\uffa2" +
    "\001\002\000\010\003\uffa8\017\uffa8\022\uffa8\001\002\000" +
    "\010\003\uffa7\017\uffa7\022\uffa7\001\002\000\010\003\uffaf" +
    "\017\uffaf\022\uffaf\001\002\000\010\003\uffdf\017\uffdf\022" +
    "\uffdf\001\002\000\010\003\uffaa\017\uffaa\022\uffaa\001\002" +
    "\000\010\003\uffac\017\uffac\022\uffac\001\002\000\010\003" +
    "\uffab\017\uffab\022\uffab\001\002\000\010\003\uffa1\017\uffa1" +
    "\022\uffa1\001\002\000\010\003\uffad\017\uffad\022\uffad\001" +
    "\002\000\010\003\uffa9\017\uffa9\022\uffa9\001\002\000\010" +
    "\003\uffa6\017\uffa6\022\uffa6\001\002\000\010\003\uffae\017" +
    "\uffae\022\uffae\001\002\000\010\003\uffa3\017\uffa3\022\uffa3" +
    "\001\002\000\010\003\uffdd\017\uffdd\022\uffdd\001\002\000" +
    "\010\003\uffb0\017\uffb0\022\uffb0\001\002\000\010\003\uffa5" +
    "\017\uffa5\022\uffa5\001\002\000\010\003\uffde\017\uffde\022" +
    "\uffde\001\002\000\004\035\124\001\002\000\006\003\122" +
    "\035\123\001\002\000\010\003\uffd7\017\uffd7\022\uffd7\001" +
    "\002\000\010\003\uffd9\017\uffd9\022\uffd9\001\002\000\010" +
    "\003\uffd8\017\uffd8\022\uffd8\001\002\000\042\033\115\035" +
    "\101\036\112\037\107\040\103\041\110\042\077\043\100" +
    "\044\111\045\116\046\075\047\113\050\104\051\105\052" +
    "\076\053\106\001\002\000\044\003\130\033\115\035\101" +
    "\036\112\037\107\040\103\041\110\042\077\043\100\044" +
    "\111\045\116\046\075\047\113\050\104\051\105\052\076" +
    "\053\106\001\002\000\010\003\uffdc\017\uffdc\022\uffdc\001" +
    "\002\000\010\003\uffda\017\uffda\022\uffda\001\002\000\010" +
    "\003\uffdb\017\uffdb\022\uffdb\001\002\000\006\003\133\017" +
    "\134\001\002\000\004\021\145\001\002\000\006\003\135" +
    "\021\136\001\002\000\004\017\143\001\002\000\006\003" +
    "\137\017\140\001\002\000\006\003\054\014\056\001\002" +
    "\000\006\003\054\014\056\001\002\000\010\002\uffd1\003" +
    "\uffd1\014\uffd1\001\002\000\010\002\uffcd\003\uffcd\014\uffcd" +
    "\001\002\000\006\003\054\014\056\001\002\000\010\002" +
    "\uffce\003\uffce\014\uffce\001\002\000\004\017\146\001\002" +
    "\000\006\003\054\014\056\001\002\000\010\002\uffcf\003" +
    "\uffcf\014\uffcf\001\002\000\006\003\155\013\156\001\002" +
    "\000\004\013\152\001\002\000\004\020\153\001\002\000" +
    "\006\003\035\016\034\001\002\000\010\002\uffec\003\uffec" +
    "\014\uffec\001\002\000\004\020\163\001\002\000\006\003" +
    "\157\020\160\001\002\000\006\003\035\016\034\001\002" +
    "\000\006\003\035\016\034\001\002\000\010\002\uffee\003" +
    "\uffee\014\uffee\001\002\000\010\002\uffea\003\uffea\014\uffea" +
    "\001\002\000\006\003\035\016\034\001\002\000\010\002" +
    "\uffeb\003\uffeb\014\uffeb\001\002\000\010\002\ufff9\003\ufff9" +
    "\014\ufff9\001\002\000\006\003\171\016\167\001\002\000" +
    "\006\003\266\037\265\001\002\000\010\002\ufff8\003\ufff8" +
    "\014\ufff8\001\002\000\004\037\174\001\002\000\010\002" +
    "\ufff5\003\ufff5\014\ufff5\001\002\000\010\002\ufff2\003\ufff2" +
    "\014\ufff2\001\002\000\004\013\175\001\002\000\004\020" +
    "\176\001\002\000\006\003\201\016\200\001\002\000\010" +
    "\002\uffe8\003\uffe8\014\uffe8\001\002\000\020\040\040\044" +
    "\205\045\214\046\203\047\210\050\043\051\037\001\002" +
    "\000\020\040\040\044\205\045\214\046\203\047\210\050" +
    "\043\051\037\001\002\000\010\002\uffe3\003\uffe3\014\uffe3" +
    "\001\002\000\006\003\242\013\243\001\002\000\010\003" +
    "\uffbf\017\uffbf\022\uffbf\001\002\000\006\003\235\013\236" +
    "\001\002\000\004\017\231\001\002\000\010\003\uffbc\017" +
    "\uffbc\022\227\001\002\000\006\003\222\013\223\001\002" +
    "\000\010\003\uffbe\017\uffbe\022\uffbe\001\002\000\010\003" +
    "\uffc0\017\uffc0\022\uffc0\001\002\000\010\003\uffbd\017\uffbd" +
    "\022\uffbd\001\002\000\006\003\215\013\216\001\002\000" +
    "\042\033\115\035\101\036\112\037\107\040\103\041\110" +
    "\042\077\043\100\044\111\045\116\046\075\047\113\050" +
    "\104\051\105\052\076\053\106\001\002\000\044\003\220" +
    "\033\115\035\101\036\112\037\107\040\103\041\110\042" +
    "\077\043\100\044\111\045\116\046\075\047\113\050\104" +
    "\051\105\052\076\053\106\001\002\000\010\003\uffc9\017" +
    "\uffc9\022\uffc9\001\002\000\010\003\uffc7\017\uffc7\022\uffc7" +
    "\001\002\000\010\003\uffc8\017\uffc8\022\uffc8\001\002\000" +
    "\004\035\226\001\002\000\006\003\224\035\225\001\002" +
    "\000\010\003\uffc1\017\uffc1\022\uffc1\001\002\000\010\003" +
    "\uffc3\017\uffc3\022\uffc3\001\002\000\010\003\uffc2\017\uffc2" +
    "\022\uffc2\001\002\000\012\044\205\045\214\046\203\047" +
    "\210\001\002\000\006\003\uffbb\017\uffbb\001\002\000\004" +
    "\021\232\001\002\000\004\017\233\001\002\000\006\003" +
    "\054\014\056\001\002\000\010\002\uffb9\003\uffb9\014\uffb9" +
    "\001\002\000\042\033\115\035\101\036\112\037\107\040" +
    "\103\041\110\042\077\043\100\044\111\045\116\046\075" +
    "\047\113\050\104\051\105\052\076\053\106\001\002\000" +
    "\044\003\240\033\115\035\101\036\112\037\107\040\103" +
    "\041\110\042\077\043\100\044\111\045\116\046\075\047" +
    "\113\050\104\051\105\052\076\053\106\001\002\000\010" +
    "\003\uffcc\017\uffcc\022\uffcc\001\002\000\010\003\uffca\017" +
    "\uffca\022\uffca\001\002\000\010\003\uffcb\017\uffcb\022\uffcb" +
    "\001\002\000\042\033\115\035\101\036\112\037\107\040" +
    "\103\041\110\042\077\043\100\044\111\045\116\046\075" +
    "\047\113\050\104\051\105\052\076\053\106\001\002\000" +
    "\044\003\245\033\115\035\101\036\112\037\107\040\103" +
    "\041\110\042\077\043\100\044\111\045\116\046\075\047" +
    "\113\050\104\051\105\052\076\053\106\001\002\000\010" +
    "\003\uffc6\017\uffc6\022\uffc6\001\002\000\010\003\uffc4\017" +
    "\uffc4\022\uffc4\001\002\000\010\003\uffc5\017\uffc5\022\uffc5" +
    "\001\002\000\006\003\250\017\251\001\002\000\004\021" +
    "\262\001\002\000\006\003\252\021\253\001\002\000\004" +
    "\017\260\001\002\000\006\003\254\017\255\001\002\000" +
    "\006\003\054\014\056\001\002\000\006\003\054\014\056" +
    "\001\002\000\010\002\uffba\003\uffba\014\uffba\001\002\000" +
    "\010\002\uffb6\003\uffb6\014\uffb6\001\002\000\006\003\054" +
    "\014\056\001\002\000\010\002\uffb7\003\uffb7\014\uffb7\001" +
    "\002\000\004\017\263\001\002\000\006\003\054\014\056" +
    "\001\002\000\010\002\uffb8\003\uffb8\014\uffb8\001\002\000" +
    "\006\003\273\013\274\001\002\000\004\013\267\001\002" +
    "\000\004\020\270\001\002\000\006\003\201\016\200\001" +
    "\002\000\010\002\uffe7\003\uffe7\014\uffe7\001\002\000\010" +
    "\002\uffe2\003\uffe2\014\uffe2\001\002\000\004\020\303\001" +
    "\002\000\006\003\275\020\276\001\002\000\006\003\201" +
    "\016\200\001\002\000\006\003\201\016\200\001\002\000" +
    "\010\002\uffe9\003\uffe9\014\uffe9\001\002\000\010\002\uffe4" +
    "\003\uffe4\014\uffe4\001\002\000\010\002\uffe5\003\uffe5\014" +
    "\uffe5\001\002\000\010\002\uffe0\003\uffe0\014\uffe0\001\002" +
    "\000\006\003\201\016\200\001\002\000\010\002\uffe6\003" +
    "\uffe6\014\uffe6\001\002\000\010\002\uffe1\003\uffe1\014\uffe1" +
    "\001\002\000\006\003\030\016\026\001\002\000\006\003" +
    "\030\016\026\001\002\000\010\002\uffef\003\uffef\014\uffef" +
    "\001\002\000\010\002\ufff0\003\ufff0\014\ufff0\001\002\000" +
    "\006\003\315\016\314\001\002\000\006\003\315\016\314" +
    "\001\002\000\006\003\325\037\324\001\002\000\004\037" +
    "\317\001\002\000\010\002\ufff4\003\ufff4\014\ufff4\001\002" +
    "\000\004\013\320\001\002\000\004\020\321\001\002\000" +
    "\006\003\323\016\322\001\002\000\012\044\205\045\214" +
    "\046\203\047\210\001\002\000\012\044\205\045\214\046" +
    "\203\047\210\001\002\000\006\003\330\013\331\001\002" +
    "\000\004\013\326\001\002\000\004\020\327\001\002\000" +
    "\006\003\323\016\322\001\002\000\004\020\334\001\002" +
    "\000\006\003\332\020\333\001\002\000\006\003\323\016" +
    "\322\001\002\000\006\003\323\016\322\001\002\000\006" +
    "\003\323\016\322\001\002\000\010\002\ufff6\003\ufff6\014" +
    "\ufff6\001\002\000\006\003\341\016\340\001\002\000\006" +
    "\003\341\016\340\001\002\000\006\003\347\037\346\001" +
    "\002\000\004\037\343\001\002\000\010\002\ufff1\003\ufff1" +
    "\014\ufff1\001\002\000\004\013\344\001\002\000\004\020" +
    "\345\001\002\000\002\001\002\000\006\003\352\013\353" +
    "\001\002\000\004\013\350\001\002\000\004\020\351\001" +
    "\002\000\002\001\002\000\004\020\356\001\002\000\006" +
    "\003\354\020\355\001\002\000\002\001\002\000\002\001" +
    "\002\000\002\001\002\000\010\002\ufff3\003\ufff3\014\ufff3" +
    "\001\002\000\014\003\021\036\023\041\017\042\016\043" +
    "\020\001\002\000\014\003\021\036\023\041\017\042\016" +
    "\043\020\001\002\000\010\002\ufffe\003\ufffe\014\ufffe\001" +
    "\002\000\010\002\ufffa\003\ufffa\014\ufffa\001\002\000\004" +
    "\013\365\001\002\000\014\003\021\036\023\041\017\042" +
    "\016\043\020\001\002\000\010\002\ufffc\003\ufffc\014\ufffc" +
    "\001\002\000\004\002\000\001\002\000\004\004\371\001" +
    "\002\000\004\013\372\001\002\000\014\003\021\036\023" +
    "\041\017\042\016\043\020\001\002\000\010\002\ufffd\003" +
    "\ufffd\014\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\006\002\006\004\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\006" +
    "\004\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\164\001\001\000\004\007\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\035\001" +
    "\001\000\014\017\044\020\041\021\040\022\045\023\131" +
    "\001\001\000\014\017\044\020\041\021\040\022\045\023" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\044\020\041\021\040\022\045\023\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\116\001\001\000\004\016\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\130\001\001\000\004" +
    "\016\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\141\001\001\000\004\003\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\161\001\001\000" +
    "\004\012\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\167\010\171\011\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\035\014\176\015\201\001\001\000\002\001" +
    "\001\000\030\017\044\020\041\021\040\022\045\023\131" +
    "\024\211\025\203\026\210\027\212\030\206\031\246\001" +
    "\001\000\030\017\044\020\041\021\040\022\045\023\043" +
    "\024\211\025\203\026\210\027\212\030\206\031\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\220\001\001\000" +
    "\004\016\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\024\211\025\203\026\210\027\212\030\206\031\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\233\001\001\000\002\001\001\000\004\016" +
    "\240\001\001\000\004\016\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\245\001" +
    "\001\000\004\016\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\256\001\001\000\004\003\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\153\014\270\015\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\161\014\300\015\301\001" +
    "\001\000\010\012\160\014\276\015\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\163\014\303\015\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\310\001\001\000" +
    "\004\007\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\334\001\001\000\004\010\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\176\001\001\000" +
    "\016\024\211\025\203\026\210\027\212\030\206\031\246" +
    "\001\001\000\016\024\211\025\203\026\210\027\212\030" +
    "\206\031\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\300\001\001\000\004" +
    "\014\276\001\001\000\004\014\303\001\001\000\002\001" +
    "\001\000\004\011\356\001\001\000\004\011\341\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\301\001\001\000\004\015\277\001\001\000" +
    "\004\015\304\001\001\000\002\001\001\000\004\005\362" +
    "\001\001\000\004\005\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\372\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FormsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FormsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FormsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Symbol cur_token;
	private UserContainer u;
	private User usuario;

	public FormsParser(FormsLex lex) {
		super(lex);
		this.u = new UserContainer();
	}

	/* Constructor sin cambiar nombre */
	// public parser(FormsLex lex) {
	// 	super(lex);
	// 	this.parsed = true;
	// 	u = new UserContainer();
	// }

	public void report_fatal_error(String message, Object info) {

        //System.out.println("report_fatal_error");
        //System.out.println("Message: " + message);
        //System.out.println("Object info: " + info);

        /* Armando reportes de errores */
        // List<String> expected = new ArrayList<>();
        // List<Integer> tokens = expected_token_ids();
        // for(Integer i : tokens) {
        //     expected.add(symbl_name_from_id(i));
        // }

		// this.u.setError(this.cur_token, symbl_name_from_id(this.cur_token.sym), expected);
	}

	public void syntax_error(Symbol cur_token) {
        List<String> expected = new ArrayList<>();

        this.cur_token = cur_token;
		//Token t = (Token) cur_token.value;
        //System.out.printf("syntax_error: %s, %s\n", symbl_name_from_id(cur_token.sym), t.toString());

        List<Integer> tokens = expected_token_ids();
        // System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			//System.out.printf("%s, ", symbl_name_from_id(i));
            expected.add(symbl_name_from_id(i));
        }
        //System.out.println("");

		/* Reporte de Errores */
		this.u.setError(cur_token, symbl_name_from_id(cur_token.sym), expected);
	}

	protected int error_sync_size() {
		return 1;
	}

	public boolean isParsed() {
		return u.getErrors().isEmpty();
	}

	public UserContainer getContainer() {
		return u;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FormsParser$actions {
  private final FormsParser parser;

  /** Constructor */
  CUP$FormsParser$actions(FormsParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FormsParser$do_action_part00000000(
    int                        CUP$FormsParser$act_num,
    java_cup.runtime.lr_parser CUP$FormsParser$parser,
    java.util.Stack            CUP$FormsParser$stack,
    int                        CUP$FormsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FormsParser$result;

      /* select the action based on the action number */
      switch (CUP$FormsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sol ::= ini_sol sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol",2, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sol EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).value;
		RESULT = start_val;
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FormsParser$parser.done_parsing();
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sol ::= ini_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol",2, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini_sol ::= SMALLER EXCL INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setResult(q, (String) r); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini_sol ::= error EXCL INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setResult((Token) q, (String) r); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini_sol ::= SMALLER error INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setResult(q, (String) r); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini_sol ::= SMALLER EXCL error COLON sol_user_nl 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setResult(q, (String) r); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini_sol ::= SMALLER EXCL INIT_SOL error sol_user_nl 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 u.setResult(q, (String) r); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sol_user_nl ::= ADD_USER GREATER credNew 
            {
              Object RESULT =null;
		 RESULT = "CREAR"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sol_user_nl ::= error GREATER credNew 
            {
              Object RESULT =null;
		 RESULT = "CREAR"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sol_user_nl ::= ADD_USER error credNew 
            {
              Object RESULT =null;
		 RESULT = "CREAR"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sol_user_nl ::= EDIT_USER GREATER credEdit 
            {
              Object RESULT =null;
		 RESULT = "EDIT"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sol_user_nl ::= error GREATER credEdit 
            {
              Object RESULT =null;
		 RESULT = "EDIT"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sol_user_nl ::= EDIT_USER error credEdit 
            {
              Object RESULT =null;
		 RESULT = "EDIT"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sol_user_nl ::= DEL_USER GREATER credDel 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sol_user_nl ::= error GREATER credDel 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sol_user_nl ::= DEL_USER error credDel 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sol_user_nl ::= LOGIN GREATER credNew 
            {
              Object RESULT =null;
		 RESULT = "LOGIN"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sol_user_nl ::= LOGIN error credNew 
            {
              Object RESULT =null;
		 RESULT = "LOGIN"; 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // credNew ::= LBRACE CRED COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // credNew ::= error CRED COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // credNew ::= LBRACE error COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // credNew ::= LBRACE CRED error LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // credNew ::= LBRACE CRED COLON error new_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // credEdit ::= LBRACE CRED COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // credEdit ::= error CRED COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // credEdit ::= LBRACE error COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // credEdit ::= LBRACE CRED error LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // credEdit ::= LBRACE CRED COLON error edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // credDel ::= LBRACE CRED COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // credDel ::= error CRED COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // credDel ::= LBRACE error COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // credDel ::= LBRACE CRED error LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // credDel ::= LBRACE CRED COLON error del_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // us ::= USER COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setNewParam(a, p, "USUARIO");
					System.out.println("USUARIO");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("us",13, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // us ::= USER error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("us",13, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // us ::= USER COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("us",13, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pass ::= PASS COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setNewParam(a, p, "PASSWORD");
					System.out.println("PASSWORD");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("pass",14, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pass ::= PASS error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("pass",14, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pass ::= PASS COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("pass",14, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // date ::= DATE_ADD COLON DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setNewParam(a, p.getValue(), "FECHA_CREACION");
					System.out.println("FECHA_CREACION");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("date",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // date ::= DATE_ADD error DATE 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("date",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // date ::= DATE_ADD COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("date",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // add_u ::= us 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",16, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // add_u ::= pass 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",16, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // add_u ::= date 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",16, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // add ::= add_u 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add",17, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // add ::= add_u COMMA add 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add",17, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // new_user ::= LBRACE add RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // new_user ::= error add RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // new_user ::= LBRACE add error RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // new_user ::= LBRACE add RBRACE error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // new_user ::= LBRACE add RBRACE RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // old_u ::= OLD_USER COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setEditParam(a, p, "USUARIO_ANTIGUO");
					// System.out.println("USUARIO_ANTIGUO");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("old_u",18, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // old_u ::= OLD_USER error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("old_u",18, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // old_u ::= OLD_USER COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("old_u",18, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // new_u ::= NEW_USER COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setEditParam(a, p, "USUARIO_NUEVO");
					// System.out.println("USUARIO_NUEVO");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_u",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // new_u ::= NEW_USER error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_u",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // new_u ::= NEW_USER COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_u",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // new_p ::= NEW_PASS COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setEditParam(a, p, "NUEVO_PASSWORD");
					// System.out.println("NUEVO_PASSWORD");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_p",20, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // new_p ::= NEW_PASS error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_p",20, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // new_p ::= NEW_PASS COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_p",20, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // e_date ::= DATE_MOD COLON DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setEditParam(a, p.getValue(), "FECHA_MODIFICACION");
					// System.out.println("FECHA_MODIFICACION");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("e_date",21, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // e_date ::= DATE_MOD error DATE 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("e_date",21, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // e_date ::= DATE_MOD COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("e_date",21, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // edit_u ::= old_u 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_u",22, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // edit_u ::= new_u 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_u",22, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // edit_u ::= new_p 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_u",22, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // edit_u ::= e_date 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_u",22, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // edit ::= edit_u 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit",23, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // edit ::= edit_u COMMA edit 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit",23, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // edit_user ::= LBRACE edit RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // edit_user ::= error edit RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // edit_user ::= LBRACE edit error RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // edit_user ::= LBRACE edit RBRACE error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // edit_user ::= LBRACE edit RBRACE RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fin_sol ::= SMALLER FIN_SOL EXCL GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // fin_sol ::= error FIN_SOL EXCL GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fin_sol ::= SMALLER error EXCL GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fin_sol ::= SMALLER FIN_SOL error GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fin_sol ::= SMALLER FIN_SOL EXCL error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // str_param ::= STR 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // str_param ::= DATE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // str_param ::= ADD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // str_param ::= CRED 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // str_param ::= USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // str_param ::= PASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // str_param ::= DATE_ADD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // str_param ::= EDIT_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // str_param ::= DEL_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // str_param ::= LOGIN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // str_param ::= OLD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // str_param ::= NEW_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // str_param ::= NEW_PASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // str_param ::= DATE_MOD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // str_param ::= NEW_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // str_param ::= PARAM_F 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FormsParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FormsParser$do_action(
    int                        CUP$FormsParser$act_num,
    java_cup.runtime.lr_parser CUP$FormsParser$parser,
    java.util.Stack            CUP$FormsParser$stack,
    int                        CUP$FormsParser$top)
    throws java.lang.Exception
    {
              return CUP$FormsParser$do_action_part00000000(
                               CUP$FormsParser$act_num,
                               CUP$FormsParser$parser,
                               CUP$FormsParser$stack,
                               CUP$FormsParser$top);
    }
}

}
