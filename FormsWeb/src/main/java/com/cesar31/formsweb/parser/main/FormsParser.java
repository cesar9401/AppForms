
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.formsweb.parser.main;

import com.cesar31.formsweb.parser.main.FormsLex;
import com.cesar31.formsweb.control.*;
import com.cesar31.formsweb.model.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FormsParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return FormsParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public FormsParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public FormsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FormsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\002\007\000\002\002\007\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\007\007\000\002\007\007\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\010\007\000\002\010" +
    "\007\000\002\011\007\000\002\011\007\000\002\011\007" +
    "\000\002\011\007\000\002\011\007\000\002\012\010\000" +
    "\002\012\010\000\002\012\010\000\002\012\010\000\002" +
    "\012\010\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\026\003\000\002\026\005\000\002\014" +
    "\012\000\002\014\012\000\002\014\012\000\002\014\012" +
    "\000\002\014\012\000\002\014\012\000\002\017\007\000" +
    "\002\017\007\000\002\017\007\000\002\017\007\000\002" +
    "\016\010\000\002\016\010\000\002\016\010\000\002\016" +
    "\010\000\002\016\010\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\002\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\006\003\004\014\006\001\002\000\004\023" +
    "\u011d\001\002\000\004\002\u011c\001\002\000\006\003\011" +
    "\023\012\001\002\000\010\002\uffff\003\004\014\006\001" +
    "\002\000\004\002\001\001\002\000\004\004\u0119\001\002" +
    "\000\006\003\014\004\013\001\002\000\006\003\u0115\013" +
    "\u0116\001\002\000\004\013\015\001\002\000\014\003\021" +
    "\036\023\041\017\042\016\043\020\001\002\000\006\003" +
    "\u0104\015\u0103\001\002\000\006\003\357\015\356\001\002" +
    "\000\006\003\353\015\352\001\002\000\004\015\167\001" +
    "\002\000\010\002\ufffb\003\ufffb\014\ufffb\001\002\000\006" +
    "\003\025\015\024\001\002\000\006\003\030\016\026\001" +
    "\002\000\006\003\030\016\026\001\002\000\006\003\152" +
    "\037\151\001\002\000\010\002\ufff7\003\ufff7\014\ufff7\001" +
    "\002\000\004\037\031\001\002\000\004\013\032\001\002" +
    "\000\004\020\033\001\002\000\006\003\035\016\034\001" +
    "\002\000\012\003\044\040\043\050\042\051\045\001\002" +
    "\000\012\003\044\040\043\050\042\051\045\001\002\000" +
    "\010\002\uffed\003\uffed\014\uffed\001\002\000\010\003\uffcd" +
    "\017\uffcd\022\131\001\002\000\010\003\uffcf\017\uffcf\022" +
    "\uffcf\001\002\000\010\003\uffd1\017\uffd1\022\uffd1\001\002" +
    "\000\006\003\124\013\125\001\002\000\006\003\117\013" +
    "\120\001\002\000\010\003\uffce\017\uffce\022\uffce\001\002" +
    "\000\006\003\072\013\073\001\002\000\010\003\uffd0\017" +
    "\uffd0\022\uffd0\001\002\000\004\017\050\001\002\000\004" +
    "\021\051\001\002\000\004\017\052\001\002\000\006\003" +
    "\053\014\055\001\002\000\004\005\067\001\002\000\010" +
    "\002\uffde\003\uffde\014\uffde\001\002\000\006\003\057\005" +
    "\056\001\002\000\006\003\062\023\063\001\002\000\004" +
    "\023\060\001\002\000\004\015\061\001\002\000\010\002" +
    "\uffb5\003\uffb5\014\uffb5\001\002\000\004\015\066\001\002" +
    "\000\006\003\065\015\064\001\002\000\010\002\uffb7\003" +
    "\uffb7\014\uffb7\001\002\000\010\002\uffb3\003\uffb3\014\uffb3" +
    "\001\002\000\010\002\uffb4\003\uffb4\014\uffb4\001\002\000" +
    "\004\023\070\001\002\000\004\015\071\001\002\000\010" +
    "\002\uffb6\003\uffb6\014\uffb6\001\002\000\042\033\114\035" +
    "\100\036\111\037\106\040\102\041\107\042\076\043\077" +
    "\044\110\045\115\046\074\047\112\050\103\051\105\052" +
    "\075\053\104\001\002\000\044\003\113\033\114\035\100" +
    "\036\111\037\106\040\102\041\107\042\076\043\077\044" +
    "\110\045\115\046\074\047\112\050\103\051\105\052\075" +
    "\053\104\001\002\000\010\003\uffa6\017\uffa6\022\uffa6\001" +
    "\002\000\010\003\uffa4\017\uffa4\022\uffa4\001\002\000\010" +
    "\003\uffaa\017\uffaa\022\uffaa\001\002\000\010\003\uffa9\017" +
    "\uffa9\022\uffa9\001\002\000\010\003\uffb1\017\uffb1\022\uffb1" +
    "\001\002\000\010\003\uffd7\017\uffd7\022\uffd7\001\002\000" +
    "\010\003\uffac\017\uffac\022\uffac\001\002\000\010\003\uffae" +
    "\017\uffae\022\uffae\001\002\000\010\003\uffa3\017\uffa3\022" +
    "\uffa3\001\002\000\010\003\uffad\017\uffad\022\uffad\001\002" +
    "\000\010\003\uffaf\017\uffaf\022\uffaf\001\002\000\010\003" +
    "\uffab\017\uffab\022\uffab\001\002\000\010\003\uffa8\017\uffa8" +
    "\022\uffa8\001\002\000\010\003\uffb0\017\uffb0\022\uffb0\001" +
    "\002\000\010\003\uffa5\017\uffa5\022\uffa5\001\002\000\010" +
    "\003\uffd5\017\uffd5\022\uffd5\001\002\000\010\003\uffb2\017" +
    "\uffb2\022\uffb2\001\002\000\010\003\uffa7\017\uffa7\022\uffa7" +
    "\001\002\000\010\003\uffd6\017\uffd6\022\uffd6\001\002\000" +
    "\004\035\123\001\002\000\006\003\121\035\122\001\002" +
    "\000\010\003\uffd2\017\uffd2\022\uffd2\001\002\000\010\003" +
    "\uffd4\017\uffd4\022\uffd4\001\002\000\010\003\uffd3\017\uffd3" +
    "\022\uffd3\001\002\000\042\033\114\035\100\036\111\037" +
    "\106\040\102\041\107\042\076\043\077\044\110\045\115" +
    "\046\074\047\112\050\103\051\105\052\075\053\104\001" +
    "\002\000\044\003\127\033\114\035\100\036\111\037\106" +
    "\040\102\041\107\042\076\043\077\044\110\045\115\046" +
    "\074\047\112\050\103\051\105\052\075\053\104\001\002" +
    "\000\010\003\uffda\017\uffda\022\uffda\001\002\000\010\003" +
    "\uffd8\017\uffd8\022\uffd8\001\002\000\010\003\uffd9\017\uffd9" +
    "\022\uffd9\001\002\000\012\003\044\040\043\050\042\051" +
    "\045\001\002\000\006\003\uffcc\017\uffcc\001\002\000\006" +
    "\003\134\017\135\001\002\000\004\021\146\001\002\000" +
    "\006\003\136\021\137\001\002\000\004\017\144\001\002" +
    "\000\006\003\140\017\141\001\002\000\006\003\053\014" +
    "\055\001\002\000\006\003\053\014\055\001\002\000\010" +
    "\002\uffdf\003\uffdf\014\uffdf\001\002\000\010\002\uffdb\003" +
    "\uffdb\014\uffdb\001\002\000\006\003\053\014\055\001\002" +
    "\000\010\002\uffdc\003\uffdc\014\uffdc\001\002\000\004\017" +
    "\147\001\002\000\006\003\053\014\055\001\002\000\010" +
    "\002\uffdd\003\uffdd\014\uffdd\001\002\000\006\003\156\013" +
    "\157\001\002\000\004\013\153\001\002\000\004\020\154" +
    "\001\002\000\006\003\035\016\034\001\002\000\010\002" +
    "\uffec\003\uffec\014\uffec\001\002\000\004\020\164\001\002" +
    "\000\006\003\160\020\161\001\002\000\006\003\035\016" +
    "\034\001\002\000\006\003\035\016\034\001\002\000\010" +
    "\002\uffee\003\uffee\014\uffee\001\002\000\010\002\uffea\003" +
    "\uffea\014\uffea\001\002\000\006\003\035\016\034\001\002" +
    "\000\010\002\uffeb\003\uffeb\014\uffeb\001\002\000\010\002" +
    "\ufff9\003\ufff9\014\ufff9\001\002\000\006\003\172\016\170" +
    "\001\002\000\006\003\332\037\331\001\002\000\010\002" +
    "\ufff8\003\ufff8\014\ufff8\001\002\000\004\037\175\001\002" +
    "\000\010\002\ufff5\003\ufff5\014\ufff5\001\002\000\010\002" +
    "\ufff2\003\ufff2\014\ufff2\001\002\000\004\013\176\001\002" +
    "\000\004\020\177\001\002\000\006\003\202\016\201\001" +
    "\002\000\010\002\uffe8\003\uffe8\014\uffe8\001\002\000\014" +
    "\003\300\040\043\044\301\050\042\051\045\001\002\000" +
    "\014\003\044\040\043\044\204\050\042\051\045\001\002" +
    "\000\010\002\uffe3\003\uffe3\014\uffe3\001\002\000\004\013" +
    "\205\001\002\000\042\033\114\035\100\036\111\037\106" +
    "\040\102\041\107\042\076\043\077\044\110\045\115\046" +
    "\074\047\112\050\103\051\105\052\075\053\104\001\002" +
    "\000\006\003\210\022\207\001\002\000\006\003\265\045" +
    "\266\001\002\000\004\045\215\001\002\000\004\021\212" +
    "\001\002\000\004\017\213\001\002\000\006\003\053\014" +
    "\055\001\002\000\010\002\uffca\003\uffca\014\uffca\001\002" +
    "\000\004\013\216\001\002\000\042\033\114\035\100\036" +
    "\111\037\106\040\102\041\107\042\076\043\077\044\110" +
    "\045\115\046\074\047\112\050\103\051\105\052\075\053" +
    "\104\001\002\000\006\003\221\022\220\001\002\000\010" +
    "\003\243\045\244\046\242\001\002\000\004\046\223\001" +
    "\002\000\006\003\uffc4\021\uffc4\001\002\000\004\013\224" +
    "\001\002\000\042\033\114\035\100\036\111\037\106\040" +
    "\102\041\107\042\076\043\077\044\110\045\115\046\074" +
    "\047\112\050\103\051\105\052\075\053\104\001\002\000" +
    "\006\017\uffb8\022\226\001\002\000\006\003\231\047\232" +
    "\001\002\000\004\017\230\001\002\000\006\003\uffc0\021" +
    "\uffc0\001\002\000\004\013\240\001\002\000\006\003\233" +
    "\013\234\001\002\000\004\035\237\001\002\000\006\003" +
    "\235\035\236\001\002\000\006\003\uffb9\017\uffb9\001\002" +
    "\000\006\003\uffbc\017\uffbc\001\002\000\006\003\uffba\017" +
    "\uffba\001\002\000\004\035\241\001\002\000\006\003\uffbb" +
    "\017\uffbb\001\002\000\006\003\255\013\256\001\002\000" +
    "\004\013\251\001\002\000\004\013\245\001\002\000\042" +
    "\033\114\035\100\036\111\037\106\040\102\041\107\042" +
    "\076\043\077\044\110\045\115\046\074\047\112\050\103" +
    "\051\105\052\075\053\104\001\002\000\006\003\uffb8\022" +
    "\226\001\002\000\004\003\250\001\002\000\006\003\uffbd" +
    "\021\uffbd\001\002\000\042\033\114\035\100\036\111\037" +
    "\106\040\102\041\107\042\076\043\077\044\110\045\115" +
    "\046\074\047\112\050\103\051\105\052\075\053\104\001" +
    "\002\000\006\017\uffb8\022\226\001\002\000\004\017\254" +
    "\001\002\000\006\003\uffbf\021\uffbf\001\002\000\042\033" +
    "\114\035\100\036\111\037\106\040\102\041\107\042\076" +
    "\043\077\044\110\045\115\046\074\047\112\050\103\051" +
    "\105\052\075\053\104\001\002\000\042\033\114\035\100" +
    "\036\111\037\106\040\102\041\107\042\076\043\077\044" +
    "\110\045\115\046\074\047\112\050\103\051\105\052\075" +
    "\053\104\001\002\000\006\017\uffb8\022\226\001\002\000" +
    "\004\017\261\001\002\000\006\003\uffc1\021\uffc1\001\002" +
    "\000\006\017\uffb8\022\226\001\002\000\004\017\264\001" +
    "\002\000\006\003\uffbe\021\uffbe\001\002\000\004\013\275" +
    "\001\002\000\006\003\267\013\270\001\002\000\042\033" +
    "\114\035\100\036\111\037\106\040\102\041\107\042\076" +
    "\043\077\044\110\045\115\046\074\047\112\050\103\051" +
    "\105\052\075\053\104\001\002\000\042\033\114\035\100" +
    "\036\111\037\106\040\102\041\107\042\076\043\077\044" +
    "\110\045\115\046\074\047\112\050\103\051\105\052\075" +
    "\053\104\001\002\000\006\003\221\022\220\001\002\000" +
    "\006\003\uffc5\021\uffc5\001\002\000\006\003\221\022\220" +
    "\001\002\000\006\003\uffc2\021\uffc2\001\002\000\042\033" +
    "\114\035\100\036\111\037\106\040\102\041\107\042\076" +
    "\043\077\044\110\045\115\046\074\047\112\050\103\051" +
    "\105\052\075\053\104\001\002\000\006\003\221\022\220" +
    "\001\002\000\006\003\uffc3\021\uffc3\001\002\000\012\003" +
    "\uffce\013\323\017\uffce\022\uffce\001\002\000\006\003\302" +
    "\013\303\001\002\000\042\033\114\035\100\036\111\037" +
    "\106\040\102\041\107\042\076\043\077\044\110\045\115" +
    "\046\074\047\112\050\103\051\105\052\075\053\104\001" +
    "\002\000\042\033\114\035\100\036\111\037\106\040\102" +
    "\041\107\042\076\043\077\044\110\045\115\046\074\047" +
    "\112\050\103\051\105\052\075\053\104\001\002\000\006" +
    "\003\210\022\207\001\002\000\006\003\306\021\307\001" +
    "\002\000\004\017\314\001\002\000\006\003\310\017\311" +
    "\001\002\000\006\003\053\014\055\001\002\000\006\003" +
    "\053\014\055\001\002\000\010\002\uffcb\003\uffcb\014\uffcb" +
    "\001\002\000\010\002\uffc6\003\uffc6\014\uffc6\001\002\000" +
    "\006\003\053\014\055\001\002\000\010\002\uffc7\003\uffc7" +
    "\014\uffc7\001\002\000\006\003\210\022\207\001\002\000" +
    "\004\021\320\001\002\000\004\017\321\001\002\000\006" +
    "\003\053\014\055\001\002\000\010\002\uffc8\003\uffc8\014" +
    "\uffc8\001\002\000\042\033\114\035\100\036\111\037\106" +
    "\040\102\041\107\042\076\043\077\044\110\045\115\046" +
    "\074\047\112\050\103\051\105\052\075\053\104\001\002" +
    "\000\006\003\210\022\207\001\002\000\004\021\326\001" +
    "\002\000\004\017\327\001\002\000\006\003\053\014\055" +
    "\001\002\000\010\002\uffc9\003\uffc9\014\uffc9\001\002\000" +
    "\006\003\337\013\340\001\002\000\004\013\333\001\002" +
    "\000\004\020\334\001\002\000\006\003\202\016\201\001" +
    "\002\000\010\002\uffe7\003\uffe7\014\uffe7\001\002\000\010" +
    "\002\uffe2\003\uffe2\014\uffe2\001\002\000\004\020\347\001" +
    "\002\000\006\003\341\020\342\001\002\000\006\003\202" +
    "\016\201\001\002\000\006\003\202\016\201\001\002\000" +
    "\010\002\uffe9\003\uffe9\014\uffe9\001\002\000\010\002\uffe4" +
    "\003\uffe4\014\uffe4\001\002\000\010\002\uffe5\003\uffe5\014" +
    "\uffe5\001\002\000\010\002\uffe0\003\uffe0\014\uffe0\001\002" +
    "\000\006\003\202\016\201\001\002\000\010\002\uffe6\003" +
    "\uffe6\014\uffe6\001\002\000\010\002\uffe1\003\uffe1\014\uffe1" +
    "\001\002\000\006\003\030\016\026\001\002\000\006\003" +
    "\030\016\026\001\002\000\010\002\uffef\003\uffef\014\uffef" +
    "\001\002\000\010\002\ufff0\003\ufff0\014\ufff0\001\002\000" +
    "\006\003\361\016\360\001\002\000\006\003\361\016\360" +
    "\001\002\000\006\003\372\037\371\001\002\000\004\037" +
    "\363\001\002\000\010\002\ufff4\003\ufff4\014\ufff4\001\002" +
    "\000\004\013\364\001\002\000\004\020\365\001\002\000" +
    "\006\003\367\016\366\001\002\000\006\003\370\044\301" +
    "\001\002\000\004\044\204\001\002\000\004\013\323\001" +
    "\002\000\006\003\375\013\376\001\002\000\004\013\373" +
    "\001\002\000\004\020\374\001\002\000\006\003\367\016" +
    "\366\001\002\000\004\020\u0101\001\002\000\006\003\377" +
    "\020\u0100\001\002\000\006\003\367\016\366\001\002\000" +
    "\006\003\367\016\366\001\002\000\006\003\367\016\366" +
    "\001\002\000\010\002\ufff6\003\ufff6\014\ufff6\001\002\000" +
    "\006\003\u0106\016\u0105\001\002\000\006\003\u0106\016\u0105" +
    "\001\002\000\006\003\u010c\037\u010b\001\002\000\004\037" +
    "\u0108\001\002\000\010\002\ufff1\003\ufff1\014\ufff1\001\002" +
    "\000\004\013\u0109\001\002\000\004\020\u010a\001\002\000" +
    "\002\001\002\000\006\003\u010f\013\u0110\001\002\000\004" +
    "\013\u010d\001\002\000\004\020\u010e\001\002\000\002\001" +
    "\002\000\004\020\u0113\001\002\000\006\003\u0111\020\u0112" +
    "\001\002\000\002\001\002\000\002\001\002\000\002\001" +
    "\002\000\010\002\ufff3\003\ufff3\014\ufff3\001\002\000\014" +
    "\003\021\036\023\041\017\042\016\043\020\001\002\000" +
    "\014\003\021\036\023\041\017\042\016\043\020\001\002" +
    "\000\010\002\ufffe\003\ufffe\014\ufffe\001\002\000\010\002" +
    "\ufffa\003\ufffa\014\ufffa\001\002\000\004\013\u011a\001\002" +
    "\000\014\003\021\036\023\041\017\042\016\043\020\001" +
    "\002\000\010\002\ufffc\003\ufffc\014\ufffc\001\002\000\004" +
    "\002\000\001\002\000\004\004\u011e\001\002\000\004\013" +
    "\u011f\001\002\000\014\003\021\036\023\041\017\042\016" +
    "\043\020\001\002\000\010\002\ufffd\003\ufffd\014\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\006\002\006\004\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\006" +
    "\004\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\165\001\001\000\004\007\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\035\001" +
    "\001\000\014\022\040\023\045\024\037\025\036\026\132" +
    "\001\001\000\014\022\040\023\045\024\037\025\036\026" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\115\001\001\000\004\021\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\127\001\001\000\004\021" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\040\023\045\024\037\025\036\026" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\142\001\001\000\004\003\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\162\001\001\000\004\012\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\170\010\172\011\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\035\014\177\020\202\001" +
    "\001\000\002\001\001\000\014\022\040\023\045\024\037" +
    "\025\036\026\132\001\001\000\014\022\040\023\045\024" +
    "\037\025\036\026\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\205\001\001\000\004\017\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\216\001\001\000\004" +
    "\016\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\224\001\001" +
    "\000\004\015\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\245\001\001\000\004\015\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\251\001" +
    "\001\000\004\015\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\261\001\001\000\004\021\256\001" +
    "\001\000\004\015\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\272\001\001\000\004\021\270\001\001\000\004\016" +
    "\271\001\001\000\002\001\001\000\004\016\273\001\001" +
    "\000\002\001\001\000\004\021\275\001\001\000\004\016" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\315\001\001\000\004\021\303\001" +
    "\001\000\004\017\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\312\001\001\000" +
    "\004\003\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\314\001\001\000\002\001\001\000\004\017" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\321\001\001\000\002\001\001\000\004\021\323\001" +
    "\001\000\004\017\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\154\014\334\020\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\162\014\344\020\345\001\001\000\010\012\161\014" +
    "\342\020\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\164\014" +
    "\347\020\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\354\001\001\000\004\007\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0101\001\001" +
    "\000\004\010\361\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\344\001\001\000\004" +
    "\014\342\001\001\000\004\014\347\001\001\000\002\001" +
    "\001\000\004\011\u0113\001\001\000\004\011\u0106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\345\001\001\000\004\020\343\001\001\000" +
    "\004\020\350\001\001\000\002\001\001\000\004\005\u0117" +
    "\001\001\000\004\005\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u011f\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FormsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FormsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FormsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Symbol cur_token;
	private boolean parsed;
	private UserContainer u;
	private User usuario;

	public FormsParser(FormsLex lex) {
		super(lex);
		this.parsed = true;
		this.u = new UserContainer();
	}

	/* Constructor sin cambiar nombre */
	// public parser(FormsLex lex) {
	// 	super(lex);
	// 	this.parsed = true;
	// 	u = new UserContainer();
	// }

	public void report_fatal_error(String message, Object info) {
        /* parsed */
        this.parsed = false;

        //System.out.println("report_fatal_error");
        //System.out.println("Message: " + message);
        //System.out.println("Object info: " + info);

        /* Armando reportes de errores */
        List<String> expected = new ArrayList<>();
        List<Integer> tokens = expected_token_ids();
        for(Integer i : tokens) {
            expected.add(symbl_name_from_id(i));
        }
	}

	public void syntax_error(Symbol cur_token) {
        /* parsed */
        this.parsed = false;
        /**/

        List<String> expected = new ArrayList<>();

        this.cur_token = cur_token;
		Token t = (Token) cur_token.value;
        System.out.printf("syntax_error: %s, %s\n", symbl_name_from_id(cur_token.sym), t.toString());

        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
            expected.add(symbl_name_from_id(i));
        }
        System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}

	public boolean isParsed() {
		return parsed;
	}

	public UserContainer getContainer() {
		return u;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FormsParser$actions {
  private final FormsParser parser;

  /** Constructor */
  CUP$FormsParser$actions(FormsParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FormsParser$do_action_part00000000(
    int                        CUP$FormsParser$act_num,
    java_cup.runtime.lr_parser CUP$FormsParser$parser,
    java.util.Stack            CUP$FormsParser$stack,
    int                        CUP$FormsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FormsParser$result;

      /* select the action based on the action number */
      switch (CUP$FormsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sol ::= ini_sol sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol",2, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sol EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).value;
		RESULT = start_val;
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FormsParser$parser.done_parsing();
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sol ::= ini_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol",2, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini_sol ::= SMALLER EXCL INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).right;
		Token q = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					u.setResult(q, (String) r);
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini_sol ::= error EXCL INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini_sol ::= SMALLER error INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini_sol ::= SMALLER EXCL error COLON sol_user_nl 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini_sol ::= SMALLER EXCL INIT_SOL error sol_user_nl 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sol_user_nl ::= ADD_USER GREATER credNew 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		
					RESULT = "CREAR";
					//System.out.println("Crear Usuario");
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sol_user_nl ::= error GREATER credNew 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sol_user_nl ::= ADD_USER error credNew 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sol_user_nl ::= EDIT_USER GREATER credEdit 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sol_user_nl ::= error GREATER credEdit 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sol_user_nl ::= EDIT_USER error credEdit 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sol_user_nl ::= DEL_USER GREATER credDel 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sol_user_nl ::= error GREATER credDel 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sol_user_nl ::= DEL_USER error credDel 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sol_user_nl ::= LOGIN GREATER credNew 
            {
              Object RESULT =null;
		 System.out.println("Login Usuario"); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sol_user_nl ::= LOGIN error credNew 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // credNew ::= LBRACE CRED COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // credNew ::= error CRED COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // credNew ::= LBRACE error COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // credNew ::= LBRACE CRED error LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // credNew ::= LBRACE CRED COLON error new_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // credEdit ::= LBRACE CRED COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // credEdit ::= error CRED COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // credEdit ::= LBRACE error COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // credEdit ::= LBRACE CRED error LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // credEdit ::= LBRACE CRED COLON error edit_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // credDel ::= LBRACE CRED COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // credDel ::= error CRED COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // credDel ::= LBRACE error COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // credDel ::= LBRACE CRED error LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // credDel ::= LBRACE CRED COLON error del_user 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // new_user ::= LBRACE add RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // new_user ::= error add RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // new_user ::= LBRACE add error RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // new_user ::= LBRACE add RBRACE error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // new_user ::= LBRACE add RBRACE RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // us ::= USER COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					System.out.println("User: " + p);
					u.setUser(a, p);
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("us",16, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // us ::= USER error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("us",16, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // us ::= USER COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("us",16, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pass ::= PASS COLON str_param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					System.out.println("pass: " + p);
					u.setPassword(a, p);
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("pass",17, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pass ::= PASS error str_param 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("pass",17, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pass ::= PASS COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("pass",17, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // date ::= DATE_ADD COLON DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		
					System.out.println("date: " + p.getValue());
					u.setDate(a, p.getValue());
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("date",18, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // date ::= DATE_ADD error DATE 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("date",18, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // date ::= DATE_ADD COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("date",18, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // add_u ::= us 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // add_u ::= pass 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // add_u ::= date 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // add_u ::= error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add_u",19, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // add ::= add_u 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add",20, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // add ::= add_u COMMA add 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("add",20, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // edit_user ::= LBRACE OLD_USER COLON str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)).value;
		
					System.out.printf("oldUser = %s\n", u);
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-7)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // edit_user ::= error OLD_USER COLON str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-7)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // edit_user ::= LBRACE error COLON str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-7)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // edit_user ::= LBRACE OLD_USER error str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-7)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // edit_user ::= LBRACE OLD_USER COLON str_param user_n error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-7)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // edit_user ::= LBRACE OLD_USER COLON str_param user_n RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-7)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // user_n ::= COMMA NEW_USER COLON str_param edit_pass 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-1)).value;
		
					System.out.printf("newUser = %s\n", v);
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // user_n ::= error NEW_USER COLON str_param edit_pass 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // user_n ::= COMMA error COLON str_param edit_pass 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // user_n ::= COMMA NEW_USER error str_param edit_pass 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-4)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // edit_pass ::= COMMA NEW_PASS COLON str_param edit_date RBRACE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-2)).value;
		
					System.out.printf("newPass = %s\n", w);
				
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // edit_pass ::= error NEW_PASS COLON str_param edit_date RBRACE 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // edit_pass ::= COMMA error COLON str_param edit_date RBRACE 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // edit_pass ::= COMMA NEW_PASS error str_param edit_date RBRACE 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // edit_pass ::= COMMA NEW_USER COLON str_param edit_date error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // edit_date ::= COMMA DATE_MOD COLON DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 System.out.printf("DateMod = %s\n", a.getValue()); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // edit_date ::= COMMA error COLON DATE 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // edit_date ::= COMMA DATE_MOD error DATE 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // edit_date ::= COMMA DATE_MOD COLON error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // edit_date ::= 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // fin_sol ::= SMALLER FIN_SOL EXCL GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fin_sol ::= error FIN_SOL EXCL GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fin_sol ::= SMALLER error EXCL GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // fin_sol ::= SMALLER FIN_SOL error GREATER 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fin_sol ::= SMALLER FIN_SOL EXCL error 
            {
              Object RESULT =null;

              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.elementAt(CUP$FormsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // str_param ::= STR 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // str_param ::= DATE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // str_param ::= ADD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // str_param ::= CRED 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // str_param ::= USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // str_param ::= PASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // str_param ::= DATE_ADD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // str_param ::= EDIT_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // str_param ::= DEL_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // str_param ::= LOGIN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // str_param ::= OLD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // str_param ::= NEW_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // str_param ::= NEW_PASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // str_param ::= DATE_MOD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // str_param ::= NEW_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // str_param ::= PARAM_F 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$FormsParser$stack.peek()).value;
		 RESULT = p.getValue(); 
              CUP$FormsParser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FormsParser$stack.peek()), RESULT);
            }
          return CUP$FormsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FormsParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FormsParser$do_action(
    int                        CUP$FormsParser$act_num,
    java_cup.runtime.lr_parser CUP$FormsParser$parser,
    java.util.Stack            CUP$FormsParser$stack,
    int                        CUP$FormsParser$top)
    throws java.lang.Exception
    {
              return CUP$FormsParser$do_action_part00000000(
                               CUP$FormsParser$act_num,
                               CUP$FormsParser$parser,
                               CUP$FormsParser$stack,
                               CUP$FormsParser$top);
    }
}

}
