// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: forms.flex

package com.cesar31.formsweb.parser.main;

import static com.cesar31.formsweb.parser.main.FormsParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class FormsLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\2\6\1\0\2\6\1\10\1\11"+
    "\1\12\1\13\1\6\1\14\1\15\11\16\1\17\1\6"+
    "\1\20\1\0\1\21\2\6\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\6"+
    "\1\55\1\6\1\56\1\0\2\52\1\57\1\60\1\61"+
    "\1\62\2\52\1\63\2\52\1\64\1\52\1\65\1\66"+
    "\3\52\1\67\1\70\1\71\5\52\1\72\1\73\1\74"+
    "\7\0\1\1\32\0\1\1\1\6\10\0\1\52\12\0"+
    "\1\52\4\0\1\52\4\0\1\6\27\52\1\0\37\52"+
    "\1\0\u01ca\52\4\0\14\52\16\0\5\52\7\0\1\52"+
    "\1\0\1\52\21\0\165\52\1\0\2\52\2\0\4\52"+
    "\1\0\1\52\6\0\1\52\1\0\3\52\1\0\1\52"+
    "\1\0\24\52\1\0\123\52\1\0\213\52\1\0\255\52"+
    "\1\0\46\52\2\0\1\52\6\0\51\52\10\0\55\52"+
    "\1\0\1\52\1\0\2\52\1\0\2\52\1\0\1\52"+
    "\10\0\33\52\4\0\4\52\35\0\13\52\5\0\100\52"+
    "\12\75\4\0\146\52\1\0\10\52\2\0\12\52\1\0"+
    "\6\52\12\75\3\52\2\0\1\52\20\0\73\52\2\0"+
    "\145\52\16\0\12\75\54\52\4\0\1\52\2\0\1\52"+
    "\2\0\56\52\22\0\34\52\4\0\13\52\65\0\25\52"+
    "\1\0\10\52\25\0\17\52\1\0\201\52\2\0\12\75"+
    "\1\0\23\52\1\0\10\52\2\0\2\52\2\0\26\52"+
    "\1\0\7\52\1\0\1\52\3\0\4\52\2\0\11\52"+
    "\2\0\2\52\2\0\4\52\10\0\1\52\4\0\2\52"+
    "\1\0\5\52\2\0\12\75\2\52\12\0\1\52\1\0"+
    "\1\52\2\0\3\52\1\0\6\52\4\0\2\52\2\0"+
    "\26\52\1\0\7\52\1\0\2\52\1\0\2\52\1\0"+
    "\2\52\2\0\1\52\1\0\5\52\4\0\2\52\2\0"+
    "\3\52\3\0\1\52\7\0\4\52\1\0\1\52\7\0"+
    "\12\75\6\52\13\0\3\52\1\0\11\52\1\0\3\52"+
    "\1\0\26\52\1\0\7\52\1\0\2\52\1\0\5\52"+
    "\2\0\12\52\1\0\3\52\1\0\3\52\2\0\1\52"+
    "\17\0\4\52\2\0\12\75\11\0\7\52\1\0\3\52"+
    "\1\0\10\52\2\0\2\52\2\0\26\52\1\0\7\52"+
    "\1\0\2\52\1\0\5\52\2\0\11\52\2\0\2\52"+
    "\2\0\3\52\10\0\2\52\4\0\2\52\1\0\5\52"+
    "\2\0\12\75\1\0\1\52\20\0\2\52\1\0\6\52"+
    "\3\0\3\52\1\0\4\52\3\0\2\52\1\0\1\52"+
    "\1\0\2\52\3\0\2\52\3\0\3\52\3\0\14\52"+
    "\4\0\5\52\3\0\3\52\1\0\4\52\2\0\1\52"+
    "\6\0\1\52\16\0\12\75\20\0\15\52\1\0\3\52"+
    "\1\0\27\52\1\0\20\52\3\0\10\52\1\0\3\52"+
    "\1\0\4\52\7\0\2\52\1\0\3\52\5\0\4\52"+
    "\2\0\12\75\20\0\4\52\1\0\10\52\1\0\3\52"+
    "\1\0\27\52\1\0\12\52\1\0\5\52\2\0\11\52"+
    "\1\0\3\52\1\0\4\52\7\0\2\52\7\0\1\52"+
    "\1\0\4\52\2\0\12\75\1\0\2\52\15\0\4\52"+
    "\1\0\10\52\1\0\3\52\1\0\63\52\1\0\3\52"+
    "\1\0\5\52\5\0\4\52\7\0\5\52\2\0\12\75"+
    "\12\0\6\52\2\0\2\52\1\0\22\52\3\0\30\52"+
    "\1\0\11\52\1\0\1\52\2\0\7\52\3\0\1\52"+
    "\4\0\6\52\1\0\1\52\1\0\10\52\6\0\12\75"+
    "\2\0\2\52\15\0\72\52\5\0\17\52\1\0\12\75"+
    "\47\0\2\52\1\0\1\52\1\0\5\52\1\0\30\52"+
    "\1\0\1\52\1\0\27\52\2\0\5\52\1\0\1\52"+
    "\1\0\6\52\2\0\12\75\2\0\4\52\40\0\1\52"+
    "\27\0\2\52\6\0\12\75\13\0\1\52\1\0\1\52"+
    "\1\0\1\52\4\0\12\52\1\0\44\52\4\0\24\52"+
    "\1\0\22\52\1\0\44\52\11\0\1\52\71\0\100\52"+
    "\12\75\6\0\100\52\12\75\4\52\2\0\46\52\1\0"+
    "\1\52\5\0\1\52\2\0\53\52\1\0\115\52\1\0"+
    "\4\52\2\0\7\52\1\0\1\52\1\0\4\52\2\0"+
    "\51\52\1\0\4\52\2\0\41\52\1\0\4\52\2\0"+
    "\7\52\1\0\1\52\1\0\4\52\2\0\17\52\1\0"+
    "\71\52\1\0\4\52\2\0\103\52\2\0\3\52\40\0"+
    "\20\52\20\0\126\52\2\0\6\52\3\0\u016c\52\2\0"+
    "\21\52\1\1\32\52\5\0\113\52\3\0\13\52\7\0"+
    "\15\52\1\0\7\52\13\0\25\52\13\0\24\52\14\0"+
    "\15\52\1\0\3\52\1\0\2\52\14\0\124\52\3\0"+
    "\1\52\4\0\2\52\2\0\12\75\41\0\3\52\2\0"+
    "\12\75\6\0\131\52\7\0\53\52\5\0\106\52\12\0"+
    "\37\52\1\0\14\52\4\0\14\52\12\0\12\75\36\52"+
    "\2\0\5\52\13\0\54\52\4\0\32\52\6\0\12\75"+
    "\46\0\34\52\4\0\77\52\1\0\35\52\2\0\1\52"+
    "\12\75\6\0\12\75\15\0\1\52\10\0\17\52\101\0"+
    "\114\52\4\0\12\75\21\0\11\52\14\0\60\52\12\75"+
    "\72\52\14\0\70\52\10\0\12\75\3\0\3\52\12\75"+
    "\44\52\2\0\11\52\7\0\53\52\2\0\3\52\20\0"+
    "\3\52\1\0\47\52\5\0\372\52\1\0\33\52\2\0"+
    "\6\52\2\0\46\52\2\0\6\52\2\0\10\52\1\0"+
    "\1\52\1\0\1\52\1\0\1\52\1\0\37\52\2\0"+
    "\65\52\1\0\7\52\1\0\1\52\3\0\3\52\1\0"+
    "\7\52\3\0\4\52\2\0\6\52\4\0\15\52\5\0"+
    "\3\52\1\0\7\52\3\0\13\1\35\0\2\1\5\0"+
    "\1\1\17\0\2\52\23\0\1\52\12\0\1\1\21\0"+
    "\1\52\15\0\1\52\20\0\15\52\63\0\41\52\21\0"+
    "\1\52\4\0\1\52\2\0\12\52\1\0\1\52\3\0"+
    "\5\52\6\0\1\52\1\0\1\52\1\0\1\52\1\0"+
    "\4\52\1\0\13\52\2\0\4\52\5\0\5\52\4\0"+
    "\1\52\21\0\51\52\u022d\0\64\52\26\0\57\52\1\0"+
    "\57\52\1\0\205\52\6\0\11\52\14\0\46\52\1\0"+
    "\1\52\5\0\1\52\2\0\70\52\7\0\1\52\17\0"+
    "\30\52\11\0\7\52\1\0\7\52\1\0\7\52\1\0"+
    "\7\52\1\0\7\52\1\0\7\52\1\0\7\52\1\0"+
    "\7\52\1\0\40\52\57\0\1\52\320\0\1\1\4\0"+
    "\3\52\31\0\17\52\1\0\5\52\2\0\5\52\4\0"+
    "\126\52\2\0\2\52\2\0\3\52\1\0\132\52\1\0"+
    "\4\52\5\0\53\52\1\0\136\52\21\0\33\52\65\0"+
    "\306\52\112\0\360\52\20\0\215\52\103\0\56\52\2\0"+
    "\15\52\3\0\20\52\12\75\2\52\24\0\63\52\1\0"+
    "\12\52\1\0\163\52\45\0\11\52\2\0\147\52\2\0"+
    "\65\52\2\0\5\52\60\0\61\52\30\0\64\52\14\0"+
    "\106\52\12\0\12\75\6\0\30\52\3\0\1\52\1\0"+
    "\3\52\12\75\44\52\2\0\44\52\14\0\35\52\3\0"+
    "\101\52\16\0\1\52\12\75\6\0\20\52\12\75\5\52"+
    "\1\0\67\52\11\0\16\52\2\0\12\75\6\0\27\52"+
    "\3\0\111\52\30\0\3\52\2\0\20\52\2\0\5\52"+
    "\12\0\6\52\2\0\6\52\2\0\6\52\11\0\7\52"+
    "\1\0\7\52\1\0\53\52\1\0\14\52\10\0\173\52"+
    "\1\0\2\52\2\0\12\75\6\0\244\52\14\0\27\52"+
    "\4\0\61\52\4\0\156\52\2\0\152\52\46\0\7\52"+
    "\14\0\5\52\5\0\14\52\1\0\15\52\1\0\5\52"+
    "\1\0\1\52\1\0\2\52\1\0\2\52\1\0\154\52"+
    "\41\0\153\52\22\0\100\52\2\0\66\52\50\0\14\52"+
    "\4\0\20\52\20\0\20\52\3\0\2\52\30\0\3\52"+
    "\40\0\5\52\1\0\207\52\23\0\12\75\7\0\32\52"+
    "\4\0\1\52\1\0\32\52\13\0\131\52\3\0\6\52"+
    "\2\0\6\52\2\0\6\52\2\0\3\52\43\0\14\52"+
    "\1\0\32\52\1\0\23\52\1\0\2\52\1\0\17\52"+
    "\2\0\16\52\42\0\173\52\105\0\65\52\210\0\1\52"+
    "\202\0\35\52\3\0\61\52\17\0\1\52\37\0\40\52"+
    "\15\0\36\52\5\0\53\52\5\0\36\52\2\0\44\52"+
    "\4\0\10\52\1\0\5\52\52\0\236\52\2\0\12\75"+
    "\6\0\44\52\4\0\44\52\4\0\50\52\10\0\64\52"+
    "\234\0\67\52\11\0\26\52\12\0\10\52\230\0\6\52"+
    "\2\0\1\52\1\0\54\52\1\0\2\52\3\0\1\52"+
    "\2\0\27\52\12\0\27\52\11\0\37\52\101\0\23\52"+
    "\1\0\2\52\12\0\26\52\12\0\32\52\106\0\70\52"+
    "\6\0\2\52\100\0\4\52\1\0\2\52\5\0\10\52"+
    "\1\0\3\52\1\0\35\52\2\0\3\52\4\0\1\52"+
    "\40\0\35\52\3\0\35\52\43\0\10\52\1\0\36\52"+
    "\31\0\66\52\12\0\26\52\12\0\23\52\15\0\22\52"+
    "\156\0\111\52\67\0\63\52\15\0\63\52\15\0\50\52"+
    "\10\0\12\75\306\0\35\52\12\0\1\52\10\0\41\52"+
    "\217\0\27\52\11\0\107\52\37\0\12\75\17\0\74\52"+
    "\25\0\31\52\7\0\12\75\6\0\65\52\1\0\12\75"+
    "\4\0\3\52\11\0\44\52\2\0\1\52\11\0\105\52"+
    "\4\0\4\52\3\0\12\75\1\52\1\0\1\52\43\0"+
    "\22\52\1\0\45\52\6\0\1\52\101\0\7\52\1\0"+
    "\1\52\1\0\4\52\1\0\17\52\1\0\12\52\7\0"+
    "\73\52\5\0\12\75\6\0\4\52\1\0\10\52\2\0"+
    "\2\52\2\0\26\52\1\0\7\52\1\0\2\52\1\0"+
    "\5\52\1\0\12\52\2\0\2\52\2\0\3\52\2\0"+
    "\1\52\6\0\1\52\5\0\7\52\2\0\7\52\3\0"+
    "\5\52\213\0\113\52\5\0\12\75\4\0\2\52\40\0"+
    "\106\52\1\0\1\52\10\0\12\75\246\0\66\52\2\0"+
    "\11\52\27\0\6\52\42\0\101\52\3\0\1\52\13\0"+
    "\12\75\46\0\71\52\7\0\12\75\66\0\33\52\2\0"+
    "\17\52\4\0\12\75\306\0\73\52\145\0\100\52\12\75"+
    "\25\0\1\52\240\0\10\52\2\0\56\52\2\0\10\52"+
    "\1\0\2\52\33\0\77\52\10\0\1\52\10\0\112\52"+
    "\3\0\1\52\42\0\71\52\7\0\11\52\1\0\55\52"+
    "\1\0\11\52\17\0\12\75\30\0\36\52\2\0\26\52"+
    "\1\0\16\52\111\0\7\52\1\0\2\52\1\0\54\52"+
    "\3\0\1\52\1\0\2\52\1\0\11\52\10\0\12\75"+
    "\6\0\6\52\1\0\2\52\1\0\45\52\1\0\2\52"+
    "\1\0\6\52\7\0\12\75\u0136\0\27\52\11\0\232\52"+
    "\146\0\157\52\21\0\304\52\274\0\57\52\321\0\107\52"+
    "\271\0\71\52\7\0\37\52\1\0\12\75\146\0\36\52"+
    "\2\0\5\52\13\0\67\52\11\0\4\52\14\0\12\75"+
    "\11\0\25\52\5\0\23\52\260\0\100\52\200\0\113\52"+
    "\4\0\71\52\7\0\21\52\100\0\2\52\1\0\1\52"+
    "\34\0\370\52\10\0\363\52\15\0\37\52\61\0\3\52"+
    "\21\0\4\52\10\0\u018c\52\4\0\153\52\5\0\15\52"+
    "\3\0\11\52\7\0\12\52\3\0\2\52\306\0\5\52"+
    "\3\0\6\52\10\0\10\52\2\0\7\52\36\0\4\52"+
    "\224\0\3\52\273\0\125\52\1\0\107\52\1\0\2\52"+
    "\2\0\1\52\2\0\2\52\2\0\4\52\1\0\14\52"+
    "\1\0\1\52\1\0\7\52\1\0\101\52\1\0\4\52"+
    "\2\0\10\52\1\0\7\52\1\0\34\52\1\0\4\52"+
    "\1\0\5\52\1\0\1\52\3\0\7\52\1\0\u0154\52"+
    "\2\0\31\52\1\0\31\52\1\0\37\52\1\0\31\52"+
    "\1\0\37\52\1\0\31\52\1\0\37\52\1\0\31\52"+
    "\1\0\37\52\1\0\31\52\1\0\10\52\2\0\62\75"+
    "\67\52\4\0\62\52\10\0\1\52\16\0\1\52\26\0"+
    "\5\52\1\0\17\52\120\0\7\52\1\0\21\52\2\0"+
    "\7\52\1\0\2\52\1\0\5\52\325\0\55\52\3\0"+
    "\16\52\2\0\12\75\4\0\1\52\u0171\0\60\52\12\75"+
    "\6\0\305\52\13\0\7\52\51\0\114\52\4\0\12\75"+
    "\246\0\4\52\1\0\33\52\1\0\2\52\1\0\1\52"+
    "\2\0\1\52\1\0\12\52\1\0\4\52\1\0\1\52"+
    "\1\0\1\52\6\0\1\52\4\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\3\52\1\0\2\52\1\0\1\52"+
    "\2\0\1\52\1\0\1\52\1\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\2\52\1\0\1\52\2\0\4\52"+
    "\1\0\7\52\1\0\4\52\1\0\4\52\1\0\1\52"+
    "\1\0\12\52\1\0\21\52\5\0\3\52\1\0\5\52"+
    "\1\0\21\52\164\0\32\52\6\0\32\52\6\0\32\52"+
    "\166\0\327\52\51\0\65\52\13\0\336\52\2\0\u0182\52"+
    "\16\0\u0131\52\37\0\36\52\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\13\1\14\1\15\1\16\3\17"+
    "\1\20\1\21\1\22\1\23\4\0\1\24\25\0\2\17"+
    "\2\0\1\25\4\0\1\26\45\0\2\17\1\0\1\27"+
    "\2\0\1\30\26\0\1\31\11\0\1\32\10\0\1\33"+
    "\5\0\2\17\2\0\1\34\47\0\1\35\1\0\2\17"+
    "\20\0\1\36\25\0\1\37\3\0\2\17\1\0\1\40"+
    "\5\0\1\41\4\0\1\42\2\0\1\43\7\0\1\44"+
    "\6\0\1\45\10\0\1\46\4\0\2\17\6\0\1\47"+
    "\13\0\1\50\1\0\1\51\6\0\1\52\11\0\1\53"+
    "\1\0\2\17\12\0\1\54\4\0\1\55\17\0\1\56"+
    "\1\0\2\17\6\0\1\57\1\0\1\60\16\0\1\61"+
    "\2\0\1\62\5\0\2\17\16\0\1\63\10\0\1\64"+
    "\4\0\2\17\1\0\1\65\2\0\1\66\1\0\1\67"+
    "\11\0\1\70\1\0\1\71\14\0\2\17\2\0\1\72"+
    "\24\0\1\73\1\74\15\0\1\75\10\0\2\17\2\0"+
    "\1\76\7\0\1\77\10\0\1\100\3\0\1\101\1\102"+
    "\1\103\6\0\1\104\6\0\1\105\21\0\1\106\6\0"+
    "\1\107\5\0\1\110\3\0\1\111\10\0\1\112\3\0"+
    "\1\113\4\0\1\114\6\0\1\115\1\0\1\116\5\0"+
    "\1\117\1\0\1\120\1\0\1\121\3\0\1\122\1\0"+
    "\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[629];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\76\0\370\0\u0136\0\u0136"+
    "\0\76\0\76\0\76\0\76\0\u0174\0\u01b2\0\76\0\76"+
    "\0\76\0\u0174\0\u01f0\0\u022e\0\76\0\76\0\76\0\76"+
    "\0\174\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0"+
    "\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0"+
    "\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0"+
    "\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\76\0\u0972"+
    "\0\u09b0\0\u09ee\0\u0a2c\0\76\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\76\0\u141a\0\u1458\0\76"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838"+
    "\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\76\0\u19ea"+
    "\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda"+
    "\0\76\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\76\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\76\0\u2036\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0"+
    "\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0"+
    "\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0"+
    "\0\u28ee\0\u292c\0\u296a\0\76\0\u29a8\0\u29e6\0\u2a24\0\u2a62"+
    "\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52"+
    "\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\76"+
    "\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4"+
    "\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4"+
    "\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\76\0\u3358\0\u3396"+
    "\0\u33d4\0\u3412\0\u3450\0\u348e\0\76\0\u34cc\0\u350a\0\u3548"+
    "\0\u3586\0\u35c4\0\76\0\u3602\0\u3640\0\u367e\0\u36bc\0\76"+
    "\0\u36fa\0\u3738\0\76\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e"+
    "\0\u38ac\0\u38ea\0\76\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20"+
    "\0\u3a5e\0\76\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2"+
    "\0\u3c10\0\u3c4e\0\76\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84"+
    "\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\76"+
    "\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126"+
    "\0\u4164\0\u41a2\0\u41e0\0\76\0\u421e\0\76\0\u425c\0\u429a"+
    "\0\u42d8\0\u4316\0\u4354\0\u4392\0\76\0\u43d0\0\u440e\0\u444c"+
    "\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\76\0\u45fe"+
    "\0\u463c\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee"+
    "\0\u482c\0\u486a\0\u48a8\0\u48e6\0\76\0\u4924\0\u4962\0\u49a0"+
    "\0\u49de\0\76\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14\0\u4b52"+
    "\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42"+
    "\0\u4d80\0\76\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6\0\u4ef4"+
    "\0\u4f32\0\u4f70\0\u4fae\0\76\0\u4fec\0\76\0\u502a\0\u5068"+
    "\0\u50a6\0\u50e4\0\u5122\0\u5160\0\u519e\0\u51dc\0\u521a\0\u5258"+
    "\0\u5296\0\u52d4\0\u5312\0\u5350\0\76\0\u538e\0\u53cc\0\76"+
    "\0\u540a\0\u5448\0\u5486\0\u54c4\0\u5502\0\u5540\0\u557e\0\u55bc"+
    "\0\u55fa\0\u5638\0\u5676\0\u56b4\0\u56f2\0\u5730\0\u576e\0\u57ac"+
    "\0\u57ea\0\u5828\0\u5866\0\u58a4\0\u58e2\0\76\0\u5920\0\u595e"+
    "\0\u599c\0\u59da\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\76\0\u5b10"+
    "\0\u5b4e\0\u5b8c\0\u5bca\0\u5c08\0\u5c46\0\u5c84\0\76\0\u5cc2"+
    "\0\u5d00\0\76\0\u5d3e\0\76\0\u5d7c\0\u5dba\0\u5df8\0\u5e36"+
    "\0\u5e74\0\u5eb2\0\u5ef0\0\u5f2e\0\u5f6c\0\76\0\u5faa\0\76"+
    "\0\u5fe8\0\u6026\0\u6064\0\u60a2\0\u60e0\0\u611e\0\u615c\0\u619a"+
    "\0\u61d8\0\u6216\0\u6254\0\u6292\0\u62d0\0\u630e\0\u634c\0\u638a"+
    "\0\76\0\u63c8\0\u6406\0\u6444\0\u6482\0\u64c0\0\u64fe\0\u653c"+
    "\0\u657a\0\u65b8\0\u65f6\0\u6634\0\u6672\0\u66b0\0\u66ee\0\u672c"+
    "\0\u676a\0\u67a8\0\u67e6\0\u6824\0\u6862\0\u68a0\0\u68de\0\u691c"+
    "\0\u695a\0\u6998\0\u69d6\0\u6a14\0\u6a52\0\u6a90\0\u6ace\0\u6b0c"+
    "\0\u6b4a\0\u6b88\0\u6bc6\0\u6c04\0\76\0\u6c42\0\u6c80\0\u6cbe"+
    "\0\u6cfc\0\u6d3a\0\u6d78\0\u6db6\0\u6df4\0\u6e32\0\u6e70\0\u6eae"+
    "\0\u6eec\0\76\0\u6f2a\0\u6f68\0\u6fa6\0\u6fe4\0\u7022\0\u7060"+
    "\0\u709e\0\76\0\u70dc\0\u711a\0\u7158\0\u7196\0\u71d4\0\u7212"+
    "\0\u7250\0\u728e\0\76\0\u72cc\0\u730a\0\u7348\0\76\0\u0174"+
    "\0\u0174\0\u7386\0\u73c4\0\u7402\0\u7440\0\u747e\0\u74bc\0\76"+
    "\0\u74fa\0\u7538\0\u7576\0\u75b4\0\u75f2\0\u7630\0\76\0\u766e"+
    "\0\u76ac\0\u76ea\0\u7728\0\u7766\0\u77a4\0\u77e2\0\u7820\0\u785e"+
    "\0\u789c\0\u78da\0\u7918\0\u7956\0\u7994\0\u79d2\0\u7a10\0\u7a4e"+
    "\0\76\0\u7a8c\0\u7aca\0\u7b08\0\u7b46\0\u7b84\0\u7bc2\0\76"+
    "\0\u7c00\0\u7c3e\0\u7c7c\0\u7cba\0\u7cf8\0\76\0\u7d36\0\u7d74"+
    "\0\u7db2\0\76\0\u7df0\0\u7e2e\0\u7e6c\0\u7eaa\0\u7ee8\0\u7f26"+
    "\0\u7f64\0\u7fa2\0\76\0\u7fe0\0\u801e\0\u805c\0\76\0\u809a"+
    "\0\u80d8\0\u8116\0\u8154\0\76\0\u8192\0\u81d0\0\u820e\0\u824c"+
    "\0\u828a\0\u82c8\0\76\0\u8306\0\76\0\u8344\0\u8382\0\u83c0"+
    "\0\u83fe\0\u843c\0\76\0\u847a\0\76\0\u84b8\0\76\0\u84f6"+
    "\0\u8534\0\u8572\0\76\0\u85b0\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[629];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\5\22\1\23\2\22\1\24\21\22\1\25\1\26"+
    "\4\22\1\23\1\24\6\22\1\27\1\2\1\30\1\22"+
    "\77\0\3\31\1\0\1\32\71\0\1\31\1\3\1\31"+
    "\1\0\1\32\70\0\1\33\3\34\1\33\1\35\1\33"+
    "\1\36\3\33\1\36\1\33\1\37\1\40\3\33\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\2\33\1\47\1\50"+
    "\1\33\1\51\1\52\1\53\1\54\1\55\1\33\1\56"+
    "\1\57\1\60\1\61\7\33\1\36\14\33\1\0\1\33"+
    "\1\62\6\0\1\7\1\0\1\7\4\0\2\7\3\0"+
    "\32\7\2\0\14\7\3\0\1\7\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\32\22\2\0\14\22\3\0"+
    "\1\22\6\0\1\7\1\0\1\7\4\0\2\16\3\0"+
    "\32\22\2\0\14\22\3\0\1\22\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\10\22\1\63\21\22\2\0"+
    "\5\22\1\63\6\22\3\0\1\22\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\15\22\1\64\14\22\2\0"+
    "\7\22\1\64\4\22\3\0\1\22\1\0\3\32\1\0"+
    "\1\35\70\0\2\65\2\66\1\65\1\67\65\65\1\70"+
    "\2\65\1\33\3\34\1\33\1\35\7\33\1\37\1\40"+
    "\3\33\1\41\1\42\1\43\1\44\1\45\1\46\2\33"+
    "\1\47\1\50\1\33\1\51\1\52\1\53\1\54\1\55"+
    "\1\33\1\56\1\57\1\60\1\61\24\33\1\70\1\33"+
    "\1\62\1\0\3\35\72\0\2\65\2\66\1\65\1\67"+
    "\1\65\1\71\3\65\1\71\1\65\2\71\3\65\32\71"+
    "\2\65\14\71\1\65\1\70\1\65\1\71\1\65\1\72"+
    "\2\73\1\65\1\74\7\65\2\75\54\65\1\70\1\65"+
    "\1\75\1\65\1\72\2\73\1\65\1\74\7\65\2\76"+
    "\54\65\1\70\1\65\1\75\2\65\2\66\1\65\1\67"+
    "\22\65\1\77\4\65\1\100\5\65\1\101\27\65\1\70"+
    "\4\65\2\66\1\65\1\67\32\65\1\102\32\65\1\70"+
    "\4\65\2\66\1\65\1\67\14\65\1\103\3\65\1\104"+
    "\2\65\1\105\3\65\1\106\2\65\1\107\2\65\1\110"+
    "\27\65\1\70\4\65\2\66\1\65\1\67\14\65\1\111"+
    "\3\65\1\112\44\65\1\70\4\65\2\66\1\65\1\67"+
    "\27\65\1\113\35\65\1\70\4\65\2\66\1\65\1\67"+
    "\20\65\1\114\3\65\1\115\5\65\1\116\32\65\1\70"+
    "\4\65\2\66\1\65\1\67\17\65\1\117\10\65\1\120"+
    "\1\121\13\65\1\122\17\65\1\70\4\65\2\66\1\65"+
    "\1\67\40\65\1\123\24\65\1\70\4\65\2\66\1\65"+
    "\1\67\24\65\1\124\5\65\1\125\32\65\1\70\4\65"+
    "\2\66\1\65\1\67\32\65\1\126\32\65\1\70\4\65"+
    "\2\66\1\65\1\67\32\65\1\127\5\65\1\130\24\65"+
    "\1\70\4\65\2\66\1\65\1\67\33\65\1\131\31\65"+
    "\1\70\4\65\2\66\1\65\1\67\14\65\1\132\50\65"+
    "\1\70\4\65\2\66\1\65\1\67\14\65\1\133\3\65"+
    "\1\134\44\65\1\70\4\65\2\66\1\65\1\67\24\65"+
    "\1\135\40\65\1\70\4\65\2\66\1\65\1\67\20\65"+
    "\1\136\3\65\1\137\40\65\1\70\4\65\2\66\1\65"+
    "\1\67\35\65\1\140\1\141\26\65\1\70\4\65\2\66"+
    "\1\65\1\67\7\65\2\75\54\65\1\70\1\65\1\75"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\15\22"+
    "\1\142\14\22\2\0\7\22\1\142\4\22\3\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\10\22"+
    "\1\143\21\22\2\0\5\22\1\143\6\22\3\0\1\22"+
    "\2\65\2\144\1\65\1\145\65\65\1\146\2\65\5\66"+
    "\1\67\65\66\1\70\2\66\5\147\1\0\65\147\1\0"+
    "\2\147\2\65\2\144\1\65\1\150\1\65\1\71\3\65"+
    "\1\71\1\65\2\71\3\65\32\71\2\65\14\71\1\65"+
    "\1\146\1\65\1\71\1\65\1\72\2\151\1\65\1\74"+
    "\65\65\1\146\2\65\1\66\3\73\1\66\1\74\65\66"+
    "\1\70\2\66\2\65\2\144\1\65\1\145\7\65\2\152"+
    "\54\65\1\146\1\65\1\152\1\65\1\72\2\151\1\65"+
    "\1\74\7\65\2\153\54\65\1\146\1\65\1\152\2\65"+
    "\2\144\1\65\1\145\35\65\1\154\27\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\155\40\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\156\44\65\1\146\4\65"+
    "\2\144\1\65\1\145\37\65\1\157\25\65\1\146\4\65"+
    "\2\144\1\65\1\145\30\65\1\160\34\65\1\146\4\65"+
    "\2\144\1\65\1\145\31\65\1\161\33\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\162\44\65\1\146\4\65"+
    "\2\144\1\65\1\145\14\65\1\163\50\65\1\146\4\65"+
    "\2\144\1\65\1\145\27\65\1\164\1\165\34\65\1\146"+
    "\4\65\2\144\1\65\1\145\20\65\1\166\44\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\167\27\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\170\27\65\1\146"+
    "\4\65\2\144\1\65\1\145\24\65\1\171\40\65\1\146"+
    "\4\65\2\144\1\65\1\145\16\65\1\172\46\65\1\146"+
    "\4\65\2\144\1\65\1\145\16\65\1\173\10\65\1\174"+
    "\35\65\1\146\4\65\2\144\1\65\1\145\35\65\1\175"+
    "\27\65\1\146\3\65\1\117\2\176\1\65\1\177\65\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\200\50\65"+
    "\1\146\4\65\2\144\1\65\1\145\17\65\1\201\45\65"+
    "\1\146\4\65\2\144\1\65\1\145\34\65\1\202\30\65"+
    "\1\146\4\65\2\144\1\65\1\145\36\65\1\203\26\65"+
    "\1\146\4\65\2\144\1\65\1\145\22\65\1\204\42\65"+
    "\1\146\4\65\2\144\1\65\1\145\22\65\1\205\42\65"+
    "\1\146\4\65\2\144\1\65\1\145\17\65\1\206\45\65"+
    "\1\146\3\65\1\207\2\210\1\65\1\211\30\65\1\212"+
    "\34\65\1\146\4\65\2\144\1\65\1\145\20\65\1\213"+
    "\44\65\1\146\4\65\2\144\1\65\1\145\16\65\1\214"+
    "\46\65\1\146\4\65\2\144\1\65\1\145\35\65\1\215"+
    "\1\216\26\65\1\146\4\65\2\144\1\65\1\145\17\65"+
    "\1\217\45\65\1\146\4\65\2\144\1\65\1\145\34\65"+
    "\1\220\30\65\1\146\3\65\1\135\2\221\1\65\1\222"+
    "\65\65\1\146\4\65\2\144\1\65\1\145\30\65\1\223"+
    "\12\65\1\224\21\65\1\146\4\65\2\144\1\65\1\145"+
    "\37\65\1\225\25\65\1\146\4\65\2\144\1\65\1\145"+
    "\27\65\1\226\35\65\1\146\4\65\2\144\1\65\1\145"+
    "\40\65\1\227\24\65\1\146\2\65\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\32\22\2\0\1\230\13\22"+
    "\3\0\1\22\6\0\1\7\1\0\1\7\4\0\2\22"+
    "\3\0\32\22\2\0\1\231\13\22\3\0\1\22\1\66"+
    "\3\144\1\66\1\145\65\66\1\146\2\66\1\232\3\233"+
    "\1\232\1\0\65\232\1\0\2\232\5\147\1\234\65\147"+
    "\1\70\2\147\1\66\3\151\1\66\1\74\65\66\1\146"+
    "\2\66\2\65\2\144\1\65\1\145\7\65\2\235\54\65"+
    "\1\146\1\65\1\235\1\65\1\72\2\151\1\65\1\74"+
    "\7\65\2\236\54\65\1\146\1\65\1\235\2\65\2\144"+
    "\1\65\1\145\20\65\1\237\44\65\1\146\4\65\2\144"+
    "\1\65\1\145\31\65\1\240\33\65\1\146\4\65\2\144"+
    "\1\65\1\145\14\65\1\241\50\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\242\32\65\1\146\4\65\2\144"+
    "\1\65\1\145\33\65\1\243\31\65\1\146\4\65\2\144"+
    "\1\65\1\145\37\65\1\244\25\65\1\146\4\65\2\144"+
    "\1\65\1\145\16\65\1\245\46\65\1\146\4\65\2\144"+
    "\1\65\1\145\36\65\1\246\26\65\1\146\4\65\2\144"+
    "\1\65\1\145\40\65\1\247\24\65\1\146\4\65\2\144"+
    "\1\65\1\145\15\65\1\250\47\65\1\146\4\65\2\144"+
    "\1\65\1\145\14\65\1\251\2\65\1\252\45\65\1\146"+
    "\4\65\2\144\1\65\1\145\26\65\1\253\36\65\1\146"+
    "\4\65\2\144\1\65\1\145\20\65\1\254\44\65\1\146"+
    "\4\65\2\144\1\65\1\145\30\65\1\255\34\65\1\146"+
    "\4\65\2\144\1\65\1\145\23\65\1\256\41\65\1\146"+
    "\4\65\2\144\1\65\1\145\23\65\1\257\41\65\1\146"+
    "\4\65\2\144\1\65\1\145\14\65\1\260\50\65\1\146"+
    "\4\65\2\144\1\65\1\145\30\65\1\261\34\65\1\146"+
    "\2\65\1\66\3\176\1\66\1\177\65\66\1\146\2\66"+
    "\2\65\2\144\1\65\1\145\22\65\1\262\42\65\1\146"+
    "\4\65\2\144\1\65\1\145\24\65\1\263\40\65\1\146"+
    "\4\65\2\144\1\65\1\145\40\65\1\264\24\65\1\146"+
    "\4\65\2\144\1\65\1\145\37\65\1\265\25\65\1\146"+
    "\4\65\2\144\1\65\1\145\23\65\1\266\41\65\1\146"+
    "\4\65\2\144\1\65\1\145\24\65\1\267\40\65\1\146"+
    "\4\65\2\144\1\65\1\145\24\65\1\270\40\65\1\146"+
    "\3\65\1\207\2\210\1\65\1\211\65\65\1\146\2\65"+
    "\1\66\3\210\1\66\1\211\65\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\15\65\1\271\47\65\1\146\4\65"+
    "\2\144\1\65\1\145\41\65\1\272\23\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\273\40\65\1\146\4\65"+
    "\2\144\1\65\1\145\14\65\1\274\50\65\1\146\4\65"+
    "\2\144\1\65\1\145\36\65\1\275\26\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\276\40\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\277\24\65\1\146\2\65"+
    "\1\66\3\221\1\66\1\222\65\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\14\65\1\300\50\65\1\146\4\65"+
    "\2\144\1\65\1\145\37\65\1\301\25\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\302\24\65\1\146\3\65"+
    "\1\226\2\303\1\65\1\304\65\65\1\146\4\65\2\144"+
    "\1\65\1\145\14\65\1\305\50\65\1\146\2\65\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\22\22\1\306"+
    "\7\22\2\0\11\22\1\306\2\22\3\0\1\22\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\22\22\1\307"+
    "\7\22\2\0\11\22\1\307\2\22\3\0\1\22\2\310"+
    "\2\147\1\310\1\234\65\310\1\70\2\310\1\232\3\233"+
    "\1\232\1\234\65\232\1\70\2\232\2\65\2\144\1\65"+
    "\1\145\5\65\1\311\57\65\1\146\3\65\1\72\2\151"+
    "\1\65\1\74\5\65\1\311\1\65\2\312\54\65\1\146"+
    "\4\65\2\144\1\65\1\145\22\65\1\313\42\65\1\146"+
    "\4\65\2\144\1\65\1\145\20\65\1\314\44\65\1\146"+
    "\4\65\2\144\1\65\1\145\50\65\1\315\14\65\1\146"+
    "\4\65\2\144\1\65\1\145\31\65\1\316\33\65\1\146"+
    "\4\65\2\144\1\65\1\145\32\65\1\317\32\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\320\27\65\1\146"+
    "\4\65\2\144\1\65\1\145\26\65\1\321\36\65\1\146"+
    "\4\65\2\144\1\65\1\145\20\65\1\322\44\65\1\146"+
    "\4\65\2\144\1\65\1\145\30\65\1\323\34\65\1\146"+
    "\4\65\2\144\1\65\1\145\32\65\1\324\32\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\325\27\65\1\146"+
    "\4\65\2\144\1\65\1\145\20\65\1\326\44\65\1\146"+
    "\3\65\1\253\2\327\1\65\1\330\65\65\1\146\4\65"+
    "\2\144\1\65\1\145\16\65\1\331\46\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\332\40\65\1\146\4\65"+
    "\2\144\1\65\1\145\14\65\1\333\50\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\334\44\65\1\146\4\65"+
    "\2\144\1\65\1\145\36\65\1\335\26\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\336\24\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\337\44\65\1\146\4\65"+
    "\2\144\1\65\1\145\16\65\1\340\46\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\341\40\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\342\40\65\1\146\4\65"+
    "\2\144\1\65\1\145\37\65\1\343\25\65\1\146\4\65"+
    "\2\144\1\65\1\145\31\65\1\344\33\65\1\146\4\65"+
    "\2\144\1\65\1\145\21\65\1\345\43\65\1\146\4\65"+
    "\2\144\1\65\1\145\35\65\1\346\27\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\347\32\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\350\32\65\1\146\4\65"+
    "\2\144\1\65\1\145\30\65\1\351\34\65\1\146\4\65"+
    "\2\144\1\65\1\145\42\65\1\352\22\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\353\32\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\354\44\65\1\146\3\65"+
    "\1\300\2\355\1\65\1\356\65\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\357\32\65\1\146\4\65\2\144"+
    "\1\65\1\145\27\65\1\360\35\65\1\146\2\65\1\66"+
    "\3\303\1\66\1\304\65\66\1\146\2\66\2\65\2\144"+
    "\1\65\1\145\35\65\1\361\27\65\1\146\2\65\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\16\22\1\362"+
    "\13\22\2\0\10\22\1\362\3\22\3\0\1\22\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\16\22\1\363"+
    "\13\22\2\0\10\22\1\363\3\22\3\0\1\22\2\310"+
    "\2\364\1\310\1\365\65\310\1\146\2\310\2\65\2\144"+
    "\1\65\1\145\7\65\2\366\54\65\1\146\1\65\1\366"+
    "\1\65\1\72\2\151\1\65\1\74\7\65\2\312\54\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\367\50\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\370\50\65"+
    "\1\146\4\65\2\144\1\65\1\145\37\65\1\371\25\65"+
    "\1\146\3\65\1\316\2\372\1\65\1\373\65\65\1\146"+
    "\4\65\2\144\1\65\1\145\50\65\1\374\14\65\1\146"+
    "\4\65\2\144\1\65\1\145\32\65\1\375\32\65\1\146"+
    "\4\65\2\144\1\65\1\145\15\65\1\376\47\65\1\146"+
    "\3\65\1\322\2\377\1\65\1\u0100\65\65\1\146\4\65"+
    "\2\144\1\65\1\145\31\65\1\u0101\33\65\1\146\3\65"+
    "\1\324\2\u0102\1\65\1\u0103\65\65\1\146\4\65\2\144"+
    "\1\65\1\145\50\65\1\u0104\14\65\1\146\4\65\2\144"+
    "\1\65\1\145\31\65\1\u0105\33\65\1\146\2\65\1\66"+
    "\3\327\1\66\1\330\65\66\1\146\2\66\2\65\2\144"+
    "\1\65\1\145\23\65\1\u0106\41\65\1\146\4\65\2\144"+
    "\1\65\1\145\31\65\1\u0107\33\65\1\146\4\65\2\144"+
    "\1\65\1\145\50\65\1\u0108\14\65\1\146\4\65\2\144"+
    "\1\65\1\145\35\65\1\u0109\27\65\1\146\3\65\1\335"+
    "\2\u010a\1\65\1\u010b\65\65\1\146\4\65\2\144\1\65"+
    "\1\145\27\65\1\u010c\35\65\1\146\4\65\2\144\1\65"+
    "\1\145\31\65\1\u010d\33\65\1\146\4\65\2\144\1\65"+
    "\1\145\20\65\1\u010e\44\65\1\146\4\65\2\144\1\65"+
    "\1\145\20\65\1\u010f\44\65\1\146\4\65\2\144\1\65"+
    "\1\145\21\65\1\u0110\43\65\1\146\3\65\1\343\2\u0111"+
    "\1\65\1\u0112\65\65\1\146\4\65\2\144\1\65\1\145"+
    "\50\65\1\u0113\14\65\1\146\4\65\2\144\1\65\1\145"+
    "\24\65\1\u0114\40\65\1\146\4\65\2\144\1\65\1\145"+
    "\20\65\1\u0115\44\65\1\146\4\65\2\144\1\65\1\145"+
    "\50\65\1\u0116\14\65\1\146\4\65\2\144\1\65\1\145"+
    "\31\65\1\u0117\33\65\1\146\4\65\2\144\1\65\1\145"+
    "\20\65\1\u0118\44\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u0119\32\65\1\146\3\65\1\353\2\u011a\1\65"+
    "\1\u011b\65\65\1\146\4\65\2\144\1\65\1\145\35\65"+
    "\1\u011c\27\65\1\146\2\65\1\66\3\355\1\66\1\356"+
    "\65\66\1\146\2\66\2\65\2\144\1\65\1\145\50\65"+
    "\1\u011d\14\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\u011e\32\65\1\146\4\65\2\144\1\65\1\145\24\65"+
    "\1\u011f\40\65\1\146\2\65\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\13\22\1\u0120\16\22\2\0\6\22"+
    "\1\u0120\5\22\3\0\1\22\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\13\22\1\u0121\16\22\2\0\6\22"+
    "\1\u0121\5\22\3\0\1\22\1\147\3\364\1\147\1\365"+
    "\65\147\1\146\2\147\2\65\2\144\1\65\1\145\7\65"+
    "\2\u0122\54\65\1\146\1\65\1\u0122\2\65\2\144\1\65"+
    "\1\145\35\65\1\u0123\27\65\1\146\4\65\2\144\1\65"+
    "\1\145\16\65\1\u0124\46\65\1\146\4\65\2\144\1\65"+
    "\1\145\20\65\1\u0125\44\65\1\146\2\65\1\66\3\372"+
    "\1\66\1\373\65\66\1\146\2\66\2\65\2\144\1\65"+
    "\1\145\37\65\1\u0126\25\65\1\146\3\65\1\375\2\u0127"+
    "\1\65\1\u0128\65\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u0129\32\65\1\146\2\65\1\66\3\377\1\66"+
    "\1\u0100\65\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\14\65\1\u012a\50\65\1\146\2\65\1\66\3\u0102\1\66"+
    "\1\u0103\65\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\40\65\1\u012b\24\65\1\146\4\65\2\144\1\65\1\145"+
    "\16\65\1\u012c\46\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\u012d\50\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\u012e\50\65\1\146\4\65\2\144\1\65\1\145"+
    "\16\65\1\u012f\11\65\1\u0130\34\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u0131\32\65\1\146\2\65\1\66"+
    "\3\u010a\1\66\1\u010b\65\66\1\146\2\66\2\65\2\144"+
    "\1\65\1\145\14\65\1\u0132\50\65\1\146\3\65\1\u010d"+
    "\2\u0133\1\65\1\u0134\65\65\1\146\3\65\1\u010e\2\u0135"+
    "\1\65\1\u0136\65\65\1\146\4\65\2\144\1\65\1\145"+
    "\35\65\1\u0137\27\65\1\146\4\65\2\144\1\65\1\145"+
    "\24\65\1\u0138\40\65\1\146\2\65\1\66\3\u0111\1\66"+
    "\1\u0112\65\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\40\65\1\u0139\24\65\1\146\4\65\2\144\1\65\1\145"+
    "\16\65\1\u013a\46\65\1\146\3\65\1\u013b\2\u013c\1\65"+
    "\1\u013d\50\65\1\u013e\14\65\1\146\4\65\2\144\1\65"+
    "\1\145\21\65\1\u013f\11\65\1\u0140\31\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\u0141\44\65\1\146\4\65"+
    "\2\144\1\65\1\145\37\65\1\u0142\25\65\1\146\4\65"+
    "\2\144\1\65\1\145\35\65\1\u0143\27\65\1\146\2\65"+
    "\1\66\3\u011a\1\66\1\u011b\65\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\24\65\1\u0144\40\65\1\146\4\65"+
    "\2\144\1\65\1\145\41\65\1\u0145\23\65\1\146\3\65"+
    "\1\u011e\2\u0146\1\65\1\u0147\65\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u0148\32\65\1\146\2\65\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\10\22\1\u0149"+
    "\21\22\2\0\5\22\1\u0149\6\22\3\0\1\22\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\10\22\1\u014a"+
    "\21\22\2\0\5\22\1\u014a\6\22\3\0\1\22\2\65"+
    "\2\144\1\65\1\145\5\65\1\u014b\57\65\1\146\4\65"+
    "\2\144\1\65\1\145\50\65\1\u014c\14\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\u014d\40\65\1\146\4\65"+
    "\2\144\1\65\1\145\43\65\1\u014e\21\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\u014f\44\65\1\146\2\65"+
    "\1\66\3\u0127\1\66\1\u0128\65\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\43\65\1\u0150\21\65\1\146\4\65"+
    "\2\144\1\65\1\145\36\65\1\u0151\26\65\1\146\4\65"+
    "\2\144\1\65\1\145\36\65\1\u0152\26\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\u0153\40\65\1\146\3\65"+
    "\1\u012d\2\u0154\1\65\1\u0155\65\65\1\146\4\65\2\144"+
    "\1\65\1\145\35\65\1\u0156\27\65\1\146\4\65\2\144"+
    "\1\65\1\145\35\65\1\u0157\27\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u0158\32\65\1\146\3\65\1\u0131"+
    "\2\u0159\1\65\1\u015a\65\65\1\146\4\65\2\144\1\65"+
    "\1\145\35\65\1\u015b\27\65\1\146\2\65\1\66\3\u0133"+
    "\1\66\1\u0134\65\66\1\146\3\66\3\u0135\1\66\1\u0136"+
    "\65\66\1\146\2\66\2\65\2\144\1\65\1\145\17\65"+
    "\1\u015c\45\65\1\146\4\65\2\144\1\65\1\145\16\65"+
    "\1\u015d\46\65\1\146\4\65\2\144\1\65\1\145\36\65"+
    "\1\u015e\26\65\1\146\4\65\2\144\1\65\1\145\14\65"+
    "\1\u015f\50\65\1\146\3\65\1\u013b\2\u013c\1\65\1\u013d"+
    "\65\65\1\146\2\65\1\66\3\u013c\1\66\1\u013d\65\66"+
    "\1\146\2\66\2\65\2\144\1\65\1\145\16\65\1\u0160"+
    "\46\65\1\146\4\65\2\144\1\65\1\145\32\65\1\u0161"+
    "\32\65\1\146\4\65\2\144\1\65\1\145\14\65\1\u0162"+
    "\50\65\1\146\4\65\2\144\1\65\1\145\36\65\1\u0163"+
    "\26\65\1\146\4\65\2\144\1\65\1\145\35\65\1\u0164"+
    "\27\65\1\146\4\65\2\144\1\65\1\145\17\65\1\u0165"+
    "\45\65\1\146\4\65\2\144\1\65\1\145\17\65\1\u0166"+
    "\45\65\1\146\4\65\2\144\1\65\1\145\24\65\1\u0167"+
    "\40\65\1\146\2\65\1\66\3\u0146\1\66\1\u0147\65\66"+
    "\1\146\2\66\1\65\1\u0168\2\u0169\1\65\1\u016a\50\65"+
    "\1\u016b\14\65\1\146\2\65\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\2\22\1\u016c\27\22\2\0\1\22"+
    "\1\u016c\12\22\3\0\1\22\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\2\22\1\u016d\27\22\2\0\1\22"+
    "\1\u016d\12\22\3\0\1\22\2\65\2\144\1\65\1\145"+
    "\7\65\2\u016e\54\65\1\146\1\65\1\u016e\2\65\2\144"+
    "\1\65\1\145\16\65\1\u016f\46\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u0170\32\65\1\146\4\65\2\144"+
    "\1\65\1\145\37\65\1\u0171\25\65\1\146\4\65\2\144"+
    "\1\65\1\145\43\65\1\u0172\21\65\1\146\3\65\1\u0150"+
    "\2\u0173\1\65\1\u0174\65\65\1\146\3\65\1\u0151\2\u0175"+
    "\1\65\1\u0176\65\65\1\146\4\65\2\144\1\65\1\145"+
    "\40\65\1\u0177\24\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\u0178\50\65\1\146\2\65\1\66\3\u0154\1\66"+
    "\1\u0155\65\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\50\65\1\u0179\14\65\1\146\4\65\2\144\1\65\1\145"+
    "\20\65\1\u017a\44\65\1\146\4\65\2\144\1\65\1\145"+
    "\17\65\1\u017b\45\65\1\146\2\65\1\66\3\u0159\1\66"+
    "\1\u015a\65\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\24\65\1\u017c\40\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\u017d\50\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\u017e\50\65\1\146\4\65\2\144\1\65\1\145"+
    "\40\65\1\u017f\24\65\1\146\4\65\2\144\1\65\1\145"+
    "\35\65\1\u0180\27\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\u0181\50\65\1\146\4\65\2\144\1\65\1\145"+
    "\35\65\1\u0182\27\65\1\146\4\65\2\144\1\65\1\145"+
    "\36\65\1\u0183\26\65\1\146\3\65\1\u0163\2\u0184\1\65"+
    "\1\u0185\65\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\u0186\32\65\1\146\3\65\1\u0165\2\u0187\1\65\1\u0188"+
    "\65\65\1\146\4\65\2\144\1\65\1\145\32\65\1\u0189"+
    "\32\65\1\146\4\65\2\144\1\65\1\145\36\65\1\u018a"+
    "\26\65\1\146\3\65\1\u0168\2\u0169\1\65\1\u016a\65\65"+
    "\1\146\2\65\1\66\3\u0169\1\66\1\u016a\65\66\1\146"+
    "\2\66\2\65\2\144\1\65\1\145\14\65\1\u018b\1\65"+
    "\1\u018c\12\65\1\u018d\33\65\1\146\2\65\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\10\22\1\u018e\21\22"+
    "\2\0\5\22\1\u018e\6\22\3\0\1\22\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\10\22\1\u018f\21\22"+
    "\2\0\5\22\1\u018f\6\22\3\0\1\22\2\65\2\144"+
    "\1\65\1\145\7\65\2\u0190\54\65\1\146\1\65\1\u0190"+
    "\2\65\2\144\1\65\1\145\32\65\1\u0191\32\65\1\146"+
    "\4\65\2\144\1\65\1\145\31\65\1\u0192\33\65\1\146"+
    "\4\65\2\144\1\65\1\145\32\65\1\u0193\32\65\1\146"+
    "\4\65\2\144\1\65\1\145\37\65\1\u0194\25\65\1\146"+
    "\2\65\1\66\3\u0173\1\66\1\u0174\65\66\1\146\3\66"+
    "\3\u0175\1\66\1\u0176\65\66\1\146\2\66\2\65\2\144"+
    "\1\65\1\145\14\65\1\u0195\50\65\1\146\4\65\2\144"+
    "\1\65\1\145\27\65\1\u0196\35\65\1\146\4\65\2\144"+
    "\1\65\1\145\16\65\1\u0197\2\65\1\u0198\16\65\1\u0199"+
    "\24\65\1\146\4\65\2\144\1\65\1\145\14\65\1\u019a"+
    "\50\65\1\146\4\65\2\144\1\65\1\145\24\65\1\u019b"+
    "\40\65\1\146\4\65\2\144\1\65\1\145\32\65\1\u019c"+
    "\32\65\1\146\3\65\1\u017d\2\u019d\1\65\1\u019e\65\65"+
    "\1\146\4\65\2\144\1\65\1\145\35\65\1\u019f\27\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\u01a0\50\65"+
    "\1\146\4\65\2\144\1\65\1\145\50\65\1\u01a1\14\65"+
    "\1\146\4\65\2\144\1\65\1\145\30\65\1\u01a2\34\65"+
    "\1\146\4\65\2\144\1\65\1\145\30\65\1\u01a3\34\65"+
    "\1\146\4\65\2\144\1\65\1\145\36\65\1\u01a4\26\65"+
    "\1\146\2\65\1\66\3\u0184\1\66\1\u0185\65\66\1\146"+
    "\2\66\2\65\2\144\1\65\1\145\36\65\1\u01a5\26\65"+
    "\1\146\2\65\1\66\3\u0187\1\66\1\u0188\65\66\1\146"+
    "\2\66\1\65\1\u0189\2\u01a6\1\65\1\u01a7\65\65\1\146"+
    "\4\65\2\144\1\65\1\145\24\65\1\u01a8\40\65\1\146"+
    "\4\65\2\144\1\65\1\145\31\65\1\u01a9\33\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\u01aa\27\65\1\146"+
    "\4\65\2\144\1\65\1\145\40\65\1\u01ab\24\65\1\146"+
    "\2\65\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\23\22\1\u01ac\6\22\2\0\12\22\1\u01ac\1\22\3\0"+
    "\1\22\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\23\22\1\u01ad\6\22\2\0\12\22\1\u01ad\1\22\3\0"+
    "\1\22\1\65\1\u0190\2\u01ae\1\65\1\u01af\65\65\1\146"+
    "\4\65\2\144\1\65\1\145\30\65\1\u01b0\34\65\1\146"+
    "\3\65\1\u0192\2\u01b1\1\65\1\u01b2\65\65\1\146\3\65"+
    "\1\u0193\2\u01b3\1\65\1\u01b4\65\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u01b5\32\65\1\146\4\65\2\144"+
    "\1\65\1\145\35\65\1\u01b6\27\65\1\146\4\65\2\144"+
    "\1\65\1\145\20\65\1\u01b7\44\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u01b8\32\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u01b9\32\65\1\146\4\65\2\144"+
    "\1\65\1\145\36\65\1\u01ba\26\65\1\146\4\65\2\144"+
    "\1\65\1\145\16\65\1\u01bb\46\65\1\146\4\65\2\144"+
    "\1\65\1\145\21\65\1\u01bc\43\65\1\146\3\65\1\u019c"+
    "\2\u01bd\1\65\1\u01be\65\65\1\146\2\65\1\66\3\u019d"+
    "\1\66\1\u019e\65\66\1\146\2\66\1\65\1\u019f\2\u01bf"+
    "\1\65\1\u01c0\65\65\1\146\4\65\2\144\1\65\1\145"+
    "\35\65\1\u01c1\27\65\1\146\4\65\2\144\1\65\1\145"+
    "\16\65\1\u01c2\2\65\1\u01c3\16\65\1\u01c4\24\65\1\146"+
    "\4\65\2\144\1\65\1\145\33\65\1\u01c5\31\65\1\146"+
    "\4\65\2\144\1\65\1\145\40\65\1\u01c6\24\65\1\146"+
    "\4\65\2\144\1\65\1\145\42\65\1\u01c7\22\65\1\146"+
    "\4\65\2\144\1\65\1\145\50\65\1\u01c8\14\65\1\146"+
    "\2\65\1\66\3\u01a6\1\66\1\u01a7\65\66\1\146\2\66"+
    "\2\65\2\144\1\65\1\145\15\65\1\u01c9\47\65\1\146"+
    "\4\65\2\144\1\65\1\145\37\65\1\u01ca\25\65\1\146"+
    "\4\65\2\144\1\65\1\145\20\65\1\u01cb\44\65\1\146"+
    "\4\65\2\144\1\65\1\145\20\65\1\u01cc\44\65\1\146"+
    "\2\65\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\24\22\1\u01cd\5\22\2\0\13\22\1\u01cd\3\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\24\22"+
    "\1\u01ce\5\22\2\0\13\22\1\u01ce\3\0\1\22\1\66"+
    "\3\u01ae\1\66\1\u01af\65\66\1\146\2\66\2\65\2\144"+
    "\1\65\1\145\33\65\1\u01cf\31\65\1\146\2\65\1\66"+
    "\3\u01b1\1\66\1\u01b2\65\66\1\146\3\66\3\u01b3\1\66"+
    "\1\u01b4\65\66\1\146\2\66\1\65\1\u01b5\2\u01d0\1\65"+
    "\1\u01d1\65\65\1\146\4\65\2\144\1\65\1\145\24\65"+
    "\1\u01d2\40\65\1\146\4\65\2\144\1\65\1\145\36\65"+
    "\1\u01d3\26\65\1\146\4\65\2\144\1\65\1\145\30\65"+
    "\1\u01d4\34\65\1\146\4\65\2\144\1\65\1\145\35\65"+
    "\1\u01d5\27\65\1\146\4\65\2\144\1\65\1\145\40\65"+
    "\1\u01d6\24\65\1\146\4\65\2\144\1\65\1\145\24\65"+
    "\1\u01d7\40\65\1\146\4\65\2\144\1\65\1\145\24\65"+
    "\1\u01d8\40\65\1\146\2\65\1\66\3\u01bd\1\66\1\u01be"+
    "\65\66\1\146\3\66\3\u01bf\1\66\1\u01c0\65\66\1\146"+
    "\2\66\2\65\2\144\1\65\1\145\24\65\1\u01d9\40\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\u01da\32\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\u01db\32\65"+
    "\1\146\4\65\2\144\1\65\1\145\36\65\1\u01dc\26\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\u01dd\32\65"+
    "\1\146\4\65\2\144\1\65\1\145\27\65\1\u01de\35\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\u01df\32\65"+
    "\1\146\4\65\2\144\1\65\1\145\16\65\1\u01e0\2\65"+
    "\1\u01e1\43\65\1\146\4\65\2\144\1\65\1\145\27\65"+
    "\1\u01e2\35\65\1\146\4\65\2\144\1\65\1\145\24\65"+
    "\1\u01e3\40\65\1\146\4\65\2\144\1\65\1\145\14\65"+
    "\1\u01e4\50\65\1\146\4\65\2\144\1\65\1\145\41\65"+
    "\1\u01e5\23\65\1\146\2\65\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\3\22\1\u01e6\26\22\2\0\2\22"+
    "\1\u01e6\11\22\3\0\1\22\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\3\22\1\u01e7\26\22\2\0\2\22"+
    "\1\u01e7\11\22\3\0\1\22\2\65\2\144\1\65\1\145"+
    "\32\65\1\u01e8\32\65\1\146\2\65\1\66\3\u01d0\1\66"+
    "\1\u01d1\65\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\32\65\1\u01e9\32\65\1\146\4\65\2\144\1\65\1\145"+
    "\50\65\1\u01ea\14\65\1\146\4\65\2\144\1\65\1\145"+
    "\33\65\1\u01eb\31\65\1\146\4\65\2\144\1\65\1\145"+
    "\30\65\1\u01ec\34\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\u01ed\50\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u01ee\32\65\1\146\4\65\2\144\1\65\1\145"+
    "\16\65\1\u01ef\46\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u01f0\32\65\1\146\4\65\2\144\1\65\1\145"+
    "\30\65\1\u01f1\34\65\1\146\4\65\2\144\1\65\1\145"+
    "\35\65\1\u01f2\27\65\1\146\4\65\2\144\1\65\1\145"+
    "\40\65\1\u01f3\24\65\1\146\3\65\1\u01dd\2\u01f4\1\65"+
    "\1\u01f5\65\65\1\146\4\65\2\144\1\65\1\145\14\65"+
    "\1\u01f6\50\65\1\146\4\65\2\144\1\65\1\145\35\65"+
    "\1\u01f7\27\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\u01f8\32\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\u01f9\32\65\1\146\4\65\2\144\1\65\1\145\20\65"+
    "\1\u01fa\44\65\1\146\4\65\2\144\1\65\1\145\22\65"+
    "\1\u01fb\42\65\1\146\4\65\2\144\1\65\1\145\16\65"+
    "\1\u01fc\46\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\u01fd\32\65\1\146\2\65\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\4\22\1\u01fe\25\22\2\0\3\22"+
    "\1\u01fe\10\22\3\0\1\22\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\4\22\1\u01ff\25\22\2\0\3\22"+
    "\1\u01ff\10\22\3\0\1\22\2\65\2\144\1\65\1\145"+
    "\31\65\1\u0200\33\65\1\146\3\65\1\u01e9\2\u0201\1\65"+
    "\1\u0202\65\65\1\146\4\65\2\144\1\65\1\145\40\65"+
    "\1\u0203\24\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\u0204\32\65\1\146\4\65\2\144\1\65\1\145\40\65"+
    "\1\u0205\24\65\1\146\4\65\2\144\1\65\1\145\35\65"+
    "\1\u0206\27\65\1\146\4\65\2\144\1\65\1\145\31\65"+
    "\1\u0207\33\65\1\146\4\65\2\144\1\65\1\145\14\65"+
    "\1\u0208\50\65\1\146\3\65\1\u01f0\2\u0209\1\65\1\u020a"+
    "\65\65\1\146\4\65\2\144\1\65\1\145\33\65\1\u020b"+
    "\31\65\1\146\4\65\2\144\1\65\1\145\30\65\1\u020c"+
    "\34\65\1\146\4\65\2\144\1\65\1\145\14\65\1\u020d"+
    "\50\65\1\146\2\65\1\66\3\u01f4\1\66\1\u01f5\65\66"+
    "\1\146\2\66\2\65\2\144\1\65\1\145\35\65\1\u020e"+
    "\27\65\1\146\4\65\2\144\1\65\1\145\17\65\1\u020f"+
    "\45\65\1\146\4\65\2\144\1\65\1\145\30\65\1\u0210"+
    "\34\65\1\146\4\65\2\144\1\65\1\145\35\65\1\u0211"+
    "\27\65\1\146\3\65\1\u01fa\2\u0212\1\65\1\u0213\65\65"+
    "\1\146\4\65\2\144\1\65\1\145\40\65\1\u0214\24\65"+
    "\1\146\4\65\2\144\1\65\1\145\24\65\1\u0215\40\65"+
    "\1\146\3\65\1\u01fd\2\u0216\1\65\1\u0217\65\65\1\146"+
    "\2\65\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\22\22\1\u0218\7\22\2\0\11\22\1\u0218\2\22\3\0"+
    "\1\22\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\22\22\1\u0219\7\22\2\0\11\22\1\u0219\2\22\3\0"+
    "\1\22\2\65\2\144\1\65\1\145\20\65\1\u021a\44\65"+
    "\1\146\2\65\1\66\3\u0201\1\66\1\u0202\65\66\1\146"+
    "\2\66\2\65\2\144\1\65\1\145\36\65\1\u021b\26\65"+
    "\1\146\4\65\2\144\1\65\1\145\31\65\1\u021c\33\65"+
    "\1\146\4\65\2\144\1\65\1\145\27\65\1\u021d\35\65"+
    "\1\146\4\65\2\144\1\65\1\145\24\65\1\u021e\40\65"+
    "\1\146\3\65\1\u0207\2\u021f\1\65\1\u0220\65\65\1\146"+
    "\4\65\2\144\1\65\1\145\16\65\1\u0221\46\65\1\146"+
    "\2\65\1\66\3\u0209\1\66\1\u020a\65\66\1\146\2\66"+
    "\2\65\2\144\1\65\1\145\32\65\1\u0222\32\65\1\146"+
    "\4\65\2\144\1\65\1\145\40\65\1\u0223\24\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\u0224\27\65\1\146"+
    "\4\65\2\144\1\65\1\145\24\65\1\u0225\40\65\1\146"+
    "\3\65\1\u020f\2\u0226\1\65\1\u0227\65\65\1\146\4\65"+
    "\2\144\1\65\1\145\33\65\1\u0228\31\65\1\146\4\65"+
    "\2\144\1\65\1\145\30\65\1\u0229\34\65\1\146\2\65"+
    "\1\66\3\u0212\1\66\1\u0213\65\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\32\65\1\u022a\32\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\u022b\32\65\1\146\2\65"+
    "\1\66\3\u0216\1\66\1\u0217\65\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\31\65\1\u022c\33\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\u022d\24\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\u022e\44\65\1\146\4\65"+
    "\2\144\1\65\1\145\14\65\1\u022f\50\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\u0230\32\65\1\146\2\65"+
    "\1\66\3\u021f\1\66\1\u0220\65\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\24\65\1\u0231\40\65\1\146\4\65"+
    "\2\144\1\65\1\145\31\65\1\u0232\33\65\1\146\4\65"+
    "\2\144\1\65\1\145\27\65\1\u0233\35\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\u0234\40\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\u0235\32\65\1\146\2\65"+
    "\1\66\3\u0226\1\66\1\u0227\65\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\32\65\1\u0236\32\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\u0237\24\65\1\146\3\65"+
    "\1\u022a\2\u0238\1\65\1\u0239\65\65\1\146\4\65\2\144"+
    "\1\65\1\145\31\65\1\u023a\33\65\1\146\4\65\2\144"+
    "\1\65\1\145\37\65\1\u023b\25\65\1\146\4\65\2\144"+
    "\1\65\1\145\14\65\1\u023c\50\65\1\146\4\65\2\144"+
    "\1\65\1\145\31\65\1\u023d\33\65\1\146\4\65\2\144"+
    "\1\65\1\145\35\65\1\u023e\27\65\1\146\3\65\1\u0230"+
    "\2\u023f\1\65\1\u0240\65\65\1\146\4\65\2\144\1\65"+
    "\1\145\32\65\1\u0241\32\65\1\146\4\65\2\144\1\65"+
    "\1\145\20\65\1\u0242\44\65\1\146\4\65\2\144\1\65"+
    "\1\145\14\65\1\u0243\50\65\1\146\4\65\2\144\1\65"+
    "\1\145\32\65\1\u0244\32\65\1\146\3\65\1\u0235\2\u0245"+
    "\1\65\1\u0246\65\65\1\146\4\65\2\144\1\65\1\145"+
    "\31\65\1\u0247\33\65\1\146\4\65\2\144\1\65\1\145"+
    "\27\65\1\u0248\35\65\1\146\2\65\1\66\3\u0238\1\66"+
    "\1\u0239\65\66\1\146\2\66\1\65\1\u023a\2\u0249\1\65"+
    "\1\u024a\65\65\1\146\4\65\2\144\1\65\1\145\20\65"+
    "\1\u024b\44\65\1\146\4\65\2\144\1\65\1\145\35\65"+
    "\1\u024c\27\65\1\146\4\65\2\144\1\65\1\145\37\65"+
    "\1\u024d\25\65\1\146\4\65\2\144\1\65\1\145\24\65"+
    "\1\u024e\40\65\1\146\2\65\1\66\3\u023f\1\66\1\u0240"+
    "\65\66\1\146\2\66\2\65\2\144\1\65\1\145\31\65"+
    "\1\u024f\33\65\1\146\4\65\2\144\1\65\1\145\31\65"+
    "\1\u0250\33\65\1\146\4\65\2\144\1\65\1\145\35\65"+
    "\1\u0251\27\65\1\146\3\65\1\u0244\2\u0252\1\65\1\u0253"+
    "\65\65\1\146\2\65\1\66\3\u0245\1\66\1\u0246\65\66"+
    "\1\146\2\66\2\65\2\144\1\65\1\145\20\65\1\u0254"+
    "\44\65\1\146\4\65\2\144\1\65\1\145\14\65\1\u0255"+
    "\50\65\1\146\2\65\1\66\3\u0249\1\66\1\u024a\65\66"+
    "\1\146\2\66\1\65\1\u024b\2\u0256\1\65\1\u0257\65\65"+
    "\1\146\4\65\2\144\1\65\1\145\24\65\1\u0258\40\65"+
    "\1\146\4\65\2\144\1\65\1\145\20\65\1\u0259\44\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\u025a\32\65"+
    "\1\146\3\65\1\u024f\2\u025b\1\65\1\u025c\65\65\1\146"+
    "\4\65\2\144\1\65\1\145\37\65\1\u025d\25\65\1\146"+
    "\4\65\2\144\1\65\1\145\24\65\1\u025e\40\65\1\146"+
    "\2\65\1\66\3\u0252\1\66\1\u0253\65\66\1\146\2\66"+
    "\2\65\2\144\1\65\1\145\31\65\1\u025f\33\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\u0260\27\65\1\146"+
    "\2\65\1\66\3\u0256\1\66\1\u0257\65\66\1\146\2\66"+
    "\2\65\2\144\1\65\1\145\32\65\1\u0261\32\65\1\146"+
    "\3\65\1\u0259\2\u0262\1\65\1\u0263\65\65\1\146\3\65"+
    "\1\u025a\2\u0264\1\65\1\u0265\65\65\1\146\2\65\1\66"+
    "\3\u025b\1\66\1\u025c\65\66\1\146\2\66\2\65\2\144"+
    "\1\65\1\145\20\65\1\u0266\44\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u0267\32\65\1\146\4\65\2\144"+
    "\1\65\1\145\37\65\1\u0268\25\65\1\146\4\65\2\144"+
    "\1\65\1\145\24\65\1\u0269\40\65\1\146\3\65\1\u0261"+
    "\2\u026a\1\65\1\u026b\65\65\1\146\2\65\1\66\3\u0262"+
    "\1\66\1\u0263\65\66\1\146\3\66\3\u0264\1\66\1\u0265"+
    "\65\66\1\146\2\66\1\65\1\u0266\2\u026c\1\65\1\u026d"+
    "\65\65\1\146\3\65\1\u0267\2\u026e\1\65\1\u026f\65\65"+
    "\1\146\4\65\2\144\1\65\1\145\20\65\1\u0270\44\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\u0271\32\65"+
    "\1\146\2\65\1\66\3\u026a\1\66\1\u026b\65\66\1\146"+
    "\3\66\3\u026c\1\66\1\u026d\65\66\1\146\3\66\3\u026e"+
    "\1\66\1\u026f\65\66\1\146\2\66\1\65\1\u0270\2\u0272"+
    "\1\65\1\u0273\65\65\1\146\3\65\1\u0271\2\u0274\1\65"+
    "\1\u0275\65\65\1\146\2\65\1\66\3\u0272\1\66\1\u0273"+
    "\65\66\1\146\3\66\3\u0274\1\66\1\u0275\65\66\1\146"+
    "\2\66";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34286];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\4\11\2\1\3\11"+
    "\3\1\4\11\4\0\1\1\25\0\2\1\2\0\1\11"+
    "\4\0\1\11\45\0\2\1\1\0\1\11\2\0\1\11"+
    "\26\0\1\11\11\0\1\11\10\0\1\11\5\0\2\1"+
    "\2\0\1\11\47\0\1\11\1\0\2\1\20\0\1\11"+
    "\25\0\1\11\3\0\2\1\1\0\1\11\5\0\1\11"+
    "\4\0\1\11\2\0\1\11\7\0\1\11\6\0\1\11"+
    "\10\0\1\11\4\0\2\1\6\0\1\11\13\0\1\11"+
    "\1\0\1\11\6\0\1\11\11\0\1\11\1\0\2\1"+
    "\12\0\1\11\4\0\1\11\17\0\1\11\1\0\2\1"+
    "\6\0\1\11\1\0\1\11\16\0\1\11\2\0\1\11"+
    "\5\0\2\1\16\0\1\11\10\0\1\11\4\0\2\1"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\11\0\1\11"+
    "\1\0\1\11\14\0\2\1\2\0\1\11\24\0\2\1"+
    "\15\0\1\11\10\0\2\1\2\0\1\11\7\0\1\11"+
    "\10\0\1\11\3\0\1\11\2\1\6\0\1\11\6\0"+
    "\1\11\21\0\1\11\6\0\1\11\5\0\1\11\3\0"+
    "\1\11\10\0\1\11\3\0\1\11\4\0\1\11\6\0"+
    "\1\11\1\0\1\11\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[629];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

	private Symbol symbol(int type) {
		return new Symbol(type, new Token(type, yyline + 1, yycolumn + 1));
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, new Token(type, (String) value, yyline + 1, yycolumn + 1));
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormsLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new java_cup.runtime.Symbol(FormsParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 84: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 85: break;
          case 3:
            { return symbol(EXCL, yytext());
            }
            // fall through
          case 86: break;
          case 4:
            { return symbol(QUOTE, yytext());
            }
            // fall through
          case 87: break;
          case 5:
            { return symbol(SYMB, yytext());
            }
            // fall through
          case 88: break;
          case 6:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 89: break;
          case 7:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 90: break;
          case 8:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 91: break;
          case 9:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 92: break;
          case 10:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 93: break;
          case 11:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 94: break;
          case 12:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 95: break;
          case 13:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 96: break;
          case 14:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 97: break;
          case 15:
            { return symbol(PARAM, yytext());
            }
            // fall through
          case 98: break;
          case 16:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 99: break;
          case 17:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 100: break;
          case 18:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 101: break;
          case 19:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 102: break;
          case 20:
            { return symbol(EMPTY, yytext());
            }
            // fall through
          case 103: break;
          case 21:
            { return symbol(STR_SPACE, yytext());
            }
            // fall through
          case 104: break;
          case 22:
            { return symbol(STR_NUMBER, yytext());
            }
            // fall through
          case 105: break;
          case 23:
            { return symbol(STR, yytext());
            }
            // fall through
          case 106: break;
          case 24:
            { return symbol(ID_, yytext());
            }
            // fall through
          case 107: break;
          case 25:
            { return symbol(ID, yytext());
            }
            // fall through
          case 108: break;
          case 26:
            { return symbol(NO, yytext());
            }
            // fall through
          case 109: break;
          case 27:
            { return symbol(YES, yytext());
            }
            // fall through
          case 110: break;
          case 28:
            { return symbol(OPTION_SPACE, yytext());
            }
            // fall through
          case 111: break;
          case 29:
            { return symbol(URL, yytext());
            }
            // fall through
          case 112: break;
          case 30:
            { return symbol(DARK, yytext());
            }
            // fall through
          case 113: break;
          case 31:
            { return symbol(THEME, yytext());
            }
            // fall through
          case 114: break;
          case 32:
            { return symbol(OPTION_V, yytext());
            }
            // fall through
          case 115: break;
          case 33:
            { return symbol(BTN, yytext());
            }
            // fall through
          case 116: break;
          case 34:
            { return symbol(CLASS, yytext());
            }
            // fall through
          case 117: break;
          case 35:
            { return symbol(COMBO, yytext());
            }
            // fall through
          case 118: break;
          case 36:
            { return symbol(ROWS, yytext());
            }
            // fall through
          case 119: break;
          case 37:
            { return symbol(LIGHT, yytext());
            }
            // fall through
          case 120: break;
          case 38:
            { return symbol(RADIO, yytext());
            }
            // fall through
          case 121: break;
          case 39:
            { return symbol(CENTER, yytext());
            }
            // fall through
          case 122: break;
          case 40:
            { return symbol(IMG, yytext());
            }
            // fall through
          case 123: break;
          case 41:
            { return symbol(INDEX, yytext());
            }
            // fall through
          case 124: break;
          case 42:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 125: break;
          case 43:
            { return symbol(TITLE, yytext());
            }
            // fall through
          case 126: break;
          case 44:
            { return symbol(RIGHT, yytext());
            }
            // fall through
          case 127: break;
          case 45:
            { return symbol(FILE, yytext());
            }
            // fall through
          case 128: break;
          case 46:
            { return symbol(USER, yytext());
            }
            // fall through
          case 129: break;
          case 47:
            { return symbol(CHECKBOX, yytext());
            }
            // fall through
          case 130: break;
          case 48:
            { return symbol(COLUMNS, yytext());
            }
            // fall through
          case 131: break;
          case 49:
            { return symbol(OPTION, yytext());
            }
            // fall through
          case 132: break;
          case 50:
            { return symbol(PASS, yytext());
            }
            // fall through
          case 133: break;
          case 51:
            { return symbol(LEFT, yytext());
            }
            // fall through
          case 134: break;
          case 52:
            { return symbol(REQUIRED, yytext());
            }
            // fall through
          case 135: break;
          case 53:
            { return symbol(DATE, yytext());
            }
            // fall through
          case 136: break;
          case 54:
            { return symbol(ALIGN, yytext());
            }
            // fall through
          case 137: break;
          case 55:
            { return symbol(TEXT_AREA, yytext());
            }
            // fall through
          case 138: break;
          case 56:
            { return symbol(FORM, yytext());
            }
            // fall through
          case 139: break;
          case 57:
            { return symbol(JUSTIFY, yytext());
            }
            // fall through
          case 140: break;
          case 58:
            { return symbol(TEXT_FIELD, yytext());
            }
            // fall through
          case 141: break;
          case 59:
            { return symbol(FIN_SOL, yytext());
            }
            // fall through
          case 142: break;
          case 60:
            { return symbol(INIT_SOL, yytext());
            }
            // fall through
          case 143: break;
          case 61:
            { return symbol(FIELD_N, yytext());
            }
            // fall through
          case 144: break;
          case 62:
            { return symbol(ADD_USER, yytext());
            }
            // fall through
          case 145: break;
          case 63:
            { return symbol(LOGIN, yytext());
            }
            // fall through
          case 146: break;
          case 64:
            { return symbol(TEXT, yytext());
            }
            // fall through
          case 147: break;
          case 65:
            { return symbol(NEW_USER, yytext());
            }
            // fall through
          case 148: break;
          case 66:
            { return symbol(FIN_MANY_SOL, yytext());
            }
            // fall through
          case 149: break;
          case 67:
            { return symbol(INIT_MANY_SOL, yytext());
            }
            // fall through
          case 150: break;
          case 68:
            { return symbol(DATE_ADD, yytext());
            }
            // fall through
          case 151: break;
          case 69:
            { return symbol(NEW_PASS, yytext());
            }
            // fall through
          case 152: break;
          case 70:
            { return symbol(OLD_USER, yytext());
            }
            // fall through
          case 153: break;
          case 71:
            { return symbol(DEL_USER, yytext());
            }
            // fall through
          case 154: break;
          case 72:
            { return symbol(NEW_FORM, yytext());
            }
            // fall through
          case 155: break;
          case 73:
            { return symbol(USER_C, yytext());
            }
            // fall through
          case 156: break;
          case 74:
            { return symbol(EDIT_USER, yytext());
            }
            // fall through
          case 157: break;
          case 75:
            { return symbol(ADD_COMP, yytext());
            }
            // fall through
          case 158: break;
          case 76:
            { return symbol(DATE_MOD, yytext());
            }
            // fall through
          case 159: break;
          case 77:
            { return symbol(DEL_COMP, yytext());
            }
            // fall through
          case 160: break;
          case 78:
            { return symbol(DEL_FORM, yytext());
            }
            // fall through
          case 161: break;
          case 79:
            { return symbol(CRED, yytext());
            }
            // fall through
          case 162: break;
          case 80:
            { return symbol(EDIT_COMP, yytext());
            }
            // fall through
          case 163: break;
          case 81:
            { return symbol(EDIT_FORM, yytext());
            }
            // fall through
          case 164: break;
          case 82:
            { return symbol(PARAM_C, yytext());
            }
            // fall through
          case 165: break;
          case 83:
            { return symbol(PARAM_F, yytext());
            }
            // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
