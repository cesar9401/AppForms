// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: forms.flex

package com.cesar31.formsweb.parser.main;

import static com.cesar31.formsweb.parser.main.FormsParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class FormsLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\2\6\1\0\2\6\1\10\1\11"+
    "\1\12\1\13\1\6\1\14\1\15\11\16\1\17\1\6"+
    "\1\20\1\0\1\21\2\6\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\6\1\57\1\0\2\52\1\60\1\61\1\62"+
    "\1\63\2\52\1\64\2\52\1\65\1\52\1\66\1\67"+
    "\3\52\1\70\1\71\1\72\5\52\1\73\1\74\1\75"+
    "\7\0\1\1\32\0\1\1\1\6\10\0\1\52\12\0"+
    "\1\52\4\0\1\52\4\0\1\6\27\52\1\0\37\52"+
    "\1\0\u01ca\52\4\0\14\52\16\0\5\52\7\0\1\52"+
    "\1\0\1\52\21\0\165\52\1\0\2\52\2\0\4\52"+
    "\1\0\1\52\6\0\1\52\1\0\3\52\1\0\1\52"+
    "\1\0\24\52\1\0\123\52\1\0\213\52\1\0\255\52"+
    "\1\0\46\52\2\0\1\52\6\0\51\52\10\0\55\52"+
    "\1\0\1\52\1\0\2\52\1\0\2\52\1\0\1\52"+
    "\10\0\33\52\4\0\4\52\35\0\13\52\5\0\100\52"+
    "\12\76\4\0\146\52\1\0\10\52\2\0\12\52\1\0"+
    "\6\52\12\76\3\52\2\0\1\52\20\0\73\52\2\0"+
    "\145\52\16\0\12\76\54\52\4\0\1\52\2\0\1\52"+
    "\2\0\56\52\22\0\34\52\4\0\13\52\65\0\25\52"+
    "\1\0\10\52\25\0\17\52\1\0\201\52\2\0\12\76"+
    "\1\0\23\52\1\0\10\52\2\0\2\52\2\0\26\52"+
    "\1\0\7\52\1\0\1\52\3\0\4\52\2\0\11\52"+
    "\2\0\2\52\2\0\4\52\10\0\1\52\4\0\2\52"+
    "\1\0\5\52\2\0\12\76\2\52\12\0\1\52\1\0"+
    "\1\52\2\0\3\52\1\0\6\52\4\0\2\52\2\0"+
    "\26\52\1\0\7\52\1\0\2\52\1\0\2\52\1\0"+
    "\2\52\2\0\1\52\1\0\5\52\4\0\2\52\2\0"+
    "\3\52\3\0\1\52\7\0\4\52\1\0\1\52\7\0"+
    "\12\76\6\52\13\0\3\52\1\0\11\52\1\0\3\52"+
    "\1\0\26\52\1\0\7\52\1\0\2\52\1\0\5\52"+
    "\2\0\12\52\1\0\3\52\1\0\3\52\2\0\1\52"+
    "\17\0\4\52\2\0\12\76\11\0\7\52\1\0\3\52"+
    "\1\0\10\52\2\0\2\52\2\0\26\52\1\0\7\52"+
    "\1\0\2\52\1\0\5\52\2\0\11\52\2\0\2\52"+
    "\2\0\3\52\10\0\2\52\4\0\2\52\1\0\5\52"+
    "\2\0\12\76\1\0\1\52\20\0\2\52\1\0\6\52"+
    "\3\0\3\52\1\0\4\52\3\0\2\52\1\0\1\52"+
    "\1\0\2\52\3\0\2\52\3\0\3\52\3\0\14\52"+
    "\4\0\5\52\3\0\3\52\1\0\4\52\2\0\1\52"+
    "\6\0\1\52\16\0\12\76\20\0\15\52\1\0\3\52"+
    "\1\0\27\52\1\0\20\52\3\0\10\52\1\0\3\52"+
    "\1\0\4\52\7\0\2\52\1\0\3\52\5\0\4\52"+
    "\2\0\12\76\20\0\4\52\1\0\10\52\1\0\3\52"+
    "\1\0\27\52\1\0\12\52\1\0\5\52\2\0\11\52"+
    "\1\0\3\52\1\0\4\52\7\0\2\52\7\0\1\52"+
    "\1\0\4\52\2\0\12\76\1\0\2\52\15\0\4\52"+
    "\1\0\10\52\1\0\3\52\1\0\63\52\1\0\3\52"+
    "\1\0\5\52\5\0\4\52\7\0\5\52\2\0\12\76"+
    "\12\0\6\52\2\0\2\52\1\0\22\52\3\0\30\52"+
    "\1\0\11\52\1\0\1\52\2\0\7\52\3\0\1\52"+
    "\4\0\6\52\1\0\1\52\1\0\10\52\6\0\12\76"+
    "\2\0\2\52\15\0\72\52\5\0\17\52\1\0\12\76"+
    "\47\0\2\52\1\0\1\52\1\0\5\52\1\0\30\52"+
    "\1\0\1\52\1\0\27\52\2\0\5\52\1\0\1\52"+
    "\1\0\6\52\2\0\12\76\2\0\4\52\40\0\1\52"+
    "\27\0\2\52\6\0\12\76\13\0\1\52\1\0\1\52"+
    "\1\0\1\52\4\0\12\52\1\0\44\52\4\0\24\52"+
    "\1\0\22\52\1\0\44\52\11\0\1\52\71\0\100\52"+
    "\12\76\6\0\100\52\12\76\4\52\2\0\46\52\1\0"+
    "\1\52\5\0\1\52\2\0\53\52\1\0\115\52\1\0"+
    "\4\52\2\0\7\52\1\0\1\52\1\0\4\52\2\0"+
    "\51\52\1\0\4\52\2\0\41\52\1\0\4\52\2\0"+
    "\7\52\1\0\1\52\1\0\4\52\2\0\17\52\1\0"+
    "\71\52\1\0\4\52\2\0\103\52\2\0\3\52\40\0"+
    "\20\52\20\0\126\52\2\0\6\52\3\0\u016c\52\2\0"+
    "\21\52\1\1\32\52\5\0\113\52\3\0\13\52\7\0"+
    "\15\52\1\0\7\52\13\0\25\52\13\0\24\52\14\0"+
    "\15\52\1\0\3\52\1\0\2\52\14\0\124\52\3\0"+
    "\1\52\4\0\2\52\2\0\12\76\41\0\3\52\2\0"+
    "\12\76\6\0\131\52\7\0\53\52\5\0\106\52\12\0"+
    "\37\52\1\0\14\52\4\0\14\52\12\0\12\76\36\52"+
    "\2\0\5\52\13\0\54\52\4\0\32\52\6\0\12\76"+
    "\46\0\34\52\4\0\77\52\1\0\35\52\2\0\1\52"+
    "\12\76\6\0\12\76\15\0\1\52\10\0\17\52\101\0"+
    "\114\52\4\0\12\76\21\0\11\52\14\0\60\52\12\76"+
    "\72\52\14\0\70\52\10\0\12\76\3\0\3\52\12\76"+
    "\44\52\2\0\11\52\7\0\53\52\2\0\3\52\20\0"+
    "\3\52\1\0\47\52\5\0\372\52\1\0\33\52\2\0"+
    "\6\52\2\0\46\52\2\0\6\52\2\0\10\52\1\0"+
    "\1\52\1\0\1\52\1\0\1\52\1\0\37\52\2\0"+
    "\65\52\1\0\7\52\1\0\1\52\3\0\3\52\1\0"+
    "\7\52\3\0\4\52\2\0\6\52\4\0\15\52\5\0"+
    "\3\52\1\0\7\52\3\0\13\1\35\0\2\1\5\0"+
    "\1\1\17\0\2\52\23\0\1\52\12\0\1\1\21\0"+
    "\1\52\15\0\1\52\20\0\15\52\63\0\41\52\21\0"+
    "\1\52\4\0\1\52\2\0\12\52\1\0\1\52\3\0"+
    "\5\52\6\0\1\52\1\0\1\52\1\0\1\52\1\0"+
    "\4\52\1\0\13\52\2\0\4\52\5\0\5\52\4\0"+
    "\1\52\21\0\51\52\u022d\0\64\52\26\0\57\52\1\0"+
    "\57\52\1\0\205\52\6\0\11\52\14\0\46\52\1\0"+
    "\1\52\5\0\1\52\2\0\70\52\7\0\1\52\17\0"+
    "\30\52\11\0\7\52\1\0\7\52\1\0\7\52\1\0"+
    "\7\52\1\0\7\52\1\0\7\52\1\0\7\52\1\0"+
    "\7\52\1\0\40\52\57\0\1\52\320\0\1\1\4\0"+
    "\3\52\31\0\17\52\1\0\5\52\2\0\5\52\4\0"+
    "\126\52\2\0\2\52\2\0\3\52\1\0\132\52\1\0"+
    "\4\52\5\0\53\52\1\0\136\52\21\0\33\52\65\0"+
    "\306\52\112\0\360\52\20\0\215\52\103\0\56\52\2\0"+
    "\15\52\3\0\20\52\12\76\2\52\24\0\63\52\1\0"+
    "\12\52\1\0\163\52\45\0\11\52\2\0\147\52\2\0"+
    "\65\52\2\0\5\52\60\0\61\52\30\0\64\52\14\0"+
    "\106\52\12\0\12\76\6\0\30\52\3\0\1\52\1\0"+
    "\3\52\12\76\44\52\2\0\44\52\14\0\35\52\3\0"+
    "\101\52\16\0\1\52\12\76\6\0\20\52\12\76\5\52"+
    "\1\0\67\52\11\0\16\52\2\0\12\76\6\0\27\52"+
    "\3\0\111\52\30\0\3\52\2\0\20\52\2\0\5\52"+
    "\12\0\6\52\2\0\6\52\2\0\6\52\11\0\7\52"+
    "\1\0\7\52\1\0\53\52\1\0\14\52\10\0\173\52"+
    "\1\0\2\52\2\0\12\76\6\0\244\52\14\0\27\52"+
    "\4\0\61\52\4\0\156\52\2\0\152\52\46\0\7\52"+
    "\14\0\5\52\5\0\14\52\1\0\15\52\1\0\5\52"+
    "\1\0\1\52\1\0\2\52\1\0\2\52\1\0\154\52"+
    "\41\0\153\52\22\0\100\52\2\0\66\52\50\0\14\52"+
    "\4\0\20\52\20\0\20\52\3\0\2\52\30\0\3\52"+
    "\40\0\5\52\1\0\207\52\23\0\12\76\7\0\32\52"+
    "\4\0\1\52\1\0\32\52\13\0\131\52\3\0\6\52"+
    "\2\0\6\52\2\0\6\52\2\0\3\52\43\0\14\52"+
    "\1\0\32\52\1\0\23\52\1\0\2\52\1\0\17\52"+
    "\2\0\16\52\42\0\173\52\105\0\65\52\210\0\1\52"+
    "\202\0\35\52\3\0\61\52\17\0\1\52\37\0\40\52"+
    "\15\0\36\52\5\0\53\52\5\0\36\52\2\0\44\52"+
    "\4\0\10\52\1\0\5\52\52\0\236\52\2\0\12\76"+
    "\6\0\44\52\4\0\44\52\4\0\50\52\10\0\64\52"+
    "\234\0\67\52\11\0\26\52\12\0\10\52\230\0\6\52"+
    "\2\0\1\52\1\0\54\52\1\0\2\52\3\0\1\52"+
    "\2\0\27\52\12\0\27\52\11\0\37\52\101\0\23\52"+
    "\1\0\2\52\12\0\26\52\12\0\32\52\106\0\70\52"+
    "\6\0\2\52\100\0\4\52\1\0\2\52\5\0\10\52"+
    "\1\0\3\52\1\0\35\52\2\0\3\52\4\0\1\52"+
    "\40\0\35\52\3\0\35\52\43\0\10\52\1\0\36\52"+
    "\31\0\66\52\12\0\26\52\12\0\23\52\15\0\22\52"+
    "\156\0\111\52\67\0\63\52\15\0\63\52\15\0\50\52"+
    "\10\0\12\76\306\0\35\52\12\0\1\52\10\0\41\52"+
    "\217\0\27\52\11\0\107\52\37\0\12\76\17\0\74\52"+
    "\25\0\31\52\7\0\12\76\6\0\65\52\1\0\12\76"+
    "\4\0\3\52\11\0\44\52\2\0\1\52\11\0\105\52"+
    "\4\0\4\52\3\0\12\76\1\52\1\0\1\52\43\0"+
    "\22\52\1\0\45\52\6\0\1\52\101\0\7\52\1\0"+
    "\1\52\1\0\4\52\1\0\17\52\1\0\12\52\7\0"+
    "\73\52\5\0\12\76\6\0\4\52\1\0\10\52\2\0"+
    "\2\52\2\0\26\52\1\0\7\52\1\0\2\52\1\0"+
    "\5\52\1\0\12\52\2\0\2\52\2\0\3\52\2\0"+
    "\1\52\6\0\1\52\5\0\7\52\2\0\7\52\3\0"+
    "\5\52\213\0\113\52\5\0\12\76\4\0\2\52\40\0"+
    "\106\52\1\0\1\52\10\0\12\76\246\0\66\52\2\0"+
    "\11\52\27\0\6\52\42\0\101\52\3\0\1\52\13\0"+
    "\12\76\46\0\71\52\7\0\12\76\66\0\33\52\2\0"+
    "\17\52\4\0\12\76\306\0\73\52\145\0\100\52\12\76"+
    "\25\0\1\52\240\0\10\52\2\0\56\52\2\0\10\52"+
    "\1\0\2\52\33\0\77\52\10\0\1\52\10\0\112\52"+
    "\3\0\1\52\42\0\71\52\7\0\11\52\1\0\55\52"+
    "\1\0\11\52\17\0\12\76\30\0\36\52\2\0\26\52"+
    "\1\0\16\52\111\0\7\52\1\0\2\52\1\0\54\52"+
    "\3\0\1\52\1\0\2\52\1\0\11\52\10\0\12\76"+
    "\6\0\6\52\1\0\2\52\1\0\45\52\1\0\2\52"+
    "\1\0\6\52\7\0\12\76\u0136\0\27\52\11\0\232\52"+
    "\146\0\157\52\21\0\304\52\274\0\57\52\321\0\107\52"+
    "\271\0\71\52\7\0\37\52\1\0\12\76\146\0\36\52"+
    "\2\0\5\52\13\0\67\52\11\0\4\52\14\0\12\76"+
    "\11\0\25\52\5\0\23\52\260\0\100\52\200\0\113\52"+
    "\4\0\71\52\7\0\21\52\100\0\2\52\1\0\1\52"+
    "\34\0\370\52\10\0\363\52\15\0\37\52\61\0\3\52"+
    "\21\0\4\52\10\0\u018c\52\4\0\153\52\5\0\15\52"+
    "\3\0\11\52\7\0\12\52\3\0\2\52\306\0\5\52"+
    "\3\0\6\52\10\0\10\52\2\0\7\52\36\0\4\52"+
    "\224\0\3\52\273\0\125\52\1\0\107\52\1\0\2\52"+
    "\2\0\1\52\2\0\2\52\2\0\4\52\1\0\14\52"+
    "\1\0\1\52\1\0\7\52\1\0\101\52\1\0\4\52"+
    "\2\0\10\52\1\0\7\52\1\0\34\52\1\0\4\52"+
    "\1\0\5\52\1\0\1\52\3\0\7\52\1\0\u0154\52"+
    "\2\0\31\52\1\0\31\52\1\0\37\52\1\0\31\52"+
    "\1\0\37\52\1\0\31\52\1\0\37\52\1\0\31\52"+
    "\1\0\37\52\1\0\31\52\1\0\10\52\2\0\62\76"+
    "\67\52\4\0\62\52\10\0\1\52\16\0\1\52\26\0"+
    "\5\52\1\0\17\52\120\0\7\52\1\0\21\52\2\0"+
    "\7\52\1\0\2\52\1\0\5\52\325\0\55\52\3\0"+
    "\16\52\2\0\12\76\4\0\1\52\u0171\0\60\52\12\76"+
    "\6\0\305\52\13\0\7\52\51\0\114\52\4\0\12\76"+
    "\246\0\4\52\1\0\33\52\1\0\2\52\1\0\1\52"+
    "\2\0\1\52\1\0\12\52\1\0\4\52\1\0\1\52"+
    "\1\0\1\52\6\0\1\52\4\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\3\52\1\0\2\52\1\0\1\52"+
    "\2\0\1\52\1\0\1\52\1\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\2\52\1\0\1\52\2\0\4\52"+
    "\1\0\7\52\1\0\4\52\1\0\4\52\1\0\1\52"+
    "\1\0\12\52\1\0\21\52\5\0\3\52\1\0\5\52"+
    "\1\0\21\52\164\0\32\52\6\0\32\52\6\0\32\52"+
    "\166\0\327\52\51\0\65\52\13\0\336\52\2\0\u0182\52"+
    "\16\0\u0131\52\37\0\36\52\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\13\1\14\1\15\1\16\3\17"+
    "\1\20\1\21\1\22\1\23\4\0\1\24\25\0\2\17"+
    "\3\0\1\25\43\0\2\17\1\26\1\0\1\27\23\0"+
    "\1\30\15\0\1\31\5\0\2\17\45\0\1\32\1\0"+
    "\2\17\42\0\1\33\3\0\2\17\1\34\4\0\1\35"+
    "\3\0\1\36\1\0\1\37\6\0\1\40\14\0\1\41"+
    "\4\0\2\17\5\0\1\42\12\0\1\43\1\44\5\0"+
    "\1\45\10\0\1\46\1\0\2\17\11\0\1\47\3\0"+
    "\1\50\16\0\1\51\1\0\2\17\5\0\1\52\1\53"+
    "\15\0\1\54\1\0\1\55\5\0\2\17\15\0\1\56"+
    "\7\0\1\57\4\0\2\17\1\60\1\0\1\61\1\62"+
    "\10\0\1\63\1\64\14\0\2\17\1\0\1\65\24\0"+
    "\1\66\1\67\14\0\1\70\10\0\2\17\1\0\1\71"+
    "\6\0\1\72\7\0\1\73\2\0\1\74\1\75\1\76"+
    "\5\0\1\77\5\0\1\100\20\0\1\101\5\0\1\102"+
    "\4\0\1\103\2\0\1\104\7\0\1\105\2\0\1\106"+
    "\3\0\1\107\5\0\1\110\1\111\4\0\1\112\1\113"+
    "\1\114\2\0\1\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[555];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\77\0\374\0\u013b\0\u013b"+
    "\0\77\0\77\0\77\0\77\0\u017a\0\u01b9\0\77\0\77"+
    "\0\77\0\u017a\0\u01f8\0\u0237\0\77\0\77\0\77\0\77"+
    "\0\176\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0"+
    "\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8"+
    "\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\77"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\77\0\u12f3\0\77"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb"+
    "\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3"+
    "\0\u1722\0\u1761\0\u17a0\0\77\0\u17df\0\u181e\0\u185d\0\u189c"+
    "\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94"+
    "\0\u1ad3\0\77\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45"+
    "\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d"+
    "\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\77\0\u25e6"+
    "\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de"+
    "\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6"+
    "\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce"+
    "\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6"+
    "\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\77\0\u2f01\0\u2f40\0\u2f7f"+
    "\0\u2fbe\0\u2ffd\0\77\0\u303c\0\u307b\0\u30ba\0\u30f9\0\77"+
    "\0\u3138\0\u3177\0\u31b6\0\77\0\u31f5\0\77\0\u3234\0\u3273"+
    "\0\u32b2\0\u32f1\0\u3330\0\u336f\0\77\0\u33ae\0\u33ed\0\u342c"+
    "\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624"+
    "\0\u3663\0\77\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd"+
    "\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\77\0\u3957\0\u3996"+
    "\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e"+
    "\0\77\0\77\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\77"+
    "\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1"+
    "\0\77\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a"+
    "\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5\0\77\0\u41f4\0\u4233"+
    "\0\u4272\0\77\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad\0\u43ec"+
    "\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4"+
    "\0\77\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d"+
    "\0\u47dc\0\77\0\77\0\u481b\0\u485a\0\u4899\0\u48d8\0\u4917"+
    "\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f"+
    "\0\77\0\u4b4e\0\77\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89"+
    "\0\u4cc8\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81"+
    "\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a\0\77"+
    "\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4\0\u51f3\0\77"+
    "\0\u5232\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d\0\77\0\u53ac"+
    "\0\77\0\77\0\u53eb\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u5526"+
    "\0\u5565\0\u55a4\0\77\0\77\0\u55e3\0\u5622\0\u5661\0\u56a0"+
    "\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898"+
    "\0\u58d7\0\u5916\0\u5955\0\77\0\u5994\0\u59d3\0\u5a12\0\u5a51"+
    "\0\u5a90\0\u5acf\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\u5c49"+
    "\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02\0\u5e41"+
    "\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039"+
    "\0\u6078\0\u60b7\0\u60f6\0\u6135\0\u6174\0\u61b3\0\77\0\u61f2"+
    "\0\u6231\0\u6270\0\u62af\0\u62ee\0\u632d\0\u636c\0\u63ab\0\u63ea"+
    "\0\u6429\0\u6468\0\77\0\u64a7\0\u64e6\0\u6525\0\u6564\0\u65a3"+
    "\0\u65e2\0\77\0\u6621\0\u6660\0\u669f\0\u66de\0\u671d\0\u675c"+
    "\0\u679b\0\77\0\u67da\0\u6819\0\77\0\u017a\0\u017a\0\u6858"+
    "\0\u6897\0\u68d6\0\u6915\0\u6954\0\77\0\u6993\0\u69d2\0\u6a11"+
    "\0\u6a50\0\u6a8f\0\77\0\u6ace\0\u6b0d\0\u6b4c\0\u6b8b\0\u6bca"+
    "\0\u6c09\0\u6c48\0\u6c87\0\u6cc6\0\u6d05\0\u6d44\0\u6d83\0\u6dc2"+
    "\0\u6e01\0\u6e40\0\u6e7f\0\77\0\u6ebe\0\u6efd\0\u6f3c\0\u6f7b"+
    "\0\u6fba\0\77\0\u6ff9\0\u7038\0\u7077\0\u70b6\0\77\0\u70f5"+
    "\0\u7134\0\77\0\u7173\0\u71b2\0\u71f1\0\u7230\0\u726f\0\u72ae"+
    "\0\u72ed\0\77\0\u732c\0\u736b\0\77\0\u73aa\0\u73e9\0\u7428"+
    "\0\77\0\u7467\0\u74a6\0\u74e5\0\u7524\0\u7563\0\77\0\77"+
    "\0\u75a2\0\u75e1\0\u7620\0\u765f\0\77\0\77\0\77\0\u769e"+
    "\0\u76dd\0\77\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[555];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\5\22\1\23\2\22\1\24\21\22\1\25\1\7"+
    "\1\26\4\22\1\23\1\24\6\22\1\27\1\2\1\30"+
    "\1\22\100\0\3\31\1\0\1\32\72\0\1\31\1\3"+
    "\1\31\1\0\1\32\71\0\1\33\3\34\1\33\1\35"+
    "\1\33\1\36\3\33\1\36\1\33\1\37\1\40\3\33"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\2\33\1\47"+
    "\1\50\1\33\1\51\1\52\1\53\1\54\1\55\1\33"+
    "\1\56\1\57\1\60\1\61\6\33\1\0\1\33\1\36"+
    "\14\33\1\0\1\33\1\62\6\0\1\7\1\0\1\7"+
    "\4\0\2\7\3\0\32\7\1\0\1\7\1\0\14\7"+
    "\3\0\1\7\6\0\1\7\1\0\1\7\4\0\2\22"+
    "\3\0\32\22\1\0\1\7\1\0\14\22\3\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\16\3\0\32\22"+
    "\1\0\1\7\1\0\14\22\3\0\1\22\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\10\22\1\63\21\22"+
    "\1\0\1\7\1\0\5\22\1\63\6\22\3\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\15\22"+
    "\1\64\14\22\1\0\1\7\1\0\7\22\1\64\4\22"+
    "\3\0\1\22\1\0\3\32\1\0\1\35\71\0\5\65"+
    "\1\0\66\65\1\0\2\65\1\33\3\34\1\33\1\35"+
    "\7\33\1\37\1\40\3\33\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\2\33\1\47\1\50\1\33\1\51\1\52"+
    "\1\53\1\54\1\55\1\33\1\56\1\57\1\60\1\61"+
    "\6\33\1\0\16\33\1\0\1\33\1\62\1\0\3\35"+
    "\73\0\5\65\1\0\1\65\1\66\3\65\1\66\1\65"+
    "\2\66\3\65\32\66\3\65\14\66\1\65\1\0\1\65"+
    "\1\66\1\65\3\67\1\65\1\70\7\65\2\71\55\65"+
    "\1\0\1\65\1\71\1\65\3\67\1\65\1\70\7\65"+
    "\2\72\55\65\1\0\1\65\1\71\5\65\1\0\22\65"+
    "\1\73\4\65\1\74\5\65\1\75\30\65\1\0\7\65"+
    "\1\0\32\65\1\76\33\65\1\0\7\65\1\0\14\65"+
    "\1\77\3\65\1\100\2\65\1\101\3\65\1\102\2\65"+
    "\1\103\2\65\1\104\30\65\1\0\7\65\1\0\20\65"+
    "\1\105\45\65\1\0\7\65\1\0\27\65\1\106\36\65"+
    "\1\0\7\65\1\0\20\65\1\107\3\65\1\110\5\65"+
    "\1\111\33\65\1\0\7\65\1\0\17\65\1\112\10\65"+
    "\1\113\1\114\13\65\1\115\20\65\1\0\7\65\1\0"+
    "\40\65\1\116\25\65\1\0\7\65\1\0\32\65\1\117"+
    "\33\65\1\0\7\65\1\0\32\65\1\120\33\65\1\0"+
    "\7\65\1\0\32\65\1\121\5\65\1\122\25\65\1\0"+
    "\7\65\1\0\33\65\1\123\32\65\1\0\7\65\1\0"+
    "\14\65\1\124\51\65\1\0\7\65\1\0\14\65\1\125"+
    "\3\65\1\126\45\65\1\0\7\65\1\0\24\65\1\127"+
    "\41\65\1\0\7\65\1\0\20\65\1\130\3\65\1\131"+
    "\41\65\1\0\7\65\1\0\35\65\1\132\1\133\27\65"+
    "\1\0\7\65\1\0\7\65\2\71\55\65\1\0\1\65"+
    "\1\71\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\15\22\1\134\14\22\1\0\1\7\1\0\7\22\1\134"+
    "\4\22\3\0\1\22\6\0\1\7\1\0\1\7\4\0"+
    "\2\22\3\0\10\22\1\135\21\22\1\0\1\7\1\0"+
    "\5\22\1\135\6\22\3\0\1\22\5\65\1\136\66\65"+
    "\1\137\7\65\1\140\1\65\1\66\3\65\1\66\1\65"+
    "\2\66\3\65\32\66\3\65\14\66\1\65\1\137\1\65"+
    "\1\66\1\65\3\67\1\65\1\70\66\65\1\137\7\65"+
    "\1\136\7\65\2\141\55\65\1\137\1\65\1\141\1\65"+
    "\3\67\1\65\1\70\7\65\2\142\55\65\1\137\1\65"+
    "\1\141\5\65\1\136\35\65\1\143\30\65\1\137\7\65"+
    "\1\136\24\65\1\144\41\65\1\137\7\65\1\136\20\65"+
    "\1\145\45\65\1\137\7\65\1\136\37\65\1\146\26\65"+
    "\1\137\7\65\1\136\30\65\1\147\35\65\1\137\7\65"+
    "\1\136\31\65\1\150\34\65\1\137\7\65\1\136\20\65"+
    "\1\151\45\65\1\137\7\65\1\136\14\65\1\152\51\65"+
    "\1\137\7\65\1\136\27\65\1\153\1\154\35\65\1\137"+
    "\7\65\1\136\20\65\1\155\45\65\1\137\7\65\1\136"+
    "\35\65\1\156\30\65\1\137\7\65\1\136\24\65\1\157"+
    "\41\65\1\137\7\65\1\136\16\65\1\160\47\65\1\137"+
    "\7\65\1\136\16\65\1\161\10\65\1\162\36\65\1\137"+
    "\7\65\1\136\35\65\1\163\30\65\1\137\3\65\3\112"+
    "\1\65\1\164\66\65\1\137\7\65\1\136\14\65\1\165"+
    "\51\65\1\137\7\65\1\136\17\65\1\166\46\65\1\137"+
    "\7\65\1\136\34\65\1\167\31\65\1\137\7\65\1\136"+
    "\36\65\1\170\27\65\1\137\7\65\1\136\22\65\1\171"+
    "\43\65\1\137\7\65\1\136\17\65\1\172\46\65\1\137"+
    "\7\65\1\136\30\65\1\173\35\65\1\137\7\65\1\136"+
    "\20\65\1\174\45\65\1\137\7\65\1\136\16\65\1\175"+
    "\47\65\1\137\7\65\1\136\35\65\1\176\1\177\27\65"+
    "\1\137\7\65\1\136\17\65\1\200\46\65\1\137\7\65"+
    "\1\136\34\65\1\201\31\65\1\137\3\65\3\127\1\65"+
    "\1\202\66\65\1\137\7\65\1\136\30\65\1\203\12\65"+
    "\1\204\22\65\1\137\7\65\1\136\37\65\1\205\26\65"+
    "\1\137\7\65\1\136\27\65\1\206\36\65\1\137\7\65"+
    "\1\136\40\65\1\207\25\65\1\137\2\65\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\32\22\1\0\1\7"+
    "\1\0\1\210\13\22\3\0\1\22\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\32\22\1\0\1\7\1\0"+
    "\1\211\13\22\3\0\1\22\1\212\3\137\1\212\1\0"+
    "\47\212\1\0\16\212\1\0\2\212\5\65\1\136\7\65"+
    "\2\213\55\65\1\137\1\65\1\213\1\65\3\67\1\65"+
    "\1\70\7\65\2\214\55\65\1\137\1\65\1\213\5\65"+
    "\1\136\20\65\1\215\45\65\1\137\7\65\1\136\31\65"+
    "\1\216\34\65\1\137\7\65\1\136\14\65\1\217\51\65"+
    "\1\137\7\65\1\136\32\65\1\220\33\65\1\137\7\65"+
    "\1\136\33\65\1\221\32\65\1\137\7\65\1\136\37\65"+
    "\1\222\26\65\1\137\7\65\1\136\16\65\1\223\47\65"+
    "\1\137\7\65\1\136\36\65\1\224\27\65\1\137\7\65"+
    "\1\136\40\65\1\225\25\65\1\137\7\65\1\136\15\65"+
    "\1\226\50\65\1\137\7\65\1\136\14\65\1\227\2\65"+
    "\1\230\46\65\1\137\7\65\1\136\20\65\1\231\45\65"+
    "\1\137\7\65\1\136\30\65\1\232\35\65\1\137\7\65"+
    "\1\136\23\65\1\233\42\65\1\137\7\65\1\136\23\65"+
    "\1\234\42\65\1\137\7\65\1\136\14\65\1\235\51\65"+
    "\1\137\7\65\1\136\30\65\1\236\35\65\1\137\7\65"+
    "\1\136\22\65\1\237\43\65\1\137\7\65\1\136\24\65"+
    "\1\240\41\65\1\137\7\65\1\136\40\65\1\241\25\65"+
    "\1\137\7\65\1\136\37\65\1\242\26\65\1\137\7\65"+
    "\1\136\24\65\1\243\41\65\1\137\7\65\1\136\24\65"+
    "\1\244\41\65\1\137\7\65\1\136\15\65\1\245\50\65"+
    "\1\137\7\65\1\136\41\65\1\246\24\65\1\137\7\65"+
    "\1\136\24\65\1\247\41\65\1\137\7\65\1\136\14\65"+
    "\1\250\51\65\1\137\7\65\1\136\36\65\1\251\27\65"+
    "\1\137\7\65\1\136\24\65\1\252\41\65\1\137\7\65"+
    "\1\136\40\65\1\253\25\65\1\137\7\65\1\136\14\65"+
    "\1\254\51\65\1\137\7\65\1\136\37\65\1\255\26\65"+
    "\1\137\7\65\1\136\40\65\1\256\25\65\1\137\3\65"+
    "\3\206\1\65\1\257\66\65\1\137\7\65\1\136\14\65"+
    "\1\260\51\65\1\137\2\65\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\22\22\1\261\7\22\1\0\1\7"+
    "\1\0\11\22\1\261\2\22\3\0\1\22\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\22\22\1\262\7\22"+
    "\1\0\1\7\1\0\11\22\1\262\2\22\3\0\1\22"+
    "\5\263\1\0\66\263\1\0\2\263\5\65\1\136\5\65"+
    "\1\264\60\65\1\137\3\65\3\67\1\65\1\70\5\65"+
    "\1\264\1\65\2\265\55\65\1\137\7\65\1\136\22\65"+
    "\1\266\43\65\1\137\7\65\1\136\20\65\1\267\45\65"+
    "\1\137\7\65\1\136\51\65\1\270\14\65\1\137\7\65"+
    "\1\136\31\65\1\271\34\65\1\137\7\65\1\136\32\65"+
    "\1\272\33\65\1\137\7\65\1\136\35\65\1\273\30\65"+
    "\1\137\7\65\1\136\26\65\1\274\37\65\1\137\7\65"+
    "\1\136\20\65\1\275\45\65\1\137\7\65\1\136\30\65"+
    "\1\276\35\65\1\137\7\65\1\136\32\65\1\277\33\65"+
    "\1\137\7\65\1\136\35\65\1\300\30\65\1\137\7\65"+
    "\1\136\20\65\1\301\45\65\1\137\7\65\1\136\16\65"+
    "\1\302\47\65\1\137\7\65\1\136\24\65\1\303\41\65"+
    "\1\137\7\65\1\136\14\65\1\304\51\65\1\137\7\65"+
    "\1\136\20\65\1\305\45\65\1\137\7\65\1\136\36\65"+
    "\1\306\27\65\1\137\7\65\1\136\40\65\1\307\25\65"+
    "\1\137\7\65\1\136\20\65\1\310\45\65\1\137\7\65"+
    "\1\136\16\65\1\311\47\65\1\137\7\65\1\136\24\65"+
    "\1\312\41\65\1\137\7\65\1\136\24\65\1\313\41\65"+
    "\1\137\7\65\1\136\31\65\1\314\34\65\1\137\7\65"+
    "\1\136\21\65\1\315\44\65\1\137\7\65\1\136\35\65"+
    "\1\316\30\65\1\137\7\65\1\136\32\65\1\317\33\65"+
    "\1\137\7\65\1\136\32\65\1\320\33\65\1\137\7\65"+
    "\1\136\30\65\1\321\35\65\1\137\7\65\1\136\42\65"+
    "\1\322\23\65\1\137\7\65\1\136\32\65\1\323\33\65"+
    "\1\137\7\65\1\136\20\65\1\324\45\65\1\137\3\65"+
    "\3\254\1\65\1\325\66\65\1\137\7\65\1\136\32\65"+
    "\1\326\33\65\1\137\7\65\1\136\27\65\1\327\36\65"+
    "\1\137\7\65\1\136\35\65\1\330\30\65\1\137\2\65"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\16\22"+
    "\1\331\13\22\1\0\1\7\1\0\10\22\1\331\3\22"+
    "\3\0\1\22\6\0\1\7\1\0\1\7\4\0\2\22"+
    "\3\0\16\22\1\332\13\22\1\0\1\7\1\0\10\22"+
    "\1\332\3\22\3\0\1\22\5\263\1\333\66\263\1\137"+
    "\2\263\5\65\1\136\7\65\2\334\55\65\1\137\1\65"+
    "\1\334\1\65\3\67\1\65\1\70\7\65\2\265\55\65"+
    "\1\137\7\65\1\136\14\65\1\335\51\65\1\137\7\65"+
    "\1\136\14\65\1\336\51\65\1\137\7\65\1\136\37\65"+
    "\1\337\26\65\1\137\3\65\3\271\1\65\1\340\66\65"+
    "\1\137\7\65\1\136\51\65\1\341\14\65\1\137\7\65"+
    "\1\136\32\65\1\342\33\65\1\137\7\65\1\136\15\65"+
    "\1\343\50\65\1\137\3\65\3\275\1\65\1\344\66\65"+
    "\1\137\7\65\1\136\31\65\1\345\34\65\1\137\3\65"+
    "\3\277\1\65\1\346\66\65\1\137\7\65\1\136\51\65"+
    "\1\347\14\65\1\137\7\65\1\136\31\65\1\350\34\65"+
    "\1\137\7\65\1\136\23\65\1\351\42\65\1\137\7\65"+
    "\1\136\31\65\1\352\34\65\1\137\7\65\1\136\51\65"+
    "\1\353\14\65\1\137\7\65\1\136\35\65\1\354\30\65"+
    "\1\137\3\65\3\306\1\65\1\355\66\65\1\137\7\65"+
    "\1\136\27\65\1\356\36\65\1\137\7\65\1\136\31\65"+
    "\1\357\34\65\1\137\7\65\1\136\20\65\1\360\45\65"+
    "\1\137\7\65\1\136\20\65\1\361\45\65\1\137\7\65"+
    "\1\136\21\65\1\362\44\65\1\137\7\65\1\136\51\65"+
    "\1\363\14\65\1\137\7\65\1\136\24\65\1\364\41\65"+
    "\1\137\7\65\1\136\20\65\1\365\45\65\1\137\7\65"+
    "\1\136\51\65\1\366\14\65\1\137\7\65\1\136\31\65"+
    "\1\367\34\65\1\137\7\65\1\136\20\65\1\370\45\65"+
    "\1\137\7\65\1\136\32\65\1\371\33\65\1\137\3\65"+
    "\3\323\1\65\1\372\66\65\1\137\7\65\1\136\35\65"+
    "\1\373\30\65\1\137\7\65\1\136\51\65\1\374\14\65"+
    "\1\137\7\65\1\136\32\65\1\375\33\65\1\137\7\65"+
    "\1\136\24\65\1\376\41\65\1\137\2\65\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\13\22\1\377\16\22"+
    "\1\0\1\7\1\0\6\22\1\377\5\22\3\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\13\22"+
    "\1\u0100\16\22\1\0\1\7\1\0\6\22\1\u0100\5\22"+
    "\3\0\1\22\5\65\1\136\7\65\2\u0101\55\65\1\137"+
    "\1\65\1\u0101\5\65\1\136\35\65\1\u0102\30\65\1\137"+
    "\7\65\1\136\16\65\1\u0103\47\65\1\137\7\65\1\136"+
    "\20\65\1\u0104\45\65\1\137\7\65\1\136\37\65\1\u0105"+
    "\26\65\1\137\3\65\3\342\1\65\1\u0106\66\65\1\137"+
    "\7\65\1\136\32\65\1\u0107\33\65\1\137\7\65\1\136"+
    "\14\65\1\u0108\51\65\1\137\7\65\1\136\40\65\1\u0109"+
    "\25\65\1\137\7\65\1\136\16\65\1\u010a\47\65\1\137"+
    "\7\65\1\136\14\65\1\u010b\51\65\1\137\7\65\1\136"+
    "\14\65\1\u010c\51\65\1\137\7\65\1\136\16\65\1\u010d"+
    "\11\65\1\u010e\35\65\1\137\7\65\1\136\32\65\1\u010f"+
    "\33\65\1\137\7\65\1\136\14\65\1\u0110\51\65\1\137"+
    "\3\65\3\357\1\65\1\u0111\66\65\1\137\3\65\3\360"+
    "\1\65\1\u0112\66\65\1\137\7\65\1\136\35\65\1\u0113"+
    "\30\65\1\137\7\65\1\136\24\65\1\u0114\41\65\1\137"+
    "\7\65\1\136\40\65\1\u0115\25\65\1\137\7\65\1\136"+
    "\16\65\1\u0116\47\65\1\137\3\65\3\u0117\1\65\1\u0118"+
    "\51\65\1\u0119\14\65\1\137\7\65\1\136\21\65\1\u011a"+
    "\11\65\1\u011b\32\65\1\137\7\65\1\136\20\65\1\u011c"+
    "\45\65\1\137\7\65\1\136\37\65\1\u011d\26\65\1\137"+
    "\7\65\1\136\35\65\1\u011e\30\65\1\137\7\65\1\136"+
    "\24\65\1\u011f\41\65\1\137\7\65\1\136\41\65\1\u0120"+
    "\24\65\1\137\3\65\3\375\1\65\1\u0121\66\65\1\137"+
    "\7\65\1\136\32\65\1\u0122\33\65\1\137\2\65\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\10\22\1\u0123"+
    "\21\22\1\0\1\7\1\0\5\22\1\u0123\6\22\3\0"+
    "\1\22\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\10\22\1\u0124\21\22\1\0\1\7\1\0\5\22\1\u0124"+
    "\6\22\3\0\1\22\5\65\1\136\5\65\1\u0125\60\65"+
    "\1\137\7\65\1\136\51\65\1\u0126\14\65\1\137\7\65"+
    "\1\136\24\65\1\u0127\41\65\1\137\7\65\1\136\43\65"+
    "\1\u0128\22\65\1\137\7\65\1\136\20\65\1\u0129\45\65"+
    "\1\137\7\65\1\136\43\65\1\u012a\22\65\1\137\7\65"+
    "\1\136\36\65\1\u012b\27\65\1\137\7\65\1\136\36\65"+
    "\1\u012c\27\65\1\137\7\65\1\136\24\65\1\u012d\41\65"+
    "\1\137\3\65\3\u010b\1\65\1\u012e\66\65\1\137\7\65"+
    "\1\136\35\65\1\u012f\30\65\1\137\7\65\1\136\35\65"+
    "\1\u0130\30\65\1\137\7\65\1\136\32\65\1\u0131\33\65"+
    "\1\137\3\65\3\u010f\1\65\1\u0132\66\65\1\137\7\65"+
    "\1\136\35\65\1\u0133\30\65\1\137\7\65\1\136\17\65"+
    "\1\u0134\46\65\1\137\7\65\1\136\16\65\1\u0135\47\65"+
    "\1\137\7\65\1\136\36\65\1\u0136\27\65\1\137\7\65"+
    "\1\136\14\65\1\u0137\51\65\1\137\3\65\3\u0117\1\65"+
    "\1\u0118\66\65\1\137\7\65\1\136\16\65\1\u0138\47\65"+
    "\1\137\7\65\1\136\32\65\1\u0139\33\65\1\137\7\65"+
    "\1\136\14\65\1\u013a\51\65\1\137\7\65\1\136\36\65"+
    "\1\u013b\27\65\1\137\7\65\1\136\35\65\1\u013c\30\65"+
    "\1\137\7\65\1\136\17\65\1\u013d\46\65\1\137\7\65"+
    "\1\136\17\65\1\u013e\46\65\1\137\7\65\1\136\24\65"+
    "\1\u013f\41\65\1\137\3\65\3\u0140\1\65\1\u0141\51\65"+
    "\1\u0142\14\65\1\137\2\65\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\2\22\1\u0143\27\22\1\0\1\7"+
    "\1\0\1\22\1\u0143\12\22\3\0\1\22\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\2\22\1\u0144\27\22"+
    "\1\0\1\7\1\0\1\22\1\u0144\12\22\3\0\1\22"+
    "\5\65\1\136\7\65\2\u0145\55\65\1\137\1\65\1\u0145"+
    "\5\65\1\136\16\65\1\u0146\47\65\1\137\7\65\1\136"+
    "\32\65\1\u0147\33\65\1\137\7\65\1\136\37\65\1\u0148"+
    "\26\65\1\137\7\65\1\136\43\65\1\u0149\22\65\1\137"+
    "\3\65\3\u012a\1\65\1\u014a\66\65\1\137\3\65\3\u012b"+
    "\1\65\1\u014b\66\65\1\137\7\65\1\136\40\65\1\u014c"+
    "\25\65\1\137\7\65\1\136\14\65\1\u014d\51\65\1\137"+
    "\7\65\1\136\51\65\1\u014e\14\65\1\137\7\65\1\136"+
    "\20\65\1\u014f\45\65\1\137\7\65\1\136\17\65\1\u0150"+
    "\46\65\1\137\7\65\1\136\24\65\1\u0151\41\65\1\137"+
    "\7\65\1\136\14\65\1\u0152\51\65\1\137\7\65\1\136"+
    "\14\65\1\u0153\51\65\1\137\7\65\1\136\40\65\1\u0154"+
    "\25\65\1\137\7\65\1\136\35\65\1\u0155\30\65\1\137"+
    "\7\65\1\136\14\65\1\u0156\51\65\1\137\7\65\1\136"+
    "\35\65\1\u0157\30\65\1\137\7\65\1\136\36\65\1\u0158"+
    "\27\65\1\137\3\65\3\u013b\1\65\1\u0159\66\65\1\137"+
    "\7\65\1\136\32\65\1\u015a\33\65\1\137\3\65\3\u013d"+
    "\1\65\1\u015b\66\65\1\137\7\65\1\136\32\65\1\u015c"+
    "\33\65\1\137\7\65\1\136\36\65\1\u015d\27\65\1\137"+
    "\3\65\3\u0140\1\65\1\u0141\66\65\1\137\7\65\1\136"+
    "\14\65\1\u015e\1\65\1\u015f\12\65\1\u0160\34\65\1\137"+
    "\2\65\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\10\22\1\u0161\21\22\1\0\1\7\1\0\5\22\1\u0161"+
    "\6\22\3\0\1\22\6\0\1\7\1\0\1\7\4\0"+
    "\2\22\3\0\10\22\1\u0162\21\22\1\0\1\7\1\0"+
    "\5\22\1\u0162\6\22\3\0\1\22\5\65\1\136\7\65"+
    "\2\u0163\55\65\1\137\1\65\1\u0163\5\65\1\136\32\65"+
    "\1\u0164\33\65\1\137\7\65\1\136\31\65\1\u0165\34\65"+
    "\1\137\7\65\1\136\32\65\1\u0166\33\65\1\137\7\65"+
    "\1\136\37\65\1\u0167\26\65\1\137\7\65\1\136\14\65"+
    "\1\u0168\51\65\1\137\7\65\1\136\27\65\1\u0169\36\65"+
    "\1\137\7\65\1\136\16\65\1\u016a\2\65\1\u016b\16\65"+
    "\1\u016c\25\65\1\137\7\65\1\136\14\65\1\u016d\51\65"+
    "\1\137\7\65\1\136\24\65\1\u016e\41\65\1\137\7\65"+
    "\1\136\32\65\1\u016f\33\65\1\137\3\65\3\u0152\1\65"+
    "\1\u0170\66\65\1\137\7\65\1\136\35\65\1\u0171\30\65"+
    "\1\137\7\65\1\136\14\65\1\u0172\51\65\1\137\7\65"+
    "\1\136\51\65\1\u0173\14\65\1\137\7\65\1\136\30\65"+
    "\1\u0174\35\65\1\137\7\65\1\136\30\65\1\u0175\35\65"+
    "\1\137\7\65\1\136\36\65\1\u0176\27\65\1\137\7\65"+
    "\1\136\36\65\1\u0177\27\65\1\137\3\65\3\u015c\1\65"+
    "\1\u0178\66\65\1\137\7\65\1\136\24\65\1\u0179\41\65"+
    "\1\137\7\65\1\136\31\65\1\u017a\34\65\1\137\7\65"+
    "\1\136\35\65\1\u017b\30\65\1\137\7\65\1\136\40\65"+
    "\1\u017c\25\65\1\137\2\65\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\23\22\1\u017d\6\22\1\0\1\7"+
    "\1\0\12\22\1\u017d\1\22\3\0\1\22\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\23\22\1\u017e\6\22"+
    "\1\0\1\7\1\0\12\22\1\u017e\1\22\3\0\1\22"+
    "\1\65\3\u0163\1\65\1\u017f\66\65\1\137\7\65\1\136"+
    "\30\65\1\u0180\35\65\1\137\3\65\3\u0165\1\65\1\u0181"+
    "\66\65\1\137\3\65\3\u0166\1\65\1\u0182\66\65\1\137"+
    "\7\65\1\136\32\65\1\u0183\33\65\1\137\7\65\1\136"+
    "\35\65\1\u0184\30\65\1\137\7\65\1\136\20\65\1\u0185"+
    "\45\65\1\137\7\65\1\136\32\65\1\u0186\33\65\1\137"+
    "\7\65\1\136\32\65\1\u0187\33\65\1\137\7\65\1\136"+
    "\36\65\1\u0188\27\65\1\137\7\65\1\136\16\65\1\u0189"+
    "\47\65\1\137\7\65\1\136\21\65\1\u018a\44\65\1\137"+
    "\3\65\3\u016f\1\65\1\u018b\66\65\1\137\3\65\3\u0171"+
    "\1\65\1\u018c\66\65\1\137\7\65\1\136\35\65\1\u018d"+
    "\30\65\1\137\7\65\1\136\16\65\1\u018e\2\65\1\u018f"+
    "\16\65\1\u0190\25\65\1\137\7\65\1\136\33\65\1\u0191"+
    "\32\65\1\137\7\65\1\136\40\65\1\u0192\25\65\1\137"+
    "\7\65\1\136\42\65\1\u0193\23\65\1\137\7\65\1\136"+
    "\51\65\1\u0194\14\65\1\137\7\65\1\136\15\65\1\u0195"+
    "\50\65\1\137\7\65\1\136\37\65\1\u0196\26\65\1\137"+
    "\7\65\1\136\20\65\1\u0197\45\65\1\137\7\65\1\136"+
    "\20\65\1\u0198\45\65\1\137\2\65\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\24\22\1\u0199\5\22\1\0"+
    "\1\7\1\0\13\22\1\u0199\3\0\1\22\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\24\22\1\u019a\5\22"+
    "\1\0\1\7\1\0\13\22\1\u019a\3\0\1\22\5\65"+
    "\1\136\33\65\1\u019b\32\65\1\137\3\65\3\u0183\1\65"+
    "\1\u019c\66\65\1\137\7\65\1\136\24\65\1\u019d\41\65"+
    "\1\137\7\65\1\136\36\65\1\u019e\27\65\1\137\7\65"+
    "\1\136\30\65\1\u019f\35\65\1\137\7\65\1\136\35\65"+
    "\1\u01a0\30\65\1\137\7\65\1\136\40\65\1\u01a1\25\65"+
    "\1\137\7\65\1\136\24\65\1\u01a2\41\65\1\137\7\65"+
    "\1\136\24\65\1\u01a3\41\65\1\137\7\65\1\136\24\65"+
    "\1\u01a4\41\65\1\137\7\65\1\136\32\65\1\u01a5\33\65"+
    "\1\137\7\65\1\136\32\65\1\u01a6\33\65\1\137\7\65"+
    "\1\136\36\65\1\u01a7\27\65\1\137\7\65\1\136\32\65"+
    "\1\u01a8\33\65\1\137\7\65\1\136\27\65\1\u01a9\36\65"+
    "\1\137\7\65\1\136\32\65\1\u01aa\33\65\1\137\7\65"+
    "\1\136\16\65\1\u01ab\2\65\1\u01ac\44\65\1\137\7\65"+
    "\1\136\27\65\1\u01ad\36\65\1\137\7\65\1\136\24\65"+
    "\1\u01ae\41\65\1\137\7\65\1\136\14\65\1\u01af\51\65"+
    "\1\137\7\65\1\136\41\65\1\u01b0\24\65\1\137\2\65"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\3\22"+
    "\1\u01b1\26\22\1\0\1\7\1\0\2\22\1\u01b1\11\22"+
    "\3\0\1\22\6\0\1\7\1\0\1\7\4\0\2\22"+
    "\3\0\3\22\1\u01b2\26\22\1\0\1\7\1\0\2\22"+
    "\1\u01b2\11\22\3\0\1\22\5\65\1\136\32\65\1\u01b3"+
    "\33\65\1\137\7\65\1\136\32\65\1\u01b4\33\65\1\137"+
    "\7\65\1\136\51\65\1\u01b5\14\65\1\137\7\65\1\136"+
    "\33\65\1\u01b6\32\65\1\137\7\65\1\136\30\65\1\u01b7"+
    "\35\65\1\137\7\65\1\136\14\65\1\u01b8\51\65\1\137"+
    "\7\65\1\136\32\65\1\u01b9\33\65\1\137\7\65\1\136"+
    "\16\65\1\u01ba\47\65\1\137\7\65\1\136\32\65\1\u01bb"+
    "\33\65\1\137\7\65\1\136\30\65\1\u01bc\35\65\1\137"+
    "\7\65\1\136\35\65\1\u01bd\30\65\1\137\7\65\1\136"+
    "\40\65\1\u01be\25\65\1\137\3\65\3\u01a8\1\65\1\u01bf"+
    "\66\65\1\137\7\65\1\136\14\65\1\u01c0\51\65\1\137"+
    "\7\65\1\136\35\65\1\u01c1\30\65\1\137\7\65\1\136"+
    "\32\65\1\u01c2\33\65\1\137\7\65\1\136\32\65\1\u01c3"+
    "\33\65\1\137\7\65\1\136\20\65\1\u01c4\45\65\1\137"+
    "\7\65\1\136\22\65\1\u01c5\43\65\1\137\7\65\1\136"+
    "\16\65\1\u01c6\47\65\1\137\7\65\1\136\32\65\1\u01c7"+
    "\33\65\1\137\2\65\6\0\1\7\1\0\1\7\4\0"+
    "\2\22\3\0\4\22\1\u01c8\25\22\1\0\1\7\1\0"+
    "\3\22\1\u01c8\10\22\3\0\1\22\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\4\22\1\u01c9\25\22\1\0"+
    "\1\7\1\0\3\22\1\u01c9\10\22\3\0\1\22\5\65"+
    "\1\136\31\65\1\u01ca\34\65\1\137\3\65\3\u01b4\1\65"+
    "\1\u01cb\66\65\1\137\7\65\1\136\40\65\1\u01cc\25\65"+
    "\1\137\7\65\1\136\32\65\1\u01cd\33\65\1\137\7\65"+
    "\1\136\40\65\1\u01ce\25\65\1\137\7\65\1\136\35\65"+
    "\1\u01cf\30\65\1\137\7\65\1\136\31\65\1\u01d0\34\65"+
    "\1\137\7\65\1\136\14\65\1\u01d1\51\65\1\137\3\65"+
    "\3\u01bb\1\65\1\u01d2\66\65\1\137\7\65\1\136\33\65"+
    "\1\u01d3\32\65\1\137\7\65\1\136\30\65\1\u01d4\35\65"+
    "\1\137\7\65\1\136\14\65\1\u01d5\51\65\1\137\7\65"+
    "\1\136\35\65\1\u01d6\30\65\1\137\7\65\1\136\17\65"+
    "\1\u01d7\46\65\1\137\7\65\1\136\30\65\1\u01d8\35\65"+
    "\1\137\7\65\1\136\35\65\1\u01d9\30\65\1\137\3\65"+
    "\3\u01c4\1\65\1\u01da\66\65\1\137\7\65\1\136\40\65"+
    "\1\u01db\25\65\1\137\7\65\1\136\24\65\1\u01dc\41\65"+
    "\1\137\3\65\3\u01c7\1\65\1\u01dd\66\65\1\137\2\65"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\22\22"+
    "\1\u01de\7\22\1\0\1\7\1\0\11\22\1\u01de\2\22"+
    "\3\0\1\22\6\0\1\7\1\0\1\7\4\0\2\22"+
    "\3\0\22\22\1\u01df\7\22\1\0\1\7\1\0\11\22"+
    "\1\u01df\2\22\3\0\1\22\5\65\1\136\20\65\1\u01e0"+
    "\45\65\1\137\7\65\1\136\36\65\1\u01e1\27\65\1\137"+
    "\7\65\1\136\31\65\1\u01e2\34\65\1\137\7\65\1\136"+
    "\27\65\1\u01e3\36\65\1\137\7\65\1\136\24\65\1\u01e4"+
    "\41\65\1\137\3\65\3\u01d0\1\65\1\u01e5\66\65\1\137"+
    "\7\65\1\136\16\65\1\u01e6\47\65\1\137\7\65\1\136"+
    "\32\65\1\u01e7\33\65\1\137\7\65\1\136\40\65\1\u01e8"+
    "\25\65\1\137\7\65\1\136\35\65\1\u01e9\30\65\1\137"+
    "\7\65\1\136\24\65\1\u01ea\41\65\1\137\3\65\3\u01d7"+
    "\1\65\1\u01eb\66\65\1\137\7\65\1\136\33\65\1\u01ec"+
    "\32\65\1\137\7\65\1\136\30\65\1\u01ed\35\65\1\137"+
    "\7\65\1\136\32\65\1\u01ee\33\65\1\137\7\65\1\136"+
    "\32\65\1\u01ef\33\65\1\137\7\65\1\136\31\65\1\u01f0"+
    "\34\65\1\137\7\65\1\136\40\65\1\u01f1\25\65\1\137"+
    "\7\65\1\136\20\65\1\u01f2\45\65\1\137\7\65\1\136"+
    "\14\65\1\u01f3\51\65\1\137\7\65\1\136\32\65\1\u01f4"+
    "\33\65\1\137\7\65\1\136\24\65\1\u01f5\41\65\1\137"+
    "\7\65\1\136\31\65\1\u01f6\34\65\1\137\7\65\1\136"+
    "\27\65\1\u01f7\36\65\1\137\7\65\1\136\24\65\1\u01f8"+
    "\41\65\1\137\7\65\1\136\32\65\1\u01f9\33\65\1\137"+
    "\7\65\1\136\32\65\1\u01fa\33\65\1\137\7\65\1\136"+
    "\40\65\1\u01fb\25\65\1\137\3\65\3\u01ee\1\65\1\u01fc"+
    "\66\65\1\137\7\65\1\136\31\65\1\u01fd\34\65\1\137"+
    "\7\65\1\136\37\65\1\u01fe\26\65\1\137\7\65\1\136"+
    "\14\65\1\u01ff\51\65\1\137\7\65\1\136\31\65\1\u0200"+
    "\34\65\1\137\7\65\1\136\35\65\1\u0201\30\65\1\137"+
    "\3\65\3\u01f4\1\65\1\u0202\66\65\1\137\7\65\1\136"+
    "\32\65\1\u0203\33\65\1\137\7\65\1\136\20\65\1\u0204"+
    "\45\65\1\137\7\65\1\136\14\65\1\u0205\51\65\1\137"+
    "\7\65\1\136\32\65\1\u0206\33\65\1\137\3\65\3\u01f9"+
    "\1\65\1\u0207\66\65\1\137\7\65\1\136\31\65\1\u0208"+
    "\34\65\1\137\7\65\1\136\27\65\1\u0209\36\65\1\137"+
    "\3\65\3\u01fd\1\65\1\u020a\66\65\1\137\7\65\1\136"+
    "\20\65\1\u020b\45\65\1\137\7\65\1\136\35\65\1\u020c"+
    "\30\65\1\137\7\65\1\136\37\65\1\u020d\26\65\1\137"+
    "\7\65\1\136\24\65\1\u020e\41\65\1\137\7\65\1\136"+
    "\31\65\1\u020f\34\65\1\137\7\65\1\136\31\65\1\u0210"+
    "\34\65\1\137\7\65\1\136\35\65\1\u0211\30\65\1\137"+
    "\3\65\3\u0206\1\65\1\u0212\66\65\1\137\7\65\1\136"+
    "\20\65\1\u0213\45\65\1\137\7\65\1\136\14\65\1\u0214"+
    "\51\65\1\137\3\65\3\u020b\1\65\1\u0215\66\65\1\137"+
    "\7\65\1\136\24\65\1\u0216\41\65\1\137\7\65\1\136"+
    "\20\65\1\u0217\45\65\1\137\7\65\1\136\32\65\1\u0218"+
    "\33\65\1\137\3\65\3\u020f\1\65\1\u0219\66\65\1\137"+
    "\7\65\1\136\37\65\1\u021a\26\65\1\137\7\65\1\136"+
    "\24\65\1\u021b\41\65\1\137\7\65\1\136\31\65\1\u021c"+
    "\34\65\1\137\7\65\1\136\35\65\1\u021d\30\65\1\137"+
    "\7\65\1\136\32\65\1\u021e\33\65\1\137\3\65\3\u0217"+
    "\1\65\1\u021f\66\65\1\137\3\65\3\u0218\1\65\1\u0220"+
    "\66\65\1\137\7\65\1\136\20\65\1\u0221\45\65\1\137"+
    "\7\65\1\136\32\65\1\u0222\33\65\1\137\7\65\1\136"+
    "\37\65\1\u0223\26\65\1\137\7\65\1\136\24\65\1\u0224"+
    "\41\65\1\137\3\65\3\u021e\1\65\1\u0225\66\65\1\137"+
    "\3\65\3\u0221\1\65\1\u0226\66\65\1\137\3\65\3\u0222"+
    "\1\65\1\u0227\66\65\1\137\7\65\1\136\20\65\1\u0228"+
    "\45\65\1\137\7\65\1\136\32\65\1\u0229\33\65\1\137"+
    "\3\65\3\u0228\1\65\1\u022a\66\65\1\137\3\65\3\u0229"+
    "\1\65\1\u022b\66\65\1\137\2\65";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30492];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\4\11\2\1\3\11"+
    "\3\1\4\11\4\0\1\1\25\0\2\1\3\0\1\11"+
    "\43\0\2\1\1\11\1\0\1\11\23\0\1\11\15\0"+
    "\1\11\5\0\2\1\45\0\1\11\1\0\2\1\42\0"+
    "\1\11\3\0\2\1\1\11\4\0\1\11\3\0\1\11"+
    "\1\0\1\11\6\0\1\11\14\0\1\11\4\0\2\1"+
    "\5\0\1\11\12\0\2\11\5\0\1\11\10\0\1\11"+
    "\1\0\2\1\11\0\1\11\3\0\1\11\16\0\1\11"+
    "\1\0\2\1\5\0\2\11\15\0\1\11\1\0\1\11"+
    "\5\0\2\1\15\0\1\11\7\0\1\11\4\0\2\1"+
    "\1\11\1\0\2\11\10\0\2\11\14\0\2\1\1\0"+
    "\1\11\24\0\2\1\14\0\1\11\10\0\2\1\1\0"+
    "\1\11\6\0\1\11\7\0\1\11\2\0\1\11\2\1"+
    "\5\0\1\11\5\0\1\11\20\0\1\11\5\0\1\11"+
    "\4\0\1\11\2\0\1\11\7\0\1\11\2\0\1\11"+
    "\3\0\1\11\5\0\2\11\4\0\3\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[555];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

	private Symbol symbol(int type) {
		return new Symbol(type, new Token(type, yyline + 1, yycolumn + 1));
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, new Token(type, (String) value, yyline + 1, yycolumn + 1));
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormsLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new java_cup.runtime.Symbol(FormsParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 79: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 80: break;
          case 3:
            { return symbol(EXCL, yytext());
            }
            // fall through
          case 81: break;
          case 4:
            { return symbol(QUOTE, yytext());
            }
            // fall through
          case 82: break;
          case 5:
            { return symbol(SYMB, yytext());
            }
            // fall through
          case 83: break;
          case 6:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 84: break;
          case 7:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 85: break;
          case 8:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 86: break;
          case 9:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 87: break;
          case 10:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 88: break;
          case 11:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 89: break;
          case 12:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 90: break;
          case 13:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 91: break;
          case 14:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 92: break;
          case 15:
            { return symbol(PARAM, yytext());
            }
            // fall through
          case 93: break;
          case 16:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 94: break;
          case 17:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 95: break;
          case 18:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 96: break;
          case 19:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 97: break;
          case 20:
            { return symbol(EMPTY, yytext());
            }
            // fall through
          case 98: break;
          case 21:
            { return symbol(STR_NUMBER, yytext());
            }
            // fall through
          case 99: break;
          case 22:
            { return symbol(STR, yytext());
            }
            // fall through
          case 100: break;
          case 23:
            { return symbol(ID_, yytext());
            }
            // fall through
          case 101: break;
          case 24:
            { return symbol(ID, yytext());
            }
            // fall through
          case 102: break;
          case 25:
            { return symbol(YES, yytext());
            }
            // fall through
          case 103: break;
          case 26:
            { return symbol(URL, yytext());
            }
            // fall through
          case 104: break;
          case 27:
            { return symbol(THEME, yytext());
            }
            // fall through
          case 105: break;
          case 28:
            { return symbol(OPTION_V, yytext());
            }
            // fall through
          case 106: break;
          case 29:
            { return symbol(BTN, yytext());
            }
            // fall through
          case 107: break;
          case 30:
            { return symbol(CLASS, yytext());
            }
            // fall through
          case 108: break;
          case 31:
            { return symbol(COMBO, yytext());
            }
            // fall through
          case 109: break;
          case 32:
            { return symbol(ROWS, yytext());
            }
            // fall through
          case 110: break;
          case 33:
            { return symbol(RADIO, yytext());
            }
            // fall through
          case 111: break;
          case 34:
            { return symbol(CENTER, yytext());
            }
            // fall through
          case 112: break;
          case 35:
            { return symbol(IMG, yytext());
            }
            // fall through
          case 113: break;
          case 36:
            { return symbol(INDEX, yytext());
            }
            // fall through
          case 114: break;
          case 37:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 115: break;
          case 38:
            { return symbol(TITLE, yytext());
            }
            // fall through
          case 116: break;
          case 39:
            { return symbol(RIGHT, yytext());
            }
            // fall through
          case 117: break;
          case 40:
            { return symbol(FILE, yytext());
            }
            // fall through
          case 118: break;
          case 41:
            { return symbol(USER, yytext());
            }
            // fall through
          case 119: break;
          case 42:
            { return symbol(CHECKBOX, yytext());
            }
            // fall through
          case 120: break;
          case 43:
            { return symbol(COLUMNS, yytext());
            }
            // fall through
          case 121: break;
          case 44:
            { return symbol(OPTION, yytext());
            }
            // fall through
          case 122: break;
          case 45:
            { return symbol(PASS, yytext());
            }
            // fall through
          case 123: break;
          case 46:
            { return symbol(LEFT, yytext());
            }
            // fall through
          case 124: break;
          case 47:
            { return symbol(REQUIRED, yytext());
            }
            // fall through
          case 125: break;
          case 48:
            { return symbol(DATE, yytext());
            }
            // fall through
          case 126: break;
          case 49:
            { return symbol(ALIGN, yytext());
            }
            // fall through
          case 127: break;
          case 50:
            { return symbol(TEXT_AREA, yytext());
            }
            // fall through
          case 128: break;
          case 51:
            { return symbol(FORM, yytext());
            }
            // fall through
          case 129: break;
          case 52:
            { return symbol(JUSTIFY, yytext());
            }
            // fall through
          case 130: break;
          case 53:
            { return symbol(TEXT_FIELD, yytext());
            }
            // fall through
          case 131: break;
          case 54:
            { return symbol(FIN_SOL, yytext());
            }
            // fall through
          case 132: break;
          case 55:
            { return symbol(INIT_SOL, yytext());
            }
            // fall through
          case 133: break;
          case 56:
            { return symbol(FIELD_N, yytext());
            }
            // fall through
          case 134: break;
          case 57:
            { return symbol(ADD_USER, yytext());
            }
            // fall through
          case 135: break;
          case 58:
            { return symbol(LOGIN, yytext());
            }
            // fall through
          case 136: break;
          case 59:
            { return symbol(TEXT, yytext());
            }
            // fall through
          case 137: break;
          case 60:
            { return symbol(NEW_USER, yytext());
            }
            // fall through
          case 138: break;
          case 61:
            { return symbol(FIN_MANY_SOL, yytext());
            }
            // fall through
          case 139: break;
          case 62:
            { return symbol(INIT_MANY_SOL, yytext());
            }
            // fall through
          case 140: break;
          case 63:
            { return symbol(DATE_ADD, yytext());
            }
            // fall through
          case 141: break;
          case 64:
            { return symbol(NEW_PASS, yytext());
            }
            // fall through
          case 142: break;
          case 65:
            { return symbol(OLD_USER, yytext());
            }
            // fall through
          case 143: break;
          case 66:
            { return symbol(DEL_USER, yytext());
            }
            // fall through
          case 144: break;
          case 67:
            { return symbol(NEW_FORM, yytext());
            }
            // fall through
          case 145: break;
          case 68:
            { return symbol(USER_C, yytext());
            }
            // fall through
          case 146: break;
          case 69:
            { return symbol(EDIT_USER, yytext());
            }
            // fall through
          case 147: break;
          case 70:
            { return symbol(ADD_COMP, yytext());
            }
            // fall through
          case 148: break;
          case 71:
            { return symbol(DATE_MOD, yytext());
            }
            // fall through
          case 149: break;
          case 72:
            { return symbol(DEL_COMP, yytext());
            }
            // fall through
          case 150: break;
          case 73:
            { return symbol(DEL_FORM, yytext());
            }
            // fall through
          case 151: break;
          case 74:
            { return symbol(CRED, yytext());
            }
            // fall through
          case 152: break;
          case 75:
            { return symbol(EDIT_COMP, yytext());
            }
            // fall through
          case 153: break;
          case 76:
            { return symbol(EDIT_FORM, yytext());
            }
            // fall through
          case 154: break;
          case 77:
            { return symbol(PARAM_C, yytext());
            }
            // fall through
          case 155: break;
          case 78:
            { return symbol(PARAM_F, yytext());
            }
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
