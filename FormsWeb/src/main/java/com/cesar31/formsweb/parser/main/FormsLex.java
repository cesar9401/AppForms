// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: forms.flex

package com.cesar31.formsweb.parser.main;

import com.cesar31.formsweb.model.Token;
import static com.cesar31.formsweb.parser.main.FormsParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class FormsLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\2\6\1\0\2\6\1\10\1\11"+
    "\1\12\1\13\1\6\1\14\1\15\11\16\1\17\1\6"+
    "\1\20\1\0\1\21\2\6\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\6\1\57\1\0\2\52\1\60\1\61\1\62"+
    "\1\63\2\52\1\64\2\52\1\65\1\52\1\66\1\67"+
    "\3\52\1\70\1\71\1\72\5\52\1\73\1\74\1\75"+
    "\7\0\1\1\32\0\1\1\1\6\10\0\1\52\12\0"+
    "\1\52\4\0\1\52\4\0\1\6\27\52\1\0\37\52"+
    "\1\0\u01ca\52\4\0\14\52\16\0\5\52\7\0\1\52"+
    "\1\0\1\52\21\0\165\52\1\0\2\52\2\0\4\52"+
    "\1\0\1\52\6\0\1\52\1\0\3\52\1\0\1\52"+
    "\1\0\24\52\1\0\123\52\1\0\213\52\1\0\255\52"+
    "\1\0\46\52\2\0\1\52\6\0\51\52\10\0\55\52"+
    "\1\0\1\52\1\0\2\52\1\0\2\52\1\0\1\52"+
    "\10\0\33\52\4\0\4\52\35\0\13\52\5\0\100\52"+
    "\12\76\4\0\146\52\1\0\10\52\2\0\12\52\1\0"+
    "\6\52\12\76\3\52\2\0\1\52\20\0\73\52\2\0"+
    "\145\52\16\0\12\76\54\52\4\0\1\52\2\0\1\52"+
    "\2\0\56\52\22\0\34\52\4\0\13\52\65\0\25\52"+
    "\1\0\10\52\25\0\17\52\1\0\201\52\2\0\12\76"+
    "\1\0\23\52\1\0\10\52\2\0\2\52\2\0\26\52"+
    "\1\0\7\52\1\0\1\52\3\0\4\52\2\0\11\52"+
    "\2\0\2\52\2\0\4\52\10\0\1\52\4\0\2\52"+
    "\1\0\5\52\2\0\12\76\2\52\12\0\1\52\1\0"+
    "\1\52\2\0\3\52\1\0\6\52\4\0\2\52\2\0"+
    "\26\52\1\0\7\52\1\0\2\52\1\0\2\52\1\0"+
    "\2\52\2\0\1\52\1\0\5\52\4\0\2\52\2\0"+
    "\3\52\3\0\1\52\7\0\4\52\1\0\1\52\7\0"+
    "\12\76\6\52\13\0\3\52\1\0\11\52\1\0\3\52"+
    "\1\0\26\52\1\0\7\52\1\0\2\52\1\0\5\52"+
    "\2\0\12\52\1\0\3\52\1\0\3\52\2\0\1\52"+
    "\17\0\4\52\2\0\12\76\11\0\7\52\1\0\3\52"+
    "\1\0\10\52\2\0\2\52\2\0\26\52\1\0\7\52"+
    "\1\0\2\52\1\0\5\52\2\0\11\52\2\0\2\52"+
    "\2\0\3\52\10\0\2\52\4\0\2\52\1\0\5\52"+
    "\2\0\12\76\1\0\1\52\20\0\2\52\1\0\6\52"+
    "\3\0\3\52\1\0\4\52\3\0\2\52\1\0\1\52"+
    "\1\0\2\52\3\0\2\52\3\0\3\52\3\0\14\52"+
    "\4\0\5\52\3\0\3\52\1\0\4\52\2\0\1\52"+
    "\6\0\1\52\16\0\12\76\20\0\15\52\1\0\3\52"+
    "\1\0\27\52\1\0\20\52\3\0\10\52\1\0\3\52"+
    "\1\0\4\52\7\0\2\52\1\0\3\52\5\0\4\52"+
    "\2\0\12\76\20\0\4\52\1\0\10\52\1\0\3\52"+
    "\1\0\27\52\1\0\12\52\1\0\5\52\2\0\11\52"+
    "\1\0\3\52\1\0\4\52\7\0\2\52\7\0\1\52"+
    "\1\0\4\52\2\0\12\76\1\0\2\52\15\0\4\52"+
    "\1\0\10\52\1\0\3\52\1\0\63\52\1\0\3\52"+
    "\1\0\5\52\5\0\4\52\7\0\5\52\2\0\12\76"+
    "\12\0\6\52\2\0\2\52\1\0\22\52\3\0\30\52"+
    "\1\0\11\52\1\0\1\52\2\0\7\52\3\0\1\52"+
    "\4\0\6\52\1\0\1\52\1\0\10\52\6\0\12\76"+
    "\2\0\2\52\15\0\72\52\5\0\17\52\1\0\12\76"+
    "\47\0\2\52\1\0\1\52\1\0\5\52\1\0\30\52"+
    "\1\0\1\52\1\0\27\52\2\0\5\52\1\0\1\52"+
    "\1\0\6\52\2\0\12\76\2\0\4\52\40\0\1\52"+
    "\27\0\2\52\6\0\12\76\13\0\1\52\1\0\1\52"+
    "\1\0\1\52\4\0\12\52\1\0\44\52\4\0\24\52"+
    "\1\0\22\52\1\0\44\52\11\0\1\52\71\0\100\52"+
    "\12\76\6\0\100\52\12\76\4\52\2\0\46\52\1\0"+
    "\1\52\5\0\1\52\2\0\53\52\1\0\115\52\1\0"+
    "\4\52\2\0\7\52\1\0\1\52\1\0\4\52\2\0"+
    "\51\52\1\0\4\52\2\0\41\52\1\0\4\52\2\0"+
    "\7\52\1\0\1\52\1\0\4\52\2\0\17\52\1\0"+
    "\71\52\1\0\4\52\2\0\103\52\2\0\3\52\40\0"+
    "\20\52\20\0\126\52\2\0\6\52\3\0\u016c\52\2\0"+
    "\21\52\1\1\32\52\5\0\113\52\3\0\13\52\7\0"+
    "\15\52\1\0\7\52\13\0\25\52\13\0\24\52\14\0"+
    "\15\52\1\0\3\52\1\0\2\52\14\0\124\52\3\0"+
    "\1\52\4\0\2\52\2\0\12\76\41\0\3\52\2\0"+
    "\12\76\6\0\131\52\7\0\53\52\5\0\106\52\12\0"+
    "\37\52\1\0\14\52\4\0\14\52\12\0\12\76\36\52"+
    "\2\0\5\52\13\0\54\52\4\0\32\52\6\0\12\76"+
    "\46\0\34\52\4\0\77\52\1\0\35\52\2\0\1\52"+
    "\12\76\6\0\12\76\15\0\1\52\10\0\17\52\101\0"+
    "\114\52\4\0\12\76\21\0\11\52\14\0\60\52\12\76"+
    "\72\52\14\0\70\52\10\0\12\76\3\0\3\52\12\76"+
    "\44\52\2\0\11\52\7\0\53\52\2\0\3\52\20\0"+
    "\3\52\1\0\47\52\5\0\372\52\1\0\33\52\2\0"+
    "\6\52\2\0\46\52\2\0\6\52\2\0\10\52\1\0"+
    "\1\52\1\0\1\52\1\0\1\52\1\0\37\52\2\0"+
    "\65\52\1\0\7\52\1\0\1\52\3\0\3\52\1\0"+
    "\7\52\3\0\4\52\2\0\6\52\4\0\15\52\5\0"+
    "\3\52\1\0\7\52\3\0\13\1\35\0\2\1\5\0"+
    "\1\1\17\0\2\52\23\0\1\52\12\0\1\1\21\0"+
    "\1\52\15\0\1\52\20\0\15\52\63\0\41\52\21\0"+
    "\1\52\4\0\1\52\2\0\12\52\1\0\1\52\3\0"+
    "\5\52\6\0\1\52\1\0\1\52\1\0\1\52\1\0"+
    "\4\52\1\0\13\52\2\0\4\52\5\0\5\52\4\0"+
    "\1\52\21\0\51\52\u022d\0\64\52\26\0\57\52\1\0"+
    "\57\52\1\0\205\52\6\0\11\52\14\0\46\52\1\0"+
    "\1\52\5\0\1\52\2\0\70\52\7\0\1\52\17\0"+
    "\30\52\11\0\7\52\1\0\7\52\1\0\7\52\1\0"+
    "\7\52\1\0\7\52\1\0\7\52\1\0\7\52\1\0"+
    "\7\52\1\0\40\52\57\0\1\52\320\0\1\1\4\0"+
    "\3\52\31\0\17\52\1\0\5\52\2\0\5\52\4\0"+
    "\126\52\2\0\2\52\2\0\3\52\1\0\132\52\1\0"+
    "\4\52\5\0\53\52\1\0\136\52\21\0\33\52\65\0"+
    "\306\52\112\0\360\52\20\0\215\52\103\0\56\52\2\0"+
    "\15\52\3\0\20\52\12\76\2\52\24\0\63\52\1\0"+
    "\12\52\1\0\163\52\45\0\11\52\2\0\147\52\2\0"+
    "\65\52\2\0\5\52\60\0\61\52\30\0\64\52\14\0"+
    "\106\52\12\0\12\76\6\0\30\52\3\0\1\52\1\0"+
    "\3\52\12\76\44\52\2\0\44\52\14\0\35\52\3\0"+
    "\101\52\16\0\1\52\12\76\6\0\20\52\12\76\5\52"+
    "\1\0\67\52\11\0\16\52\2\0\12\76\6\0\27\52"+
    "\3\0\111\52\30\0\3\52\2\0\20\52\2\0\5\52"+
    "\12\0\6\52\2\0\6\52\2\0\6\52\11\0\7\52"+
    "\1\0\7\52\1\0\53\52\1\0\14\52\10\0\173\52"+
    "\1\0\2\52\2\0\12\76\6\0\244\52\14\0\27\52"+
    "\4\0\61\52\4\0\156\52\2\0\152\52\46\0\7\52"+
    "\14\0\5\52\5\0\14\52\1\0\15\52\1\0\5\52"+
    "\1\0\1\52\1\0\2\52\1\0\2\52\1\0\154\52"+
    "\41\0\153\52\22\0\100\52\2\0\66\52\50\0\14\52"+
    "\4\0\20\52\20\0\20\52\3\0\2\52\30\0\3\52"+
    "\40\0\5\52\1\0\207\52\23\0\12\76\7\0\32\52"+
    "\4\0\1\52\1\0\32\52\13\0\131\52\3\0\6\52"+
    "\2\0\6\52\2\0\6\52\2\0\3\52\43\0\14\52"+
    "\1\0\32\52\1\0\23\52\1\0\2\52\1\0\17\52"+
    "\2\0\16\52\42\0\173\52\105\0\65\52\210\0\1\52"+
    "\202\0\35\52\3\0\61\52\17\0\1\52\37\0\40\52"+
    "\15\0\36\52\5\0\53\52\5\0\36\52\2\0\44\52"+
    "\4\0\10\52\1\0\5\52\52\0\236\52\2\0\12\76"+
    "\6\0\44\52\4\0\44\52\4\0\50\52\10\0\64\52"+
    "\234\0\67\52\11\0\26\52\12\0\10\52\230\0\6\52"+
    "\2\0\1\52\1\0\54\52\1\0\2\52\3\0\1\52"+
    "\2\0\27\52\12\0\27\52\11\0\37\52\101\0\23\52"+
    "\1\0\2\52\12\0\26\52\12\0\32\52\106\0\70\52"+
    "\6\0\2\52\100\0\4\52\1\0\2\52\5\0\10\52"+
    "\1\0\3\52\1\0\35\52\2\0\3\52\4\0\1\52"+
    "\40\0\35\52\3\0\35\52\43\0\10\52\1\0\36\52"+
    "\31\0\66\52\12\0\26\52\12\0\23\52\15\0\22\52"+
    "\156\0\111\52\67\0\63\52\15\0\63\52\15\0\50\52"+
    "\10\0\12\76\306\0\35\52\12\0\1\52\10\0\41\52"+
    "\217\0\27\52\11\0\107\52\37\0\12\76\17\0\74\52"+
    "\25\0\31\52\7\0\12\76\6\0\65\52\1\0\12\76"+
    "\4\0\3\52\11\0\44\52\2\0\1\52\11\0\105\52"+
    "\4\0\4\52\3\0\12\76\1\52\1\0\1\52\43\0"+
    "\22\52\1\0\45\52\6\0\1\52\101\0\7\52\1\0"+
    "\1\52\1\0\4\52\1\0\17\52\1\0\12\52\7\0"+
    "\73\52\5\0\12\76\6\0\4\52\1\0\10\52\2\0"+
    "\2\52\2\0\26\52\1\0\7\52\1\0\2\52\1\0"+
    "\5\52\1\0\12\52\2\0\2\52\2\0\3\52\2\0"+
    "\1\52\6\0\1\52\5\0\7\52\2\0\7\52\3\0"+
    "\5\52\213\0\113\52\5\0\12\76\4\0\2\52\40\0"+
    "\106\52\1\0\1\52\10\0\12\76\246\0\66\52\2\0"+
    "\11\52\27\0\6\52\42\0\101\52\3\0\1\52\13\0"+
    "\12\76\46\0\71\52\7\0\12\76\66\0\33\52\2\0"+
    "\17\52\4\0\12\76\306\0\73\52\145\0\100\52\12\76"+
    "\25\0\1\52\240\0\10\52\2\0\56\52\2\0\10\52"+
    "\1\0\2\52\33\0\77\52\10\0\1\52\10\0\112\52"+
    "\3\0\1\52\42\0\71\52\7\0\11\52\1\0\55\52"+
    "\1\0\11\52\17\0\12\76\30\0\36\52\2\0\26\52"+
    "\1\0\16\52\111\0\7\52\1\0\2\52\1\0\54\52"+
    "\3\0\1\52\1\0\2\52\1\0\11\52\10\0\12\76"+
    "\6\0\6\52\1\0\2\52\1\0\45\52\1\0\2\52"+
    "\1\0\6\52\7\0\12\76\u0136\0\27\52\11\0\232\52"+
    "\146\0\157\52\21\0\304\52\274\0\57\52\321\0\107\52"+
    "\271\0\71\52\7\0\37\52\1\0\12\76\146\0\36\52"+
    "\2\0\5\52\13\0\67\52\11\0\4\52\14\0\12\76"+
    "\11\0\25\52\5\0\23\52\260\0\100\52\200\0\113\52"+
    "\4\0\71\52\7\0\21\52\100\0\2\52\1\0\1\52"+
    "\34\0\370\52\10\0\363\52\15\0\37\52\61\0\3\52"+
    "\21\0\4\52\10\0\u018c\52\4\0\153\52\5\0\15\52"+
    "\3\0\11\52\7\0\12\52\3\0\2\52\306\0\5\52"+
    "\3\0\6\52\10\0\10\52\2\0\7\52\36\0\4\52"+
    "\224\0\3\52\273\0\125\52\1\0\107\52\1\0\2\52"+
    "\2\0\1\52\2\0\2\52\2\0\4\52\1\0\14\52"+
    "\1\0\1\52\1\0\7\52\1\0\101\52\1\0\4\52"+
    "\2\0\10\52\1\0\7\52\1\0\34\52\1\0\4\52"+
    "\1\0\5\52\1\0\1\52\3\0\7\52\1\0\u0154\52"+
    "\2\0\31\52\1\0\31\52\1\0\37\52\1\0\31\52"+
    "\1\0\37\52\1\0\31\52\1\0\37\52\1\0\31\52"+
    "\1\0\37\52\1\0\31\52\1\0\10\52\2\0\62\76"+
    "\67\52\4\0\62\52\10\0\1\52\16\0\1\52\26\0"+
    "\5\52\1\0\17\52\120\0\7\52\1\0\21\52\2\0"+
    "\7\52\1\0\2\52\1\0\5\52\325\0\55\52\3\0"+
    "\16\52\2\0\12\76\4\0\1\52\u0171\0\60\52\12\76"+
    "\6\0\305\52\13\0\7\52\51\0\114\52\4\0\12\76"+
    "\246\0\4\52\1\0\33\52\1\0\2\52\1\0\1\52"+
    "\2\0\1\52\1\0\12\52\1\0\4\52\1\0\1\52"+
    "\1\0\1\52\6\0\1\52\4\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\3\52\1\0\2\52\1\0\1\52"+
    "\2\0\1\52\1\0\1\52\1\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\2\52\1\0\1\52\2\0\4\52"+
    "\1\0\7\52\1\0\4\52\1\0\4\52\1\0\1\52"+
    "\1\0\12\52\1\0\21\52\5\0\3\52\1\0\5\52"+
    "\1\0\21\52\164\0\32\52\6\0\32\52\6\0\32\52"+
    "\166\0\327\52\51\0\65\52\13\0\336\52\2\0\u0182\52"+
    "\16\0\u0131\52\37\0\36\52\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\13\1\14\1\15\1\16\3\17"+
    "\1\20\1\21\1\22\1\23\4\0\1\24\25\0\2\17"+
    "\2\0\1\25\4\0\1\26\45\0\2\17\1\0\1\27"+
    "\2\0\1\30\27\0\1\31\11\0\1\32\10\0\1\33"+
    "\5\0\2\17\2\0\1\34\50\0\1\35\1\0\2\17"+
    "\21\0\1\36\25\0\1\37\3\0\2\17\1\0\1\40"+
    "\5\0\1\41\4\0\1\42\2\0\1\43\10\0\1\44"+
    "\6\0\1\45\10\0\1\46\4\0\2\17\6\0\1\47"+
    "\14\0\1\50\1\0\1\51\6\0\1\52\11\0\1\53"+
    "\1\0\2\17\13\0\1\54\4\0\1\55\17\0\1\56"+
    "\1\0\2\17\6\0\1\57\1\0\1\60\21\0\1\61"+
    "\2\0\1\62\5\0\2\17\11\0\1\63\11\0\1\64"+
    "\10\0\1\65\4\0\2\17\1\0\1\66\2\0\1\67"+
    "\1\0\1\70\2\0\1\71\11\0\1\72\1\0\1\73"+
    "\14\0\2\17\2\0\1\74\25\0\1\75\1\76\16\0"+
    "\1\77\10\0\2\17\3\0\1\100\7\0\1\101\10\0"+
    "\1\102\3\0\1\103\1\104\1\105\7\0\1\106\6\0"+
    "\1\107\6\0\1\110\14\0\1\111\6\0\1\112\5\0"+
    "\1\113\3\0\1\114\10\0\1\115\3\0\1\116\4\0"+
    "\1\117\6\0\1\120\1\0\1\121\5\0\1\122\1\0"+
    "\1\123\1\0\1\124\3\0\1\125\1\0\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[652];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\77\0\374\0\u013b\0\u013b"+
    "\0\77\0\77\0\77\0\77\0\u017a\0\u01b9\0\77\0\77"+
    "\0\77\0\u017a\0\u01f8\0\u0237\0\77\0\77\0\77\0\77"+
    "\0\176\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0"+
    "\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8"+
    "\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\77\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\77\0\u0a95\0\u0ad4\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\77\0\u146d\0\u14ac\0\77"+
    "\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4"+
    "\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c"+
    "\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\77"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\77\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06"+
    "\0\u1e45\0\u1e84\0\77\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\77\0\u20fa\0\u2139\0\u2178"+
    "\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370"+
    "\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568"+
    "\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760"+
    "\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958"+
    "\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\77\0\u2ad2\0\u2b11"+
    "\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09"+
    "\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01"+
    "\0\u2f40\0\u2f7f\0\77\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba"+
    "\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2"+
    "\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa"+
    "\0\77\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\77"+
    "\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\77\0\u379e\0\u37dd"+
    "\0\u381c\0\u385b\0\77\0\u389a\0\u38d9\0\77\0\u3918\0\u3957"+
    "\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\77\0\u3b10"+
    "\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\77\0\u3c8a\0\u3cc9"+
    "\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\77\0\u3e82"+
    "\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a"+
    "\0\u40b9\0\u40f8\0\u4137\0\77\0\u4176\0\u41b5\0\u41f4\0\u4233"+
    "\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b"+
    "\0\77\0\u446a\0\77\0\u44a9\0\u44e8\0\u4527\0\u4566\0\u45a5"+
    "\0\u45e4\0\77\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e"+
    "\0\u479d\0\u47dc\0\u481b\0\77\0\u485a\0\u4899\0\u48d8\0\u4917"+
    "\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f"+
    "\0\u4b4e\0\u4b8d\0\77\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\77"+
    "\0\u4cc8\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81"+
    "\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a\0\77"+
    "\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4\0\u51f3\0\u5232"+
    "\0\u5271\0\77\0\u52b0\0\77\0\u52ef\0\u532e\0\u536d\0\u53ac"+
    "\0\u53eb\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u55a4"+
    "\0\u55e3\0\u5622\0\u5661\0\u56a0\0\u56df\0\77\0\u571e\0\u575d"+
    "\0\77\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898\0\u58d7\0\u5916"+
    "\0\u5955\0\u5994\0\u59d3\0\u5a12\0\u5a51\0\u5a90\0\u5acf\0\u5b0e"+
    "\0\u5b4d\0\77\0\u5b8c\0\u5bcb\0\u5c0a\0\u5c49\0\u5c88\0\u5cc7"+
    "\0\u5d06\0\u5d45\0\u5d84\0\77\0\u5dc3\0\u5e02\0\u5e41\0\u5e80"+
    "\0\u5ebf\0\u5efe\0\u5f3d\0\u5f7c\0\77\0\u5fbb\0\u5ffa\0\u6039"+
    "\0\u6078\0\u60b7\0\u60f6\0\u6135\0\77\0\u6174\0\u61b3\0\77"+
    "\0\u61f2\0\77\0\u6231\0\u6270\0\77\0\u62af\0\u62ee\0\u632d"+
    "\0\u636c\0\u63ab\0\u63ea\0\u6429\0\u6468\0\u64a7\0\77\0\u64e6"+
    "\0\77\0\u6525\0\u6564\0\u65a3\0\u65e2\0\u6621\0\u6660\0\u669f"+
    "\0\u66de\0\u671d\0\u675c\0\u679b\0\u67da\0\u6819\0\u6858\0\u6897"+
    "\0\u68d6\0\77\0\u6915\0\u6954\0\u6993\0\u69d2\0\u6a11\0\u6a50"+
    "\0\u6a8f\0\u6ace\0\u6b0d\0\u6b4c\0\u6b8b\0\u6bca\0\u6c09\0\u6c48"+
    "\0\u6c87\0\u6cc6\0\u6d05\0\u6d44\0\u6d83\0\u6dc2\0\u6e01\0\u6e40"+
    "\0\u6e7f\0\u6ebe\0\u6efd\0\u6f3c\0\u6f7b\0\u6fba\0\u6ff9\0\u7038"+
    "\0\u7077\0\u70b6\0\u70f5\0\u7134\0\u7173\0\u71b2\0\u71f1\0\77"+
    "\0\u7230\0\u726f\0\u72ae\0\u72ed\0\u732c\0\u736b\0\u73aa\0\u73e9"+
    "\0\u7428\0\u7467\0\u74a6\0\u74e5\0\u7524\0\77\0\u7563\0\u75a2"+
    "\0\u75e1\0\u7620\0\u765f\0\u769e\0\u76dd\0\77\0\u771c\0\u775b"+
    "\0\u779a\0\u77d9\0\u7818\0\u7857\0\u7896\0\u78d5\0\77\0\u7914"+
    "\0\u7953\0\u7992\0\77\0\u017a\0\u017a\0\u79d1\0\u7a10\0\u7a4f"+
    "\0\u7a8e\0\u7acd\0\u7b0c\0\u7b4b\0\77\0\u7b8a\0\u7bc9\0\u7c08"+
    "\0\u7c47\0\u7c86\0\u7cc5\0\77\0\u7d04\0\u7d43\0\u7d82\0\u7dc1"+
    "\0\u7e00\0\u7e3f\0\77\0\u7e7e\0\u7ebd\0\u7efc\0\u7f3b\0\u7f7a"+
    "\0\u7fb9\0\u7ff8\0\u8037\0\u8076\0\u80b5\0\u80f4\0\u8133\0\77"+
    "\0\u8172\0\u81b1\0\u81f0\0\u822f\0\u826e\0\u82ad\0\77\0\u82ec"+
    "\0\u832b\0\u836a\0\u83a9\0\u83e8\0\77\0\u8427\0\u8466\0\u84a5"+
    "\0\77\0\u84e4\0\u8523\0\u8562\0\u85a1\0\u85e0\0\u861f\0\u865e"+
    "\0\u869d\0\77\0\u86dc\0\u871b\0\u875a\0\77\0\u8799\0\u87d8"+
    "\0\u8817\0\u8856\0\77\0\u8895\0\u88d4\0\u8913\0\u8952\0\u8991"+
    "\0\u89d0\0\77\0\u8a0f\0\77\0\u8a4e\0\u8a8d\0\u8acc\0\u8b0b"+
    "\0\u8b4a\0\77\0\u8b89\0\77\0\u8bc8\0\77\0\u8c07\0\u8c46"+
    "\0\u8c85\0\77\0\u8cc4\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[652];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\5\22\1\23\2\22\1\24\21\22\1\25\1\7"+
    "\1\26\4\22\1\23\1\24\6\22\1\27\1\2\1\30"+
    "\1\22\100\0\3\31\1\0\1\32\72\0\1\31\1\3"+
    "\1\31\1\0\1\32\71\0\1\33\3\34\1\33\1\35"+
    "\1\33\1\36\3\33\1\36\1\33\1\37\1\40\3\33"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\2\33\1\47"+
    "\1\50\1\33\1\51\1\52\1\53\1\54\1\55\1\33"+
    "\1\56\1\57\1\60\1\61\6\33\1\0\1\33\1\36"+
    "\14\33\1\0\1\33\1\62\6\0\1\7\1\0\1\7"+
    "\4\0\2\7\3\0\32\7\1\0\1\7\1\0\14\7"+
    "\3\0\1\7\6\0\1\7\1\0\1\7\4\0\2\22"+
    "\3\0\32\22\1\0\1\7\1\0\14\22\3\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\16\3\0\32\22"+
    "\1\0\1\7\1\0\14\22\3\0\1\22\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\10\22\1\63\21\22"+
    "\1\0\1\7\1\0\5\22\1\63\6\22\3\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\15\22"+
    "\1\64\14\22\1\0\1\7\1\0\7\22\1\64\4\22"+
    "\3\0\1\22\1\0\3\32\1\0\1\35\71\0\2\65"+
    "\2\66\1\65\1\67\47\65\1\0\16\65\1\70\2\65"+
    "\1\33\3\34\1\33\1\35\7\33\1\37\1\40\3\33"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\2\33\1\47"+
    "\1\50\1\33\1\51\1\52\1\53\1\54\1\55\1\33"+
    "\1\56\1\57\1\60\1\61\6\33\1\0\16\33\1\70"+
    "\1\33\1\62\1\0\3\35\73\0\1\71\1\65\2\66"+
    "\1\71\1\67\47\71\1\0\16\71\1\70\2\71\1\65"+
    "\1\72\2\73\1\65\1\74\7\65\2\75\36\65\1\0"+
    "\16\65\1\70\1\65\1\75\1\65\1\72\2\73\1\65"+
    "\1\74\7\65\2\76\36\65\1\0\16\65\1\70\1\65"+
    "\1\75\2\65\2\66\1\65\1\67\22\65\1\77\4\65"+
    "\1\100\5\65\1\101\11\65\1\0\16\65\1\70\4\65"+
    "\2\66\1\65\1\67\32\65\1\102\14\65\1\0\16\65"+
    "\1\70\4\65\2\66\1\65\1\67\14\65\1\103\3\65"+
    "\1\104\2\65\1\105\3\65\1\106\2\65\1\107\2\65"+
    "\1\110\11\65\1\0\16\65\1\70\4\65\2\66\1\65"+
    "\1\67\14\65\1\111\3\65\1\112\26\65\1\0\16\65"+
    "\1\70\4\65\2\66\1\65\1\67\27\65\1\113\17\65"+
    "\1\0\16\65\1\70\4\65\2\66\1\65\1\67\20\65"+
    "\1\114\3\65\1\115\5\65\1\116\14\65\1\0\16\65"+
    "\1\70\4\65\2\66\1\65\1\67\17\65\1\117\10\65"+
    "\1\120\1\121\13\65\1\122\1\65\1\0\16\65\1\70"+
    "\4\65\2\66\1\65\1\67\40\65\1\123\6\65\1\0"+
    "\16\65\1\70\4\65\2\66\1\65\1\67\24\65\1\124"+
    "\5\65\1\125\14\65\1\0\16\65\1\70\4\65\2\66"+
    "\1\65\1\67\32\65\1\126\14\65\1\0\16\65\1\70"+
    "\4\65\2\66\1\65\1\67\32\65\1\127\5\65\1\130"+
    "\6\65\1\0\16\65\1\70\4\65\2\66\1\65\1\67"+
    "\33\65\1\131\13\65\1\0\16\65\1\70\4\65\2\66"+
    "\1\65\1\67\14\65\1\132\32\65\1\0\16\65\1\70"+
    "\4\65\2\66\1\65\1\67\14\65\1\133\3\65\1\134"+
    "\26\65\1\0\16\65\1\70\4\65\2\66\1\65\1\67"+
    "\24\65\1\135\22\65\1\0\16\65\1\70\4\65\2\66"+
    "\1\65\1\67\20\65\1\136\3\65\1\137\22\65\1\0"+
    "\16\65\1\70\4\65\2\66\1\65\1\67\35\65\1\140"+
    "\1\141\10\65\1\0\16\65\1\70\4\65\2\66\1\65"+
    "\1\67\7\65\2\75\36\65\1\0\16\65\1\70\1\65"+
    "\1\75\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\15\22\1\142\14\22\1\0\1\7\1\0\7\22\1\142"+
    "\4\22\3\0\1\22\6\0\1\7\1\0\1\7\4\0"+
    "\2\22\3\0\10\22\1\143\21\22\1\0\1\7\1\0"+
    "\5\22\1\143\6\22\3\0\1\22\2\65\2\144\1\65"+
    "\1\145\47\65\1\0\16\65\1\146\2\65\5\66\1\67"+
    "\47\66\1\0\16\66\1\70\2\66\5\147\1\0\47\147"+
    "\1\0\16\147\1\0\2\147\1\71\1\65\2\144\1\71"+
    "\1\150\47\71\1\0\16\71\1\146\2\71\1\65\1\72"+
    "\2\151\1\65\1\74\47\65\1\0\16\65\1\146\2\65"+
    "\1\66\3\73\1\66\1\74\47\66\1\0\16\66\1\70"+
    "\2\66\2\65\2\144\1\65\1\145\7\65\2\152\36\65"+
    "\1\0\16\65\1\146\1\65\1\152\1\65\1\72\2\151"+
    "\1\65\1\74\7\65\2\153\36\65\1\0\16\65\1\146"+
    "\1\65\1\152\2\65\2\144\1\65\1\145\35\65\1\154"+
    "\11\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\24\65\1\155\22\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\20\65\1\156\26\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\37\65\1\157\7\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\30\65\1\160"+
    "\16\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\31\65\1\161\15\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\20\65\1\162\26\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\14\65\1\163\32\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\27\65\1\164"+
    "\1\165\1\166\15\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\20\65\1\167\26\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\170\11\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\35\65\1\171"+
    "\11\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\24\65\1\172\22\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\16\65\1\173\30\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\16\65\1\174\10\65\1\175"+
    "\17\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\35\65\1\176\11\65\1\0\16\65\1\146\3\65\1\117"+
    "\2\177\1\65\1\200\47\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\14\65\1\201\32\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\17\65\1\202\27\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\34\65"+
    "\1\203\12\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\36\65\1\204\10\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\22\65\1\205\24\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\22\65\1\206\24\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\17\65"+
    "\1\207\27\65\1\0\16\65\1\146\3\65\1\210\2\211"+
    "\1\65\1\212\30\65\1\213\16\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\20\65\1\214\26\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\16\65\1\215"+
    "\30\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\35\65\1\216\1\217\10\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\17\65\1\220\27\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\34\65\1\221\12\65"+
    "\1\0\16\65\1\146\3\65\1\135\2\222\1\65\1\223"+
    "\47\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\30\65\1\224\12\65\1\225\3\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\37\65\1\226\7\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\27\65\1\227"+
    "\17\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\40\65\1\230\6\65\1\0\16\65\1\146\2\65\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\32\22\1\0"+
    "\1\7\1\0\1\231\13\22\3\0\1\22\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\32\22\1\0\1\7"+
    "\1\0\1\232\13\22\3\0\1\22\1\66\3\144\1\66"+
    "\1\145\47\66\1\0\16\66\1\146\2\66\1\233\3\234"+
    "\1\233\1\0\47\233\1\0\16\233\1\0\2\233\5\147"+
    "\1\235\47\147\1\0\16\147\1\70\2\147\1\66\3\151"+
    "\1\66\1\74\47\66\1\0\16\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\7\65\2\236\36\65\1\0\16\65"+
    "\1\146\1\65\1\236\1\65\1\72\2\151\1\65\1\74"+
    "\7\65\2\237\36\65\1\0\16\65\1\146\1\65\1\236"+
    "\2\65\2\144\1\65\1\145\20\65\1\240\26\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\31\65\1\241"+
    "\15\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\242\32\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\243\14\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\33\65\1\244\13\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\37\65\1\245"+
    "\7\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\16\65\1\246\30\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\36\65\1\247\10\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\40\65\1\250\6\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\15\65\1\251"+
    "\31\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\36\65\1\252\10\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\14\65\1\253\2\65\1\254\27\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\26\65\1\255"+
    "\20\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\20\65\1\256\26\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\30\65\1\257\16\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\23\65\1\260\23\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\23\65\1\261"+
    "\23\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\262\32\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\30\65\1\263\16\65\1\0\16\65\1\146"+
    "\2\65\1\66\3\177\1\66\1\200\47\66\1\0\16\66"+
    "\1\146\2\66\2\65\2\144\1\65\1\145\22\65\1\264"+
    "\24\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\24\65\1\265\22\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\40\65\1\266\6\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\37\65\1\267\7\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\23\65\1\270"+
    "\23\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\24\65\1\271\22\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\24\65\1\272\22\65\1\0\16\65\1\146"+
    "\3\65\1\210\2\211\1\65\1\212\47\65\1\0\16\65"+
    "\1\146\2\65\1\66\3\211\1\66\1\212\47\66\1\0"+
    "\16\66\1\146\2\66\2\65\2\144\1\65\1\145\15\65"+
    "\1\273\31\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\41\65\1\274\5\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\275\22\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\276\32\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\36\65"+
    "\1\277\10\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\24\65\1\300\22\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\301\6\65\1\0\16\65"+
    "\1\146\2\65\1\66\3\222\1\66\1\223\47\66\1\0"+
    "\16\66\1\146\2\66\2\65\2\144\1\65\1\145\14\65"+
    "\1\302\32\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\37\65\1\303\7\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\304\6\65\1\0\16\65"+
    "\1\146\3\65\1\227\2\305\1\65\1\306\47\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\14\65\1\307"+
    "\32\65\1\0\16\65\1\146\2\65\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\22\22\1\310\7\22\1\0"+
    "\1\7\1\0\11\22\1\310\2\22\3\0\1\22\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\22\22\1\311"+
    "\7\22\1\0\1\7\1\0\11\22\1\311\2\22\3\0"+
    "\1\22\2\312\2\147\1\312\1\235\47\312\1\0\16\312"+
    "\1\70\2\312\1\233\3\234\1\233\1\235\47\233\1\0"+
    "\16\233\1\70\2\233\2\65\2\144\1\65\1\145\5\65"+
    "\1\313\41\65\1\0\16\65\1\146\3\65\1\72\2\151"+
    "\1\65\1\74\5\65\1\313\1\65\2\314\36\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\22\65\1\315"+
    "\24\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\20\65\1\316\26\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\47\65\1\0\1\65\1\317\14\65\1\146"+
    "\4\65\2\144\1\65\1\145\31\65\1\320\15\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\32\65\1\321"+
    "\14\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\35\65\1\322\11\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\26\65\1\323\20\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\20\65\1\324\26\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\30\65\1\325"+
    "\16\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\326\14\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\40\65\1\327\6\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\330\11\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\20\65\1\331"+
    "\26\65\1\0\16\65\1\146\3\65\1\255\2\332\1\65"+
    "\1\333\47\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\16\65\1\334\30\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\335\22\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\336\32\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\20\65"+
    "\1\337\26\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\36\65\1\340\10\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\341\6\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\20\65\1\342\26\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\16\65"+
    "\1\343\30\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\24\65\1\344\22\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\345\22\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\37\65\1\346\7\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\31\65"+
    "\1\347\15\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\21\65\1\350\25\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\35\65\1\351\11\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\352\14\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\353\14\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\30\65\1\354\16\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\42\65\1\355\4\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\356\14\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\20\65"+
    "\1\357\26\65\1\0\16\65\1\146\3\65\1\302\2\360"+
    "\1\65\1\361\47\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\362\14\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\27\65\1\363\17\65\1\0"+
    "\16\65\1\146\2\65\1\66\3\305\1\66\1\306\47\66"+
    "\1\0\16\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\35\65\1\364\11\65\1\0\16\65\1\146\2\65\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\16\22\1\365"+
    "\13\22\1\0\1\7\1\0\10\22\1\365\3\22\3\0"+
    "\1\22\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\16\22\1\366\13\22\1\0\1\7\1\0\10\22\1\366"+
    "\3\22\3\0\1\22\2\312\2\367\1\312\1\370\47\312"+
    "\1\0\16\312\1\146\2\312\2\65\2\144\1\65\1\145"+
    "\7\65\2\371\36\65\1\0\16\65\1\146\1\65\1\371"+
    "\1\65\1\72\2\151\1\65\1\74\7\65\2\314\36\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\14\65"+
    "\1\372\32\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\14\65\1\373\32\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\37\65\1\374\7\65\1\0\16\65"+
    "\1\146\3\65\1\320\2\375\1\65\1\376\47\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\47\65\1\0"+
    "\1\65\1\377\14\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u0100\14\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\15\65\1\u0101\31\65\1\0\16\65\1\146"+
    "\3\65\1\324\2\u0102\1\65\1\u0103\47\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\31\65\1\u0104\15\65"+
    "\1\0\16\65\1\146\3\65\1\326\2\u0105\1\65\1\u0106"+
    "\47\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\27\65\1\u0107\17\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\47\65\1\0\1\65\1\u0108\14\65\1\146"+
    "\4\65\2\144\1\65\1\145\31\65\1\u0109\15\65\1\0"+
    "\16\65\1\146\2\65\1\66\3\332\1\66\1\333\47\66"+
    "\1\0\16\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\23\65\1\u010a\23\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\31\65\1\u010b\15\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\47\65\1\0\1\65\1\u010c"+
    "\14\65\1\146\4\65\2\144\1\65\1\145\35\65\1\u010d"+
    "\11\65\1\0\16\65\1\146\3\65\1\340\2\u010e\1\65"+
    "\1\u010f\47\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\27\65\1\u0110\17\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\31\65\1\u0111\15\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\20\65\1\u0112\26\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\20\65"+
    "\1\u0113\26\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\21\65\1\u0114\25\65\1\0\16\65\1\146\3\65"+
    "\1\346\2\u0115\1\65\1\u0116\47\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\47\65\1\0\1\65\1\u0117"+
    "\14\65\1\146\4\65\2\144\1\65\1\145\24\65\1\u0118"+
    "\22\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\20\65\1\u0119\26\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\47\65\1\0\1\65\1\u011a\14\65\1\146"+
    "\4\65\2\144\1\65\1\145\31\65\1\u011b\15\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\20\65\1\u011c"+
    "\26\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u011d\14\65\1\0\16\65\1\146\3\65\1\356"+
    "\2\u011e\1\65\1\u011f\47\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\35\65\1\u0120\11\65\1\0\16\65"+
    "\1\146\2\65\1\66\3\360\1\66\1\361\47\66\1\0"+
    "\16\66\1\146\2\66\2\65\2\144\1\65\1\145\47\65"+
    "\1\0\1\65\1\u0121\14\65\1\146\4\65\2\144\1\65"+
    "\1\145\32\65\1\u0122\14\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\u0123\22\65\1\0\16\65"+
    "\1\146\2\65\6\0\1\7\1\0\1\7\4\0\2\22"+
    "\3\0\13\22\1\u0124\16\22\1\0\1\7\1\0\6\22"+
    "\1\u0124\5\22\3\0\1\22\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\13\22\1\u0125\16\22\1\0\1\7"+
    "\1\0\6\22\1\u0125\5\22\3\0\1\22\1\147\3\367"+
    "\1\147\1\370\47\147\1\0\16\147\1\146\2\147\2\65"+
    "\2\144\1\65\1\145\7\65\2\u0126\36\65\1\0\16\65"+
    "\1\146\1\65\1\u0126\2\65\2\144\1\65\1\145\35\65"+
    "\1\u0127\11\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\16\65\1\u0128\30\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\u0129\26\65\1\0\16\65"+
    "\1\146\2\65\1\66\3\375\1\66\1\376\47\66\1\0"+
    "\16\66\1\146\2\66\2\65\2\144\1\65\1\145\37\65"+
    "\1\u012a\7\65\1\0\16\65\1\146\3\65\1\u0100\2\u012b"+
    "\1\65\1\u012c\47\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u012d\14\65\1\0\16\65\1\146"+
    "\2\65\1\66\3\u0102\1\66\1\u0103\47\66\1\0\16\66"+
    "\1\146\2\66\2\65\2\144\1\65\1\145\14\65\1\u012e"+
    "\32\65\1\0\16\65\1\146\2\65\1\66\3\u0105\1\66"+
    "\1\u0106\47\66\1\0\16\66\1\146\2\66\2\65\2\144"+
    "\1\65\1\145\37\65\1\u012f\7\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\40\65\1\u0130\6\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\16\65\1\u0131"+
    "\30\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\u0132\32\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\14\65\1\u0133\32\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\16\65\1\u0134\11\65\1\u0135"+
    "\16\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u0136\14\65\1\0\16\65\1\146\2\65\1\66"+
    "\3\u010e\1\66\1\u010f\47\66\1\0\16\66\1\146\2\66"+
    "\2\65\2\144\1\65\1\145\14\65\1\u0137\32\65\1\0"+
    "\16\65\1\146\3\65\1\u0111\2\u0138\1\65\1\u0139\47\65"+
    "\1\0\16\65\1\146\3\65\1\u0112\2\u013a\1\65\1\u013b"+
    "\47\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\35\65\1\u013c\11\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\24\65\1\u013d\22\65\1\0\16\65\1\146"+
    "\2\65\1\66\3\u0115\1\66\1\u0116\47\66\1\0\16\66"+
    "\1\146\2\66\2\65\2\144\1\65\1\145\40\65\1\u013e"+
    "\6\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\16\65\1\u013f\30\65\1\0\16\65\1\146\3\65\1\u0140"+
    "\2\u0141\1\65\1\u0142\47\65\1\0\1\65\1\u0143\14\65"+
    "\1\146\4\65\2\144\1\65\1\145\21\65\1\u0144\11\65"+
    "\1\u0145\13\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\20\65\1\u0146\26\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\37\65\1\u0147\7\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\35\65\1\u0148\11\65"+
    "\1\0\16\65\1\146\2\65\1\66\3\u011e\1\66\1\u011f"+
    "\47\66\1\0\16\66\1\146\2\66\2\65\2\144\1\65"+
    "\1\145\24\65\1\u0149\22\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\41\65\1\u014a\5\65\1\0\16\65"+
    "\1\146\3\65\1\u0122\2\u014b\1\65\1\u014c\47\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\32\65\1\u014d"+
    "\14\65\1\0\16\65\1\146\2\65\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\10\22\1\u014e\21\22\1\0"+
    "\1\7\1\0\5\22\1\u014e\6\22\3\0\1\22\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\10\22\1\u014f"+
    "\21\22\1\0\1\7\1\0\5\22\1\u014f\6\22\3\0"+
    "\1\22\2\65\2\144\1\65\1\145\5\65\1\u0150\41\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\47\65"+
    "\1\0\1\65\1\u0151\14\65\1\146\4\65\2\144\1\65"+
    "\1\145\24\65\1\u0152\22\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\43\65\1\u0153\3\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\20\65\1\u0154\26\65"+
    "\1\0\16\65\1\146\2\65\1\66\3\u012b\1\66\1\u012c"+
    "\47\66\1\0\16\66\1\146\2\66\2\65\2\144\1\65"+
    "\1\145\43\65\1\u0155\3\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\36\65\1\u0156\10\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\u0157\32\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\36\65"+
    "\1\u0158\10\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\24\65\1\u0159\22\65\1\0\16\65\1\146\3\65"+
    "\1\u0132\2\u015a\1\65\1\u015b\47\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\u015c\11\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\35\65\1\u015d"+
    "\11\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u015e\14\65\1\0\16\65\1\146\3\65\1\u0136"+
    "\2\u015f\1\65\1\u0160\47\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\35\65\1\u0161\11\65\1\0\16\65"+
    "\1\146\2\65\1\66\3\u0138\1\66\1\u0139\47\66\1\0"+
    "\16\66\1\146\3\66\3\u013a\1\66\1\u013b\47\66\1\0"+
    "\16\66\1\146\2\66\2\65\2\144\1\65\1\145\17\65"+
    "\1\u0162\27\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\16\65\1\u0163\30\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\36\65\1\u0164\10\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\u0165\32\65"+
    "\1\0\16\65\1\146\3\65\1\u0140\2\u0141\1\65\1\u0142"+
    "\47\65\1\0\16\65\1\146\2\65\1\66\3\u0141\1\66"+
    "\1\u0142\47\66\1\0\16\66\1\146\2\66\2\65\2\144"+
    "\1\65\1\145\16\65\1\u0166\30\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\32\65\1\u0167\14\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\14\65\1\u0168"+
    "\32\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\36\65\1\u0169\10\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\35\65\1\u016a\11\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\17\65\1\u016b\27\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\17\65\1\u016c"+
    "\27\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\24\65\1\u016d\22\65\1\0\16\65\1\146\2\65\1\66"+
    "\3\u014b\1\66\1\u014c\47\66\1\0\16\66\1\146\2\66"+
    "\1\65\1\u016e\2\u016f\1\65\1\u0170\47\65\1\0\1\65"+
    "\1\u0171\14\65\1\146\2\65\6\0\1\7\1\0\1\7"+
    "\4\0\2\22\3\0\2\22\1\u0172\27\22\1\0\1\7"+
    "\1\0\1\22\1\u0172\12\22\3\0\1\22\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\2\22\1\u0173\27\22"+
    "\1\0\1\7\1\0\1\22\1\u0173\12\22\3\0\1\22"+
    "\2\65\2\144\1\65\1\145\7\65\2\u0174\36\65\1\0"+
    "\16\65\1\146\1\65\1\u0174\2\65\2\144\1\65\1\145"+
    "\16\65\1\u0175\30\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u0176\14\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\37\65\1\u0177\7\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\43\65\1\u0178"+
    "\3\65\1\0\16\65\1\146\3\65\1\u0155\2\u0179\1\65"+
    "\1\u017a\47\65\1\0\16\65\1\146\3\65\1\u0156\2\u017b"+
    "\1\65\1\u017c\47\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\5\65\1\u017d\27\65\1\u017e\1\u017f\10\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\40\65"+
    "\1\u0180\6\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\14\65\1\u0181\32\65\1\0\16\65\1\146\2\65"+
    "\1\66\3\u015a\1\66\1\u015b\47\66\1\0\16\66\1\146"+
    "\2\66\2\65\2\144\1\65\1\145\47\65\1\0\1\65"+
    "\1\u0182\14\65\1\146\4\65\2\144\1\65\1\145\20\65"+
    "\1\u0183\26\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\17\65\1\u0184\27\65\1\0\16\65\1\146\2\65"+
    "\1\66\3\u015f\1\66\1\u0160\47\66\1\0\16\66\1\146"+
    "\2\66\2\65\2\144\1\65\1\145\24\65\1\u0185\22\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\14\65"+
    "\1\u0186\32\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\14\65\1\u0187\32\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\u0188\6\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\35\65\1\u0189\11\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\14\65"+
    "\1\u018a\32\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\35\65\1\u018b\11\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\36\65\1\u018c\10\65\1\0\16\65"+
    "\1\146\3\65\1\u0169\2\u018d\1\65\1\u018e\47\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\32\65\1\u018f"+
    "\14\65\1\0\16\65\1\146\3\65\1\u016b\2\u0190\1\65"+
    "\1\u0191\47\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\32\65\1\u0192\14\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\36\65\1\u0193\10\65\1\0\16\65"+
    "\1\146\3\65\1\u016e\2\u016f\1\65\1\u0170\47\65\1\0"+
    "\16\65\1\146\2\65\1\66\3\u016f\1\66\1\u0170\47\66"+
    "\1\0\16\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\14\65\1\u0194\1\65\1\u0195\12\65\1\u0196\15\65\1\0"+
    "\16\65\1\146\2\65\6\0\1\7\1\0\1\7\4\0"+
    "\2\22\3\0\10\22\1\u0197\21\22\1\0\1\7\1\0"+
    "\5\22\1\u0197\6\22\3\0\1\22\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\10\22\1\u0198\21\22\1\0"+
    "\1\7\1\0\5\22\1\u0198\6\22\3\0\1\22\2\65"+
    "\2\144\1\65\1\145\7\65\2\u0199\36\65\1\0\16\65"+
    "\1\146\1\65\1\u0199\2\65\2\144\1\65\1\145\32\65"+
    "\1\u019a\14\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\31\65\1\u019b\15\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\u019c\14\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\37\65\1\u019d\7\65"+
    "\1\0\16\65\1\146\2\65\1\66\3\u0179\1\66\1\u017a"+
    "\47\66\1\0\16\66\1\146\3\66\3\u017b\1\66\1\u017c"+
    "\47\66\1\0\16\66\1\146\2\66\2\65\2\144\1\65"+
    "\1\145\7\65\1\u019e\1\u019f\36\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\47\65\1\0\1\65\1\u01a0"+
    "\14\65\1\146\3\65\1\u017f\2\u01a1\1\65\1\u01a2\47\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\14\65"+
    "\1\u01a3\32\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\27\65\1\u01a4\17\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\16\65\1\u01a5\2\65\1\u01a6\16\65"+
    "\1\u01a7\6\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\14\65\1\u01a8\32\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\u01a9\22\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\u01aa\14\65"+
    "\1\0\16\65\1\146\3\65\1\u0186\2\u01ab\1\65\1\u01ac"+
    "\47\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\35\65\1\u01ad\11\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\14\65\1\u01ae\32\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\47\65\1\0\1\65\1\u01af"+
    "\14\65\1\146\4\65\2\144\1\65\1\145\30\65\1\u01b0"+
    "\16\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\30\65\1\u01b1\16\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\36\65\1\u01b2\10\65\1\0\16\65\1\146"+
    "\2\65\1\66\3\u018d\1\66\1\u018e\47\66\1\0\16\66"+
    "\1\146\2\66\2\65\2\144\1\65\1\145\36\65\1\u01b3"+
    "\10\65\1\0\16\65\1\146\2\65\1\66\3\u0190\1\66"+
    "\1\u0191\47\66\1\0\16\66\1\146\2\66\1\65\1\u0192"+
    "\2\u01b4\1\65\1\u01b5\47\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\u01b6\22\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\31\65\1\u01b7\15\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\35\65"+
    "\1\u01b8\11\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\40\65\1\u01b9\6\65\1\0\16\65\1\146\2\65"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\23\22"+
    "\1\u01ba\6\22\1\0\1\7\1\0\12\22\1\u01ba\1\22"+
    "\3\0\1\22\6\0\1\7\1\0\1\7\4\0\2\22"+
    "\3\0\23\22\1\u01bb\6\22\1\0\1\7\1\0\12\22"+
    "\1\u01bb\1\22\3\0\1\22\1\65\1\u0199\2\u01bc\1\65"+
    "\1\u01bd\47\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\30\65\1\u01be\16\65\1\0\16\65\1\146\3\65"+
    "\1\u019b\2\u01bf\1\65\1\u01c0\47\65\1\0\16\65\1\146"+
    "\3\65\1\u019c\2\u01c1\1\65\1\u01c2\47\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\u01c3\14\65"+
    "\1\0\16\65\1\146\3\65\1\u019e\2\u01c4\1\65\1\u01c5"+
    "\47\65\1\0\16\65\1\146\3\65\1\u019e\2\u01c4\1\65"+
    "\1\u01c5\7\65\2\u019f\36\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\17\65\1\u01c6\27\65\1\0\16\65"+
    "\1\146\2\65\1\66\3\u01a1\1\66\1\u01a2\47\66\1\0"+
    "\16\66\1\146\2\66\2\65\2\144\1\65\1\145\35\65"+
    "\1\u01c7\11\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\20\65\1\u01c8\26\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\u01c9\14\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\u01ca\14\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\36\65"+
    "\1\u01cb\10\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\16\65\1\u01cc\30\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\21\65\1\u01cd\25\65\1\0\16\65"+
    "\1\146\3\65\1\u01aa\2\u01ce\1\65\1\u01cf\47\65\1\0"+
    "\16\65\1\146\2\65\1\66\3\u01ab\1\66\1\u01ac\47\66"+
    "\1\0\16\66\1\146\2\66\1\65\1\u01ad\2\u01d0\1\65"+
    "\1\u01d1\47\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\35\65\1\u01d2\11\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\16\65\1\u01d3\2\65\1\u01d4\16\65"+
    "\1\u01d5\6\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\33\65\1\u01d6\13\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\u01d7\6\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\42\65\1\u01d8\4\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\47\65"+
    "\1\0\1\65\1\u01d9\14\65\1\146\2\65\1\66\3\u01b4"+
    "\1\66\1\u01b5\47\66\1\0\16\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\15\65\1\u01da\31\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\37\65\1\u01db\7\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\20\65"+
    "\1\u01dc\26\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\20\65\1\u01dd\26\65\1\0\16\65\1\146\2\65"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\24\22"+
    "\1\u01de\5\22\1\0\1\7\1\0\13\22\1\u01de\3\0"+
    "\1\22\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\24\22\1\u01df\5\22\1\0\1\7\1\0\13\22\1\u01df"+
    "\3\0\1\22\1\66\3\u01bc\1\66\1\u01bd\47\66\1\0"+
    "\16\66\1\146\2\66\2\65\2\144\1\65\1\145\33\65"+
    "\1\u01e0\13\65\1\0\16\65\1\146\2\65\1\66\3\u01bf"+
    "\1\66\1\u01c0\47\66\1\0\16\66\1\146\3\66\3\u01c1"+
    "\1\66\1\u01c2\47\66\1\0\16\66\1\146\2\66\1\65"+
    "\1\u01c3\2\u01e1\1\65\1\u01e2\47\65\1\0\16\65\1\146"+
    "\2\65\1\66\3\u01c4\1\66\1\u01c5\47\66\1\0\16\66"+
    "\1\146\2\66\2\65\2\144\1\65\1\145\14\65\1\u01e3"+
    "\32\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\24\65\1\u01e4\22\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\36\65\1\u01e5\10\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\30\65\1\u01e6\16\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\35\65\1\u01e7"+
    "\11\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\40\65\1\u01e8\6\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\24\65\1\u01e9\22\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\24\65\1\u01ea\22\65\1\0"+
    "\16\65\1\146\2\65\1\66\3\u01ce\1\66\1\u01cf\47\66"+
    "\1\0\16\66\1\146\3\66\3\u01d0\1\66\1\u01d1\47\66"+
    "\1\0\16\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\24\65\1\u01eb\22\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u01ec\14\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\32\65\1\u01ed\14\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\36\65\1\u01ee"+
    "\10\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u01ef\14\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\27\65\1\u01f0\17\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\32\65\1\u01f1\14\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\16\65\1\u01f2"+
    "\2\65\1\u01f3\25\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\27\65\1\u01f4\17\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\24\65\1\u01f5\22\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\14\65\1\u01f6"+
    "\32\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\41\65\1\u01f7\5\65\1\0\16\65\1\146\2\65\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\3\22\1\u01f8"+
    "\26\22\1\0\1\7\1\0\2\22\1\u01f8\11\22\3\0"+
    "\1\22\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\3\22\1\u01f9\26\22\1\0\1\7\1\0\2\22\1\u01f9"+
    "\11\22\3\0\1\22\2\65\2\144\1\65\1\145\32\65"+
    "\1\u01fa\14\65\1\0\16\65\1\146\2\65\1\66\3\u01e1"+
    "\1\66\1\u01e2\47\66\1\0\16\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\37\65\1\u01fb\7\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\32\65\1\u01fc\14\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\47\65"+
    "\1\0\1\65\1\u01fd\14\65\1\146\4\65\2\144\1\65"+
    "\1\145\33\65\1\u01fe\13\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\30\65\1\u01ff\16\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\u0200\32\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\u0201\14\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\16\65\1\u0202\30\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\u0203\14\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\30\65\1\u0204\16\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\35\65"+
    "\1\u0205\11\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\40\65\1\u0206\6\65\1\0\16\65\1\146\3\65"+
    "\1\u01ef\2\u0207\1\65\1\u0208\47\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\14\65\1\u0209\32\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\35\65\1\u020a"+
    "\11\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u020b\14\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u020c\14\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\20\65\1\u020d\26\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\22\65\1\u020e"+
    "\24\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\16\65\1\u020f\30\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u0210\14\65\1\0\16\65\1\146"+
    "\2\65\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\4\22\1\u0211\25\22\1\0\1\7\1\0\3\22\1\u0211"+
    "\10\22\3\0\1\22\6\0\1\7\1\0\1\7\4\0"+
    "\2\22\3\0\4\22\1\u0212\25\22\1\0\1\7\1\0"+
    "\3\22\1\u0212\10\22\3\0\1\22\2\65\2\144\1\65"+
    "\1\145\31\65\1\u0213\15\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\u0214\14\65\1\0\16\65"+
    "\1\146\3\65\1\u01fc\2\u0215\1\65\1\u0216\47\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\40\65\1\u0217"+
    "\6\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\32\65\1\u0218\14\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\40\65\1\u0219\6\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\35\65\1\u021a\11\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\31\65\1\u021b"+
    "\15\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\14\65\1\u021c\32\65\1\0\16\65\1\146\3\65\1\u0203"+
    "\2\u021d\1\65\1\u021e\47\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\33\65\1\u021f\13\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\30\65\1\u0220\16\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\14\65"+
    "\1\u0221\32\65\1\0\16\65\1\146\2\65\1\66\3\u0207"+
    "\1\66\1\u0208\47\66\1\0\16\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\35\65\1\u0222\11\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\17\65\1\u0223\27\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\30\65"+
    "\1\u0224\16\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\35\65\1\u0225\11\65\1\0\16\65\1\146\3\65"+
    "\1\u020d\2\u0226\1\65\1\u0227\47\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\40\65\1\u0228\6\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\24\65\1\u0229"+
    "\22\65\1\0\16\65\1\146\3\65\1\u0210\2\u022a\1\65"+
    "\1\u022b\47\65\1\0\16\65\1\146\2\65\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\22\22\1\u022c\7\22"+
    "\1\0\1\7\1\0\11\22\1\u022c\2\22\3\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\22\22"+
    "\1\u022d\7\22\1\0\1\7\1\0\11\22\1\u022d\2\22"+
    "\3\0\1\22\2\65\2\144\1\65\1\145\20\65\1\u022e"+
    "\26\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\36\65\1\u022f\10\65\1\0\16\65\1\146\2\65\1\66"+
    "\3\u0215\1\66\1\u0216\47\66\1\0\16\66\1\146\2\66"+
    "\2\65\2\144\1\65\1\145\36\65\1\u0230\10\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\31\65\1\u0231"+
    "\15\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\27\65\1\u0232\17\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\24\65\1\u0233\22\65\1\0\16\65\1\146"+
    "\3\65\1\u021b\2\u0234\1\65\1\u0235\47\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\16\65\1\u0236\30\65"+
    "\1\0\16\65\1\146\2\65\1\66\3\u021d\1\66\1\u021e"+
    "\47\66\1\0\16\66\1\146\2\66\2\65\2\144\1\65"+
    "\1\145\32\65\1\u0237\14\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\40\65\1\u0238\6\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\35\65\1\u0239\11\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\24\65"+
    "\1\u023a\22\65\1\0\16\65\1\146\3\65\1\u0223\2\u023b"+
    "\1\65\1\u023c\47\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\33\65\1\u023d\13\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\30\65\1\u023e\16\65\1\0"+
    "\16\65\1\146\2\65\1\66\3\u0226\1\66\1\u0227\47\66"+
    "\1\0\16\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\32\65\1\u023f\14\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\32\65\1\u0240\14\65\1\0\16\65\1\146"+
    "\2\65\1\66\3\u022a\1\66\1\u022b\47\66\1\0\16\66"+
    "\1\146\2\66\2\65\2\144\1\65\1\145\31\65\1\u0241"+
    "\15\65\1\0\16\65\1\146\3\65\1\u022f\2\u0242\1\65"+
    "\1\u0243\47\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\40\65\1\u0244\6\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\u0245\26\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\u0246\32\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\u0247\14\65\1\0\16\65\1\146\2\65\1\66\3\u0234"+
    "\1\66\1\u0235\47\66\1\0\16\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\24\65\1\u0248\22\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\31\65\1\u0249\15\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\27\65"+
    "\1\u024a\17\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\24\65\1\u024b\22\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\u024c\14\65\1\0\16\65"+
    "\1\146\2\65\1\66\3\u023b\1\66\1\u023c\47\66\1\0"+
    "\16\66\1\146\2\66\2\65\2\144\1\65\1\145\32\65"+
    "\1\u024d\14\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\40\65\1\u024e\6\65\1\0\16\65\1\146\3\65"+
    "\1\u023f\2\u024f\1\65\1\u0250\47\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\31\65\1\u0251\15\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\37\65\1\u0252"+
    "\7\65\1\0\16\65\1\146\2\65\1\66\3\u0242\1\66"+
    "\1\u0243\47\66\1\0\16\66\1\146\2\66\2\65\2\144"+
    "\1\65\1\145\14\65\1\u0253\32\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\31\65\1\u0254\15\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\35\65\1\u0255"+
    "\11\65\1\0\16\65\1\146\3\65\1\u0247\2\u0256\1\65"+
    "\1\u0257\47\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\32\65\1\u0258\14\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\20\65\1\u0259\26\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\14\65\1\u025a\32\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\u025b\14\65\1\0\16\65\1\146\3\65\1\u024c\2\u025c"+
    "\1\65\1\u025d\47\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\31\65\1\u025e\15\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\27\65\1\u025f\17\65\1\0"+
    "\16\65\1\146\2\65\1\66\3\u024f\1\66\1\u0250\47\66"+
    "\1\0\16\66\1\146\2\66\1\65\1\u0251\2\u0260\1\65"+
    "\1\u0261\47\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\20\65\1\u0262\26\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\35\65\1\u0263\11\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\37\65\1\u0264\7\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\24\65"+
    "\1\u0265\22\65\1\0\16\65\1\146\2\65\1\66\3\u0256"+
    "\1\66\1\u0257\47\66\1\0\16\66\1\146\2\66\2\65"+
    "\2\144\1\65\1\145\31\65\1\u0266\15\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\31\65\1\u0267\15\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\35\65"+
    "\1\u0268\11\65\1\0\16\65\1\146\3\65\1\u025b\2\u0269"+
    "\1\65\1\u026a\47\65\1\0\16\65\1\146\2\65\1\66"+
    "\3\u025c\1\66\1\u025d\47\66\1\0\16\66\1\146\2\66"+
    "\2\65\2\144\1\65\1\145\20\65\1\u026b\26\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\14\65\1\u026c"+
    "\32\65\1\0\16\65\1\146\2\65\1\66\3\u0260\1\66"+
    "\1\u0261\47\66\1\0\16\66\1\146\2\66\1\65\1\u0262"+
    "\2\u026d\1\65\1\u026e\47\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\24\65\1\u026f\22\65\1\0\16\65"+
    "\1\146\4\65\2\144\1\65\1\145\20\65\1\u0270\26\65"+
    "\1\0\16\65\1\146\4\65\2\144\1\65\1\145\32\65"+
    "\1\u0271\14\65\1\0\16\65\1\146\3\65\1\u0266\2\u0272"+
    "\1\65\1\u0273\47\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\37\65\1\u0274\7\65\1\0\16\65\1\146"+
    "\4\65\2\144\1\65\1\145\24\65\1\u0275\22\65\1\0"+
    "\16\65\1\146\2\65\1\66\3\u0269\1\66\1\u026a\47\66"+
    "\1\0\16\66\1\146\2\66\2\65\2\144\1\65\1\145"+
    "\31\65\1\u0276\15\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\35\65\1\u0277\11\65\1\0\16\65\1\146"+
    "\2\65\1\66\3\u026d\1\66\1\u026e\47\66\1\0\16\66"+
    "\1\146\2\66\2\65\2\144\1\65\1\145\32\65\1\u0278"+
    "\14\65\1\0\16\65\1\146\3\65\1\u0270\2\u0279\1\65"+
    "\1\u027a\47\65\1\0\16\65\1\146\3\65\1\u0271\2\u027b"+
    "\1\65\1\u027c\47\65\1\0\16\65\1\146\2\65\1\66"+
    "\3\u0272\1\66\1\u0273\47\66\1\0\16\66\1\146\2\66"+
    "\2\65\2\144\1\65\1\145\20\65\1\u027d\26\65\1\0"+
    "\16\65\1\146\4\65\2\144\1\65\1\145\32\65\1\u027e"+
    "\14\65\1\0\16\65\1\146\4\65\2\144\1\65\1\145"+
    "\37\65\1\u027f\7\65\1\0\16\65\1\146\4\65\2\144"+
    "\1\65\1\145\24\65\1\u0280\22\65\1\0\16\65\1\146"+
    "\3\65\1\u0278\2\u0281\1\65\1\u0282\47\65\1\0\16\65"+
    "\1\146\2\65\1\66\3\u0279\1\66\1\u027a\47\66\1\0"+
    "\16\66\1\146\3\66\3\u027b\1\66\1\u027c\47\66\1\0"+
    "\16\66\1\146\2\66\1\65\1\u027d\2\u0283\1\65\1\u0284"+
    "\47\65\1\0\16\65\1\146\3\65\1\u027e\2\u0285\1\65"+
    "\1\u0286\47\65\1\0\16\65\1\146\4\65\2\144\1\65"+
    "\1\145\20\65\1\u0287\26\65\1\0\16\65\1\146\4\65"+
    "\2\144\1\65\1\145\32\65\1\u0288\14\65\1\0\16\65"+
    "\1\146\2\65\1\66\3\u0281\1\66\1\u0282\47\66\1\0"+
    "\16\66\1\146\3\66\3\u0283\1\66\1\u0284\47\66\1\0"+
    "\16\66\1\146\3\66\3\u0285\1\66\1\u0286\47\66\1\0"+
    "\16\66\1\146\2\66\1\65\1\u0287\2\u0289\1\65\1\u028a"+
    "\47\65\1\0\16\65\1\146\3\65\1\u0288\2\u028b\1\65"+
    "\1\u028c\47\65\1\0\16\65\1\146\2\65\1\66\3\u0289"+
    "\1\66\1\u028a\47\66\1\0\16\66\1\146\3\66\3\u028b"+
    "\1\66\1\u028c\47\66\1\0\16\66\1\146\2\66";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36099];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\4\11\2\1\3\11"+
    "\3\1\4\11\4\0\1\1\25\0\2\1\2\0\1\11"+
    "\4\0\1\11\45\0\2\1\1\0\1\11\2\0\1\11"+
    "\27\0\1\11\11\0\1\11\10\0\1\11\5\0\2\1"+
    "\2\0\1\11\50\0\1\11\1\0\2\1\21\0\1\11"+
    "\25\0\1\11\3\0\2\1\1\0\1\11\5\0\1\11"+
    "\4\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\10\0\1\11\4\0\2\1\6\0\1\11\14\0\1\11"+
    "\1\0\1\11\6\0\1\11\11\0\1\11\1\0\2\1"+
    "\13\0\1\11\4\0\1\11\17\0\1\11\1\0\2\1"+
    "\6\0\1\11\1\0\1\11\21\0\1\11\2\0\1\11"+
    "\5\0\2\1\11\0\1\11\11\0\1\11\10\0\1\11"+
    "\4\0\2\1\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\2\0\1\11\11\0\1\11\1\0\1\11\14\0\2\1"+
    "\2\0\1\11\25\0\2\1\16\0\1\11\10\0\2\1"+
    "\3\0\1\11\7\0\1\11\10\0\1\11\3\0\1\11"+
    "\2\1\7\0\1\11\6\0\1\11\6\0\1\11\14\0"+
    "\1\11\6\0\1\11\5\0\1\11\3\0\1\11\10\0"+
    "\1\11\3\0\1\11\4\0\1\11\6\0\1\11\1\0"+
    "\1\11\5\0\1\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[652];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

	private Symbol symbol(int type) {
		return new Symbol(type, new Token(type, yyline + 1, yycolumn + 1));
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, new Token(type, (String) value, yyline + 1, yycolumn + 1));
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormsLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	//return new java_cup.runtime.Symbol(FormsParserSym.EOF);
	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 87: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 88: break;
          case 3:
            { return symbol(EXCL, yytext());
            }
            // fall through
          case 89: break;
          case 4:
            { return symbol(QUOTE, yytext());
            }
            // fall through
          case 90: break;
          case 5:
            { return symbol(SYMB, yytext());
            }
            // fall through
          case 91: break;
          case 6:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 92: break;
          case 7:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 93: break;
          case 8:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 94: break;
          case 9:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 95: break;
          case 10:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 96: break;
          case 11:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 97: break;
          case 12:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 98: break;
          case 13:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 99: break;
          case 14:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 100: break;
          case 15:
            { return symbol(PARAM, yytext());
            }
            // fall through
          case 101: break;
          case 16:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 102: break;
          case 17:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 103: break;
          case 18:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 104: break;
          case 19:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 105: break;
          case 20:
            { return symbol(EMPTY, yytext());
            }
            // fall through
          case 106: break;
          case 21:
            { return symbol(STR_SPACE, yytext());
            }
            // fall through
          case 107: break;
          case 22:
            { return symbol(STR_NUMBER, yytext());
            }
            // fall through
          case 108: break;
          case 23:
            { return symbol(STR, yytext());
            }
            // fall through
          case 109: break;
          case 24:
            { return symbol(ID_, yytext());
            }
            // fall through
          case 110: break;
          case 25:
            { return symbol(ID, yytext());
            }
            // fall through
          case 111: break;
          case 26:
            { return symbol(NO, yytext());
            }
            // fall through
          case 112: break;
          case 27:
            { return symbol(YES, yytext());
            }
            // fall through
          case 113: break;
          case 28:
            { return symbol(OPTION_SPACE, yytext());
            }
            // fall through
          case 114: break;
          case 29:
            { return symbol(URL, yytext());
            }
            // fall through
          case 115: break;
          case 30:
            { return symbol(DARK, yytext());
            }
            // fall through
          case 116: break;
          case 31:
            { return symbol(THEME, yytext());
            }
            // fall through
          case 117: break;
          case 32:
            { return symbol(OPTION_V, yytext());
            }
            // fall through
          case 118: break;
          case 33:
            { return symbol(BTN, yytext());
            }
            // fall through
          case 119: break;
          case 34:
            { return symbol(CLASS, yytext());
            }
            // fall through
          case 120: break;
          case 35:
            { return symbol(COMBO, yytext());
            }
            // fall through
          case 121: break;
          case 36:
            { return symbol(ROWS, yytext());
            }
            // fall through
          case 122: break;
          case 37:
            { return symbol(LIGHT, yytext());
            }
            // fall through
          case 123: break;
          case 38:
            { return symbol(RADIO, yytext());
            }
            // fall through
          case 124: break;
          case 39:
            { return symbol(CENTER, yytext());
            }
            // fall through
          case 125: break;
          case 40:
            { return symbol(IMG, yytext());
            }
            // fall through
          case 126: break;
          case 41:
            { return symbol(INDEX, yytext());
            }
            // fall through
          case 127: break;
          case 42:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 128: break;
          case 43:
            { return symbol(TITLE, yytext());
            }
            // fall through
          case 129: break;
          case 44:
            { return symbol(RIGHT, yytext());
            }
            // fall through
          case 130: break;
          case 45:
            { return symbol(FILE, yytext());
            }
            // fall through
          case 131: break;
          case 46:
            { return symbol(USER, yytext());
            }
            // fall through
          case 132: break;
          case 47:
            { return symbol(CHECKBOX, yytext());
            }
            // fall through
          case 133: break;
          case 48:
            { return symbol(COLUMNS, yytext());
            }
            // fall through
          case 134: break;
          case 49:
            { return symbol(OPTION, yytext());
            }
            // fall through
          case 135: break;
          case 50:
            { return symbol(PASS, yytext());
            }
            // fall through
          case 136: break;
          case 51:
            { return symbol(CONS, yytext());
            }
            // fall through
          case 137: break;
          case 52:
            { return symbol(LEFT, yytext());
            }
            // fall through
          case 138: break;
          case 53:
            { return symbol(REQUIRED, yytext());
            }
            // fall through
          case 139: break;
          case 54:
            { return symbol(DATE, yytext());
            }
            // fall through
          case 140: break;
          case 55:
            { return symbol(ALIGN, yytext());
            }
            // fall through
          case 141: break;
          case 56:
            { return symbol(TEXT_AREA, yytext());
            }
            // fall through
          case 142: break;
          case 57:
            { return symbol(CONS_NAME, yytext());
            }
            // fall through
          case 143: break;
          case 58:
            { return symbol(FORM, yytext());
            }
            // fall through
          case 144: break;
          case 59:
            { return symbol(JUSTIFY, yytext());
            }
            // fall through
          case 145: break;
          case 60:
            { return symbol(TEXT_FIELD, yytext());
            }
            // fall through
          case 146: break;
          case 61:
            { return symbol(FIN_SOL, yytext());
            }
            // fall through
          case 147: break;
          case 62:
            { return symbol(INIT_SOL, yytext());
            }
            // fall through
          case 148: break;
          case 63:
            { return symbol(FIELD_N, yytext());
            }
            // fall through
          case 149: break;
          case 64:
            { return symbol(ADD_USER, yytext());
            }
            // fall through
          case 150: break;
          case 65:
            { return symbol(LOGIN, yytext());
            }
            // fall through
          case 151: break;
          case 66:
            { return symbol(TEXT, yytext());
            }
            // fall through
          case 152: break;
          case 67:
            { return symbol(NEW_USER, yytext());
            }
            // fall through
          case 153: break;
          case 68:
            { return symbol(FIN_MANY_SOL, yytext());
            }
            // fall through
          case 154: break;
          case 69:
            { return symbol(INIT_MANY_SOL, yytext());
            }
            // fall through
          case 155: break;
          case 70:
            { return symbol(DATE_ADD, yytext());
            }
            // fall through
          case 156: break;
          case 71:
            { return symbol(NEW_PASS, yytext());
            }
            // fall through
          case 157: break;
          case 72:
            { return symbol(CONS_DATA, yytext());
            }
            // fall through
          case 158: break;
          case 73:
            { return symbol(OLD_USER, yytext());
            }
            // fall through
          case 159: break;
          case 74:
            { return symbol(DEL_USER, yytext());
            }
            // fall through
          case 160: break;
          case 75:
            { return symbol(NEW_FORM, yytext());
            }
            // fall through
          case 161: break;
          case 76:
            { return symbol(USER_C, yytext());
            }
            // fall through
          case 162: break;
          case 77:
            { return symbol(EDIT_USER, yytext());
            }
            // fall through
          case 163: break;
          case 78:
            { return symbol(ADD_COMP, yytext());
            }
            // fall through
          case 164: break;
          case 79:
            { return symbol(DATE_MOD, yytext());
            }
            // fall through
          case 165: break;
          case 80:
            { return symbol(DEL_COMP, yytext());
            }
            // fall through
          case 166: break;
          case 81:
            { return symbol(DEL_FORM, yytext());
            }
            // fall through
          case 167: break;
          case 82:
            { return symbol(CRED, yytext());
            }
            // fall through
          case 168: break;
          case 83:
            { return symbol(EDIT_COMP, yytext());
            }
            // fall through
          case 169: break;
          case 84:
            { return symbol(EDIT_FORM, yytext());
            }
            // fall through
          case 170: break;
          case 85:
            { return symbol(PARAM_C, yytext());
            }
            // fall through
          case 171: break;
          case 86:
            { return symbol(PARAM_F, yytext());
            }
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
