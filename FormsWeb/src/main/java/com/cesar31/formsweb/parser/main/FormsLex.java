// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: forms.flex

package com.cesar31.formsweb.parser.main;

import static com.cesar31.formsweb.parser.main.FormsParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class FormsLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\4\6\1\0\2\6\1\7\1\10\1\11\1\12"+
    "\1\6\1\13\1\14\11\15\1\16\1\6\1\17\1\0"+
    "\1\20\2\6\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\22\1\32\1\33\1\34\1\35"+
    "\1\36\1\22\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\3\22\1\45\1\6\1\46\1\6\1\47\1\0\2\22"+
    "\1\50\1\51\1\52\1\53\2\22\1\54\2\22\1\55"+
    "\1\22\1\56\1\57\3\22\1\60\1\61\1\62\5\22"+
    "\1\63\1\0\1\64\7\0\1\1\32\0\1\1\1\6"+
    "\10\0\1\22\12\0\1\22\4\0\1\22\4\0\1\6"+
    "\27\22\1\0\37\22\1\0\u01ca\22\4\0\14\22\16\0"+
    "\5\22\7\0\1\22\1\0\1\22\21\0\165\22\1\0"+
    "\2\22\2\0\4\22\1\0\1\22\6\0\1\22\1\0"+
    "\3\22\1\0\1\22\1\0\24\22\1\0\123\22\1\0"+
    "\213\22\1\0\255\22\1\0\46\22\2\0\1\22\6\0"+
    "\51\22\10\0\55\22\1\0\1\22\1\0\2\22\1\0"+
    "\2\22\1\0\1\22\10\0\33\22\4\0\4\22\35\0"+
    "\13\22\5\0\100\22\12\65\4\0\146\22\1\0\10\22"+
    "\2\0\12\22\1\0\6\22\12\65\3\22\2\0\1\22"+
    "\20\0\73\22\2\0\145\22\16\0\12\65\54\22\4\0"+
    "\1\22\2\0\1\22\2\0\56\22\22\0\34\22\4\0"+
    "\13\22\65\0\25\22\1\0\10\22\25\0\17\22\1\0"+
    "\201\22\2\0\12\65\1\0\23\22\1\0\10\22\2\0"+
    "\2\22\2\0\26\22\1\0\7\22\1\0\1\22\3\0"+
    "\4\22\2\0\11\22\2\0\2\22\2\0\4\22\10\0"+
    "\1\22\4\0\2\22\1\0\5\22\2\0\12\65\2\22"+
    "\12\0\1\22\1\0\1\22\2\0\3\22\1\0\6\22"+
    "\4\0\2\22\2\0\26\22\1\0\7\22\1\0\2\22"+
    "\1\0\2\22\1\0\2\22\2\0\1\22\1\0\5\22"+
    "\4\0\2\22\2\0\3\22\3\0\1\22\7\0\4\22"+
    "\1\0\1\22\7\0\12\65\6\22\13\0\3\22\1\0"+
    "\11\22\1\0\3\22\1\0\26\22\1\0\7\22\1\0"+
    "\2\22\1\0\5\22\2\0\12\22\1\0\3\22\1\0"+
    "\3\22\2\0\1\22\17\0\4\22\2\0\12\65\11\0"+
    "\7\22\1\0\3\22\1\0\10\22\2\0\2\22\2\0"+
    "\26\22\1\0\7\22\1\0\2\22\1\0\5\22\2\0"+
    "\11\22\2\0\2\22\2\0\3\22\10\0\2\22\4\0"+
    "\2\22\1\0\5\22\2\0\12\65\1\0\1\22\20\0"+
    "\2\22\1\0\6\22\3\0\3\22\1\0\4\22\3\0"+
    "\2\22\1\0\1\22\1\0\2\22\3\0\2\22\3\0"+
    "\3\22\3\0\14\22\4\0\5\22\3\0\3\22\1\0"+
    "\4\22\2\0\1\22\6\0\1\22\16\0\12\65\20\0"+
    "\15\22\1\0\3\22\1\0\27\22\1\0\20\22\3\0"+
    "\10\22\1\0\3\22\1\0\4\22\7\0\2\22\1\0"+
    "\3\22\5\0\4\22\2\0\12\65\20\0\4\22\1\0"+
    "\10\22\1\0\3\22\1\0\27\22\1\0\12\22\1\0"+
    "\5\22\2\0\11\22\1\0\3\22\1\0\4\22\7\0"+
    "\2\22\7\0\1\22\1\0\4\22\2\0\12\65\1\0"+
    "\2\22\15\0\4\22\1\0\10\22\1\0\3\22\1\0"+
    "\63\22\1\0\3\22\1\0\5\22\5\0\4\22\7\0"+
    "\5\22\2\0\12\65\12\0\6\22\2\0\2\22\1\0"+
    "\22\22\3\0\30\22\1\0\11\22\1\0\1\22\2\0"+
    "\7\22\3\0\1\22\4\0\6\22\1\0\1\22\1\0"+
    "\10\22\6\0\12\65\2\0\2\22\15\0\72\22\5\0"+
    "\17\22\1\0\12\65\47\0\2\22\1\0\1\22\1\0"+
    "\5\22\1\0\30\22\1\0\1\22\1\0\27\22\2\0"+
    "\5\22\1\0\1\22\1\0\6\22\2\0\12\65\2\0"+
    "\4\22\40\0\1\22\27\0\2\22\6\0\12\65\13\0"+
    "\1\22\1\0\1\22\1\0\1\22\4\0\12\22\1\0"+
    "\44\22\4\0\24\22\1\0\22\22\1\0\44\22\11\0"+
    "\1\22\71\0\100\22\12\65\6\0\100\22\12\65\4\22"+
    "\2\0\46\22\1\0\1\22\5\0\1\22\2\0\53\22"+
    "\1\0\115\22\1\0\4\22\2\0\7\22\1\0\1\22"+
    "\1\0\4\22\2\0\51\22\1\0\4\22\2\0\41\22"+
    "\1\0\4\22\2\0\7\22\1\0\1\22\1\0\4\22"+
    "\2\0\17\22\1\0\71\22\1\0\4\22\2\0\103\22"+
    "\2\0\3\22\40\0\20\22\20\0\126\22\2\0\6\22"+
    "\3\0\u016c\22\2\0\21\22\1\1\32\22\5\0\113\22"+
    "\3\0\13\22\7\0\15\22\1\0\7\22\13\0\25\22"+
    "\13\0\24\22\14\0\15\22\1\0\3\22\1\0\2\22"+
    "\14\0\124\22\3\0\1\22\4\0\2\22\2\0\12\65"+
    "\41\0\3\22\2\0\12\65\6\0\131\22\7\0\53\22"+
    "\5\0\106\22\12\0\37\22\1\0\14\22\4\0\14\22"+
    "\12\0\12\65\36\22\2\0\5\22\13\0\54\22\4\0"+
    "\32\22\6\0\12\65\46\0\34\22\4\0\77\22\1\0"+
    "\35\22\2\0\1\22\12\65\6\0\12\65\15\0\1\22"+
    "\10\0\17\22\101\0\114\22\4\0\12\65\21\0\11\22"+
    "\14\0\60\22\12\65\72\22\14\0\70\22\10\0\12\65"+
    "\3\0\3\22\12\65\44\22\2\0\11\22\7\0\53\22"+
    "\2\0\3\22\20\0\3\22\1\0\47\22\5\0\372\22"+
    "\1\0\33\22\2\0\6\22\2\0\46\22\2\0\6\22"+
    "\2\0\10\22\1\0\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\37\22\2\0\65\22\1\0\7\22\1\0\1\22"+
    "\3\0\3\22\1\0\7\22\3\0\4\22\2\0\6\22"+
    "\4\0\15\22\5\0\3\22\1\0\7\22\3\0\13\1"+
    "\35\0\2\1\5\0\1\1\17\0\2\22\23\0\1\22"+
    "\12\0\1\1\21\0\1\22\15\0\1\22\20\0\15\22"+
    "\63\0\41\22\21\0\1\22\4\0\1\22\2\0\12\22"+
    "\1\0\1\22\3\0\5\22\6\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\4\22\1\0\13\22\2\0\4\22"+
    "\5\0\5\22\4\0\1\22\21\0\51\22\u022d\0\64\22"+
    "\26\0\57\22\1\0\57\22\1\0\205\22\6\0\11\22"+
    "\14\0\46\22\1\0\1\22\5\0\1\22\2\0\70\22"+
    "\7\0\1\22\17\0\30\22\11\0\7\22\1\0\7\22"+
    "\1\0\7\22\1\0\7\22\1\0\7\22\1\0\7\22"+
    "\1\0\7\22\1\0\7\22\1\0\40\22\57\0\1\22"+
    "\320\0\1\1\4\0\3\22\31\0\17\22\1\0\5\22"+
    "\2\0\5\22\4\0\126\22\2\0\2\22\2\0\3\22"+
    "\1\0\132\22\1\0\4\22\5\0\53\22\1\0\136\22"+
    "\21\0\33\22\65\0\306\22\112\0\360\22\20\0\215\22"+
    "\103\0\56\22\2\0\15\22\3\0\20\22\12\65\2\22"+
    "\24\0\63\22\1\0\12\22\1\0\163\22\45\0\11\22"+
    "\2\0\147\22\2\0\65\22\2\0\5\22\60\0\61\22"+
    "\30\0\64\22\14\0\106\22\12\0\12\65\6\0\30\22"+
    "\3\0\1\22\1\0\3\22\12\65\44\22\2\0\44\22"+
    "\14\0\35\22\3\0\101\22\16\0\1\22\12\65\6\0"+
    "\20\22\12\65\5\22\1\0\67\22\11\0\16\22\2\0"+
    "\12\65\6\0\27\22\3\0\111\22\30\0\3\22\2\0"+
    "\20\22\2\0\5\22\12\0\6\22\2\0\6\22\2\0"+
    "\6\22\11\0\7\22\1\0\7\22\1\0\53\22\1\0"+
    "\14\22\10\0\173\22\1\0\2\22\2\0\12\65\6\0"+
    "\244\22\14\0\27\22\4\0\61\22\4\0\156\22\2\0"+
    "\152\22\46\0\7\22\14\0\5\22\5\0\14\22\1\0"+
    "\15\22\1\0\5\22\1\0\1\22\1\0\2\22\1\0"+
    "\2\22\1\0\154\22\41\0\153\22\22\0\100\22\2\0"+
    "\66\22\50\0\14\22\4\0\20\22\20\0\20\22\3\0"+
    "\2\22\30\0\3\22\40\0\5\22\1\0\207\22\23\0"+
    "\12\65\7\0\32\22\4\0\1\22\1\0\32\22\13\0"+
    "\131\22\3\0\6\22\2\0\6\22\2\0\6\22\2\0"+
    "\3\22\43\0\14\22\1\0\32\22\1\0\23\22\1\0"+
    "\2\22\1\0\17\22\2\0\16\22\42\0\173\22\105\0"+
    "\65\22\210\0\1\22\202\0\35\22\3\0\61\22\17\0"+
    "\1\22\37\0\40\22\15\0\36\22\5\0\53\22\5\0"+
    "\36\22\2\0\44\22\4\0\10\22\1\0\5\22\52\0"+
    "\236\22\2\0\12\65\6\0\44\22\4\0\44\22\4\0"+
    "\50\22\10\0\64\22\234\0\67\22\11\0\26\22\12\0"+
    "\10\22\230\0\6\22\2\0\1\22\1\0\54\22\1\0"+
    "\2\22\3\0\1\22\2\0\27\22\12\0\27\22\11\0"+
    "\37\22\101\0\23\22\1\0\2\22\12\0\26\22\12\0"+
    "\32\22\106\0\70\22\6\0\2\22\100\0\4\22\1\0"+
    "\2\22\5\0\10\22\1\0\3\22\1\0\35\22\2\0"+
    "\3\22\4\0\1\22\40\0\35\22\3\0\35\22\43\0"+
    "\10\22\1\0\36\22\31\0\66\22\12\0\26\22\12\0"+
    "\23\22\15\0\22\22\156\0\111\22\67\0\63\22\15\0"+
    "\63\22\15\0\50\22\10\0\12\65\306\0\35\22\12\0"+
    "\1\22\10\0\41\22\217\0\27\22\11\0\107\22\37\0"+
    "\12\65\17\0\74\22\25\0\31\22\7\0\12\65\6\0"+
    "\65\22\1\0\12\65\4\0\3\22\11\0\44\22\2\0"+
    "\1\22\11\0\105\22\4\0\4\22\3\0\12\65\1\22"+
    "\1\0\1\22\43\0\22\22\1\0\45\22\6\0\1\22"+
    "\101\0\7\22\1\0\1\22\1\0\4\22\1\0\17\22"+
    "\1\0\12\22\7\0\73\22\5\0\12\65\6\0\4\22"+
    "\1\0\10\22\2\0\2\22\2\0\26\22\1\0\7\22"+
    "\1\0\2\22\1\0\5\22\1\0\12\22\2\0\2\22"+
    "\2\0\3\22\2\0\1\22\6\0\1\22\5\0\7\22"+
    "\2\0\7\22\3\0\5\22\213\0\113\22\5\0\12\65"+
    "\4\0\2\22\40\0\106\22\1\0\1\22\10\0\12\65"+
    "\246\0\66\22\2\0\11\22\27\0\6\22\42\0\101\22"+
    "\3\0\1\22\13\0\12\65\46\0\71\22\7\0\12\65"+
    "\66\0\33\22\2\0\17\22\4\0\12\65\306\0\73\22"+
    "\145\0\100\22\12\65\25\0\1\22\240\0\10\22\2\0"+
    "\56\22\2\0\10\22\1\0\2\22\33\0\77\22\10\0"+
    "\1\22\10\0\112\22\3\0\1\22\42\0\71\22\7\0"+
    "\11\22\1\0\55\22\1\0\11\22\17\0\12\65\30\0"+
    "\36\22\2\0\26\22\1\0\16\22\111\0\7\22\1\0"+
    "\2\22\1\0\54\22\3\0\1\22\1\0\2\22\1\0"+
    "\11\22\10\0\12\65\6\0\6\22\1\0\2\22\1\0"+
    "\45\22\1\0\2\22\1\0\6\22\7\0\12\65\u0136\0"+
    "\27\22\11\0\232\22\146\0\157\22\21\0\304\22\274\0"+
    "\57\22\321\0\107\22\271\0\71\22\7\0\37\22\1\0"+
    "\12\65\146\0\36\22\2\0\5\22\13\0\67\22\11\0"+
    "\4\22\14\0\12\65\11\0\25\22\5\0\23\22\260\0"+
    "\100\22\200\0\113\22\4\0\71\22\7\0\21\22\100\0"+
    "\2\22\1\0\1\22\34\0\370\22\10\0\363\22\15\0"+
    "\37\22\61\0\3\22\21\0\4\22\10\0\u018c\22\4\0"+
    "\153\22\5\0\15\22\3\0\11\22\7\0\12\22\3\0"+
    "\2\22\306\0\5\22\3\0\6\22\10\0\10\22\2\0"+
    "\7\22\36\0\4\22\224\0\3\22\273\0\125\22\1\0"+
    "\107\22\1\0\2\22\2\0\1\22\2\0\2\22\2\0"+
    "\4\22\1\0\14\22\1\0\1\22\1\0\7\22\1\0"+
    "\101\22\1\0\4\22\2\0\10\22\1\0\7\22\1\0"+
    "\34\22\1\0\4\22\1\0\5\22\1\0\1\22\3\0"+
    "\7\22\1\0\u0154\22\2\0\31\22\1\0\31\22\1\0"+
    "\37\22\1\0\31\22\1\0\37\22\1\0\31\22\1\0"+
    "\37\22\1\0\31\22\1\0\37\22\1\0\31\22\1\0"+
    "\10\22\2\0\62\65\67\22\4\0\62\22\10\0\1\22"+
    "\16\0\1\22\26\0\5\22\1\0\17\22\120\0\7\22"+
    "\1\0\21\22\2\0\7\22\1\0\2\22\1\0\5\22"+
    "\325\0\55\22\3\0\16\22\2\0\12\65\4\0\1\22"+
    "\u0171\0\60\22\12\65\6\0\305\22\13\0\7\22\51\0"+
    "\114\22\4\0\12\65\246\0\4\22\1\0\33\22\1\0"+
    "\2\22\1\0\1\22\2\0\1\22\1\0\12\22\1\0"+
    "\4\22\1\0\1\22\1\0\1\22\6\0\1\22\4\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\3\22\1\0"+
    "\2\22\1\0\1\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\2\22\1\0"+
    "\1\22\2\0\4\22\1\0\7\22\1\0\4\22\1\0"+
    "\4\22\1\0\1\22\1\0\12\22\1\0\21\22\5\0"+
    "\3\22\1\0\5\22\1\0\21\22\164\0\32\22\6\0"+
    "\32\22\6\0\32\22\166\0\327\22\51\0\65\22\13\0"+
    "\336\22\2\0\u0182\22\16\0\u0131\22\37\0\36\22\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\13\1\14\1\15\1\16\3\17"+
    "\1\20\1\21\1\22\1\23\13\0\2\17\1\0\1\24"+
    "\1\25\22\0\2\17\23\0\2\17\25\0\2\17\26\0"+
    "\2\17\26\0\2\17\30\0\2\17\32\0\1\26\1\0"+
    "\2\17\30\0\1\27\2\0\2\17\32\0\2\17\15\0"+
    "\1\30\14\0\2\17\30\0\1\31\1\32\30\0\2\17"+
    "\14\0\1\33\4\0\1\34\5\0\1\35\1\36\1\37"+
    "\13\0\1\40\3\0\1\41\17\0\1\42\7\0\1\43"+
    "\2\0\1\44\7\0\1\45\5\0\1\46\7\0\1\47"+
    "\2\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\66\0\242\0\330\0\330"+
    "\0\66\0\66\0\66\0\66\0\u010e\0\u0144\0\66\0\66"+
    "\0\66\0\u010e\0\u017a\0\u01b0\0\66\0\66\0\66\0\66"+
    "\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360"+
    "\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\66\0\66"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4"+
    "\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584"+
    "\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734"+
    "\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4"+
    "\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94"+
    "\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44"+
    "\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154"+
    "\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304"+
    "\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4"+
    "\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664"+
    "\0\u269a\0\u26d0\0\u2706\0\u273c\0\66\0\u2772\0\u27a8\0\u27de"+
    "\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee"+
    "\0\66\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68"+
    "\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018"+
    "\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8"+
    "\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378"+
    "\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528"+
    "\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\66\0\u36a2"+
    "\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c\0\u3852"+
    "\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02"+
    "\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2"+
    "\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62"+
    "\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12"+
    "\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2"+
    "\0\u40f8\0\u412e\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272"+
    "\0\u42a8\0\u42de\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422"+
    "\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2"+
    "\0\u4608\0\u463e\0\u4674\0\u46aa\0\u46e0\0\66\0\u4716\0\u474c"+
    "\0\u4782\0\u47b8\0\66\0\u47ee\0\u4824\0\u485a\0\u4890\0\u48c6"+
    "\0\66\0\u010e\0\u010e\0\u48fc\0\u4932\0\u4968\0\u499e\0\u49d4"+
    "\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2\0\u4b18\0\66\0\u4b4e"+
    "\0\u4b84\0\u4bba\0\66\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u4cc8"+
    "\0\u4cfe\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78"+
    "\0\u4eae\0\u4ee4\0\66\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2"+
    "\0\u5028\0\u505e\0\66\0\u5094\0\u50ca\0\66\0\u5100\0\u5136"+
    "\0\u516c\0\u51a2\0\u51d8\0\u520e\0\u5244\0\66\0\u527a\0\u52b0"+
    "\0\u52e6\0\u531c\0\u5352\0\66\0\u5388\0\u53be\0\u53f4\0\u542a"+
    "\0\u5460\0\u5496\0\u54cc\0\66\0\u5502\0\u5538\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\5\22\1\23\2\22\1\24\13\22\1\25\1\26\4\22"+
    "\1\23\1\24\6\22\1\27\1\30\1\22\70\0\1\3"+
    "\63\0\1\31\3\32\1\31\1\0\6\31\2\33\5\31"+
    "\1\34\1\31\1\35\1\36\3\31\1\37\1\40\1\41"+
    "\1\31\1\42\3\31\1\43\22\31\1\33\6\0\2\7"+
    "\4\0\2\7\3\0\24\7\2\0\14\7\2\0\1\7"+
    "\6\0\2\7\4\0\2\22\3\0\24\22\2\0\14\22"+
    "\2\0\1\22\6\0\2\7\4\0\2\16\3\0\24\22"+
    "\2\0\14\22\2\0\1\22\6\0\2\7\4\0\2\22"+
    "\3\0\10\22\1\44\13\22\2\0\5\22\1\44\6\22"+
    "\2\0\1\22\6\0\2\7\4\0\2\22\3\0\13\22"+
    "\1\45\10\22\2\0\7\22\1\45\4\22\2\0\1\22"+
    "\1\31\3\46\1\31\1\47\60\31\1\46\3\32\1\46"+
    "\1\50\6\46\2\51\5\46\1\52\1\46\1\53\1\54"+
    "\3\46\1\55\1\56\1\57\1\46\1\60\3\46\1\61"+
    "\22\46\1\51\1\31\3\46\1\31\1\47\6\31\2\62"+
    "\47\31\1\62\1\31\3\46\1\31\1\47\31\31\1\63"+
    "\27\31\3\46\1\31\1\47\24\31\1\64\34\31\3\46"+
    "\1\31\1\47\17\31\1\65\41\31\3\46\1\31\1\47"+
    "\27\31\1\66\31\31\3\46\1\31\1\47\27\31\1\67"+
    "\31\31\3\46\1\31\1\47\34\31\1\70\24\31\3\46"+
    "\1\31\1\47\13\31\1\71\45\31\3\46\1\31\1\47"+
    "\32\31\1\72\25\31\6\0\2\7\4\0\2\22\3\0"+
    "\13\22\1\73\10\22\2\0\7\22\1\73\4\22\2\0"+
    "\1\22\6\0\2\7\4\0\2\22\3\0\10\22\1\74"+
    "\13\22\2\0\5\22\1\74\6\22\2\0\1\22\5\46"+
    "\1\50\65\46\1\50\6\46\2\75\47\46\1\75\5\46"+
    "\1\50\31\46\1\76\33\46\1\50\24\46\1\77\40\46"+
    "\1\50\17\46\1\100\45\46\1\50\27\46\1\101\35\46"+
    "\1\50\27\46\1\102\35\46\1\50\34\46\1\103\30\46"+
    "\1\50\13\46\1\104\51\46\1\50\32\46\1\105\25\46"+
    "\1\31\3\46\1\31\1\47\6\31\2\106\47\31\1\106"+
    "\1\31\3\46\1\31\1\47\17\31\1\107\41\31\3\46"+
    "\1\31\1\47\23\31\1\110\35\31\3\46\1\31\1\47"+
    "\15\31\1\111\43\31\3\46\1\31\1\47\21\31\1\112"+
    "\37\31\3\46\1\31\1\47\16\31\1\113\42\31\3\46"+
    "\1\31\1\47\17\31\1\114\41\31\3\46\1\31\1\47"+
    "\31\31\1\115\1\116\26\31\3\46\1\31\1\47\34\31"+
    "\1\117\23\31\6\0\2\7\4\0\2\22\3\0\24\22"+
    "\2\0\1\120\13\22\2\0\1\22\6\0\2\7\4\0"+
    "\2\22\3\0\24\22\2\0\1\121\13\22\2\0\1\22"+
    "\5\46\1\50\6\46\2\122\47\46\1\122\5\46\1\50"+
    "\17\46\1\123\45\46\1\50\23\46\1\124\41\46\1\50"+
    "\15\46\1\125\47\46\1\50\21\46\1\126\43\46\1\50"+
    "\16\46\1\127\46\46\1\50\17\46\1\130\45\46\1\50"+
    "\31\46\1\131\1\132\32\46\1\50\34\46\1\133\23\46"+
    "\1\31\3\46\1\31\1\47\6\31\2\134\47\31\1\134"+
    "\1\31\3\46\1\31\1\47\13\31\1\135\2\31\1\136"+
    "\42\31\3\46\1\31\1\47\25\31\1\137\33\31\3\46"+
    "\1\31\1\47\22\31\1\140\36\31\3\46\1\31\1\47"+
    "\23\31\1\141\35\31\3\46\1\31\1\47\23\31\1\142"+
    "\35\31\3\46\1\31\1\47\35\31\1\143\23\31\3\46"+
    "\1\31\1\47\13\31\1\144\45\31\3\46\1\31\1\47"+
    "\32\31\1\145\26\31\3\46\1\31\1\47\13\31\1\146"+
    "\44\31\6\0\2\7\4\0\2\22\3\0\17\22\1\147"+
    "\4\22\2\0\11\22\1\147\2\22\2\0\1\22\6\0"+
    "\2\7\4\0\2\22\3\0\17\22\1\150\4\22\2\0"+
    "\11\22\1\150\2\22\2\0\1\22\5\46\1\50\6\46"+
    "\2\151\47\46\1\151\5\46\1\50\13\46\1\152\2\46"+
    "\1\153\46\46\1\50\25\46\1\154\37\46\1\50\22\46"+
    "\1\155\42\46\1\50\23\46\1\156\41\46\1\50\23\46"+
    "\1\157\41\46\1\50\35\46\1\160\27\46\1\50\13\46"+
    "\1\161\51\46\1\50\32\46\1\162\32\46\1\50\13\46"+
    "\1\163\44\46\1\31\3\46\1\31\1\47\4\31\1\164"+
    "\54\31\3\46\1\31\1\47\31\31\1\165\27\31\3\46"+
    "\1\31\1\47\17\31\1\166\41\31\3\46\1\31\1\47"+
    "\23\31\1\167\35\31\3\46\1\31\1\47\13\31\1\170"+
    "\45\31\3\46\1\31\1\47\26\31\1\171\32\31\3\46"+
    "\1\31\1\47\20\31\1\172\40\31\3\46\1\31\1\47"+
    "\27\31\1\173\31\31\3\46\1\31\1\47\25\31\1\174"+
    "\33\31\3\46\1\31\1\47\36\31\1\175\22\31\3\46"+
    "\1\31\1\47\31\31\1\176\26\31\6\0\2\7\4\0"+
    "\2\22\3\0\14\22\1\177\7\22\2\0\10\22\1\177"+
    "\3\22\2\0\1\22\6\0\2\7\4\0\2\22\3\0"+
    "\14\22\1\200\7\22\2\0\10\22\1\200\3\22\2\0"+
    "\1\22\5\46\1\50\4\46\1\201\60\46\1\50\31\46"+
    "\1\202\33\46\1\50\17\46\1\203\45\46\1\50\23\46"+
    "\1\204\41\46\1\50\13\46\1\205\51\46\1\50\26\46"+
    "\1\206\36\46\1\50\20\46\1\207\44\46\1\50\27\46"+
    "\1\210\35\46\1\50\25\46\1\211\37\46\1\50\36\46"+
    "\1\212\26\46\1\50\31\46\1\213\26\46\1\31\3\46"+
    "\1\31\1\47\6\31\2\214\47\31\1\214\1\31\3\46"+
    "\1\31\1\47\41\31\1\215\17\31\3\46\1\31\1\47"+
    "\26\31\1\216\32\31\3\46\1\31\1\47\26\31\1\217"+
    "\32\31\3\46\1\31\1\47\41\31\1\220\17\31\3\46"+
    "\1\31\1\47\41\31\1\221\17\31\3\46\1\31\1\47"+
    "\23\31\1\222\35\31\3\46\1\31\1\47\41\31\1\223"+
    "\17\31\3\46\1\31\1\47\17\31\1\224\41\31\3\46"+
    "\1\31\1\47\27\31\1\225\31\31\3\46\1\31\1\47"+
    "\23\31\1\226\34\31\6\0\2\7\4\0\2\22\3\0"+
    "\11\22\1\227\12\22\2\0\6\22\1\227\5\22\2\0"+
    "\1\22\6\0\2\7\4\0\2\22\3\0\11\22\1\230"+
    "\12\22\2\0\6\22\1\230\5\22\2\0\1\22\5\46"+
    "\1\50\6\46\2\231\47\46\1\231\5\46\1\50\41\46"+
    "\1\232\23\46\1\50\26\46\1\233\36\46\1\50\26\46"+
    "\1\234\36\46\1\50\41\46\1\235\23\46\1\50\41\46"+
    "\1\236\23\46\1\50\23\46\1\237\41\46\1\50\41\46"+
    "\1\240\23\46\1\50\17\46\1\241\45\46\1\50\27\46"+
    "\1\242\35\46\1\50\23\46\1\243\34\46\1\31\3\46"+
    "\1\31\1\47\6\31\2\244\47\31\1\244\1\31\3\46"+
    "\1\31\1\47\34\31\1\245\24\31\3\46\1\31\1\47"+
    "\15\31\1\246\43\31\3\46\1\31\1\47\13\31\1\247"+
    "\45\31\3\46\1\31\1\47\15\31\1\250\7\31\1\251"+
    "\33\31\3\46\1\31\1\47\34\31\1\252\24\31\3\46"+
    "\1\31\1\47\15\31\1\253\43\31\3\46\1\31\1\47"+
    "\20\31\1\254\7\31\1\255\30\31\3\46\1\31\1\47"+
    "\33\31\1\256\25\31\3\46\1\31\1\47\31\31\1\257"+
    "\27\31\3\46\1\31\1\47\27\31\1\260\30\31\6\0"+
    "\2\7\4\0\2\22\3\0\10\22\1\261\13\22\2\0"+
    "\5\22\1\261\6\22\2\0\1\22\6\0\2\7\4\0"+
    "\2\22\3\0\10\22\1\262\13\22\2\0\5\22\1\262"+
    "\6\22\2\0\1\22\5\46\1\50\6\46\2\263\47\46"+
    "\1\263\5\46\1\50\34\46\1\264\30\46\1\50\15\46"+
    "\1\265\47\46\1\50\13\46\1\266\51\46\1\50\15\46"+
    "\1\267\7\46\1\270\37\46\1\50\34\46\1\271\30\46"+
    "\1\50\15\46\1\272\47\46\1\50\20\46\1\273\7\46"+
    "\1\274\34\46\1\50\33\46\1\275\31\46\1\50\31\46"+
    "\1\276\33\46\1\50\27\46\1\277\30\46\1\31\3\46"+
    "\1\31\1\47\4\31\1\300\54\31\3\46\1\31\1\47"+
    "\32\31\1\301\26\31\3\46\1\31\1\47\23\31\1\302"+
    "\35\31\3\46\1\31\1\47\31\31\1\303\27\31\3\46"+
    "\1\31\1\47\31\31\1\304\27\31\3\46\1\31\1\47"+
    "\27\31\1\305\31\31\3\46\1\31\1\47\32\31\1\306"+
    "\26\31\3\46\1\31\1\47\13\31\1\307\45\31\3\46"+
    "\1\31\1\47\27\31\1\310\31\31\3\46\1\31\1\47"+
    "\13\31\1\311\45\31\3\46\1\31\1\47\31\31\1\312"+
    "\27\31\3\46\1\31\1\47\16\31\1\313\42\31\3\314"+
    "\1\31\1\315\41\31\1\316\16\31\6\0\2\7\4\0"+
    "\2\22\3\0\2\22\1\317\21\22\2\0\1\22\1\317"+
    "\12\22\2\0\1\22\6\0\2\7\4\0\2\22\3\0"+
    "\2\22\1\320\21\22\2\0\1\22\1\320\12\22\2\0"+
    "\1\22\5\46\1\50\4\46\1\321\60\46\1\50\32\46"+
    "\1\322\32\46\1\50\23\46\1\323\41\46\1\50\31\46"+
    "\1\324\33\46\1\50\31\46\1\325\33\46\1\50\27\46"+
    "\1\326\35\46\1\50\32\46\1\327\32\46\1\50\13\46"+
    "\1\330\51\46\1\50\27\46\1\331\35\46\1\50\13\46"+
    "\1\332\51\46\1\50\31\46\1\333\33\46\1\50\16\46"+
    "\1\334\42\46\3\314\1\46\1\315\41\46\1\335\16\46"+
    "\1\31\3\46\1\31\1\47\6\31\2\336\47\31\1\336"+
    "\1\31\3\46\1\31\1\47\34\31\1\337\24\31\3\46"+
    "\1\31\1\47\13\31\1\340\45\31\3\46\1\31\1\47"+
    "\41\31\1\341\17\31\3\46\1\31\1\47\17\31\1\342"+
    "\41\31\3\46\1\31\1\47\16\31\1\343\42\31\3\46"+
    "\1\31\1\47\34\31\1\344\24\31\3\46\1\31\1\47"+
    "\31\31\1\345\27\31\3\46\1\31\1\47\31\31\1\346"+
    "\27\31\3\46\1\31\1\47\32\31\1\347\26\31\3\46"+
    "\1\31\1\47\27\31\1\350\31\31\3\334\1\31\1\351"+
    "\60\31\1\46\3\314\1\46\1\315\60\46\1\31\3\46"+
    "\1\31\1\47\13\31\1\352\12\31\1\353\31\31\6\0"+
    "\2\7\4\0\2\22\3\0\10\22\1\354\13\22\2\0"+
    "\5\22\1\354\6\22\2\0\1\22\6\0\2\7\4\0"+
    "\2\22\3\0\10\22\1\355\13\22\2\0\5\22\1\355"+
    "\6\22\2\0\1\22\5\46\1\50\6\46\2\356\47\46"+
    "\1\356\5\46\1\50\34\46\1\357\30\46\1\50\13\46"+
    "\1\360\51\46\1\50\41\46\1\361\23\46\1\50\17\46"+
    "\1\362\45\46\1\50\16\46\1\363\46\46\1\50\34\46"+
    "\1\364\30\46\1\50\31\46\1\365\33\46\1\50\31\46"+
    "\1\366\33\46\1\50\32\46\1\367\32\46\1\50\27\46"+
    "\1\370\31\46\3\334\1\46\1\351\65\46\1\50\13\46"+
    "\1\371\12\46\1\372\31\46\1\31\3\46\1\31\1\47"+
    "\6\31\2\373\47\31\1\373\1\31\3\46\1\31\1\47"+
    "\13\31\1\374\45\31\3\46\1\31\1\47\24\31\1\375"+
    "\34\31\3\46\1\31\1\47\34\31\1\376\24\31\3\46"+
    "\1\31\1\47\13\31\1\377\45\31\3\46\1\31\1\47"+
    "\23\31\1\u0100\35\31\3\46\1\31\1\47\13\31\1\u0101"+
    "\45\31\3\46\1\31\1\47\41\31\1\u0102\17\31\3\46"+
    "\1\31\1\47\25\31\1\u0103\33\31\3\46\1\31\1\47"+
    "\32\31\1\u0104\26\31\3\46\1\31\1\47\32\31\1\u0105"+
    "\26\31\3\46\1\31\1\47\26\31\1\u0106\32\31\3\46"+
    "\1\31\1\47\34\31\1\u0107\23\31\6\0\2\7\4\0"+
    "\2\22\3\0\20\22\1\u0108\3\22\2\0\12\22\1\u0108"+
    "\1\22\2\0\1\22\6\0\2\7\4\0\2\22\3\0"+
    "\20\22\1\u0109\3\22\2\0\12\22\1\u0109\1\22\2\0"+
    "\1\22\5\46\1\50\6\46\2\u010a\47\46\1\u010a\5\46"+
    "\1\50\13\46\1\u010b\51\46\1\50\24\46\1\u010c\40\46"+
    "\1\50\34\46\1\u010d\30\46\1\50\13\46\1\u010e\51\46"+
    "\1\50\23\46\1\u010f\41\46\1\50\13\46\1\u0110\51\46"+
    "\1\50\41\46\1\u0111\23\46\1\50\25\46\1\u0112\37\46"+
    "\1\50\32\46\1\u0113\32\46\1\50\32\46\1\u0114\32\46"+
    "\1\50\26\46\1\u0115\36\46\1\50\34\46\1\u0116\23\46"+
    "\1\31\3\u010a\1\31\1\u0117\61\31\3\46\1\31\1\47"+
    "\31\31\1\u0118\27\31\3\46\1\31\1\47\17\31\1\u0119"+
    "\41\31\3\46\1\31\1\47\32\31\1\u011a\26\31\3\46"+
    "\1\31\1\47\15\31\1\u011b\43\31\3\46\1\31\1\47"+
    "\20\31\1\u011c\40\31\3\46\1\31\1\47\31\31\1\u011d"+
    "\27\31\3\46\1\31\1\47\34\31\1\u011e\24\31\3\46"+
    "\1\31\1\47\34\31\1\u011f\24\31\3\46\1\31\1\47"+
    "\36\31\1\u0120\22\31\3\46\1\31\1\47\41\31\1\u0121"+
    "\17\31\3\46\1\31\1\47\33\31\1\u0122\25\31\3\46"+
    "\1\31\1\47\17\31\1\u0123\40\31\6\0\2\7\4\0"+
    "\2\22\3\0\21\22\1\u0124\2\22\2\0\13\22\1\u0124"+
    "\2\0\1\22\6\0\2\7\4\0\2\22\3\0\21\22"+
    "\1\u0125\2\22\2\0\13\22\1\u0125\2\0\1\22\1\46"+
    "\3\u010a\1\46\1\u0117\65\46\1\50\31\46\1\u0126\33\46"+
    "\1\50\17\46\1\u0127\45\46\1\50\32\46\1\u0128\32\46"+
    "\1\50\15\46\1\u0129\47\46\1\50\20\46\1\u012a\44\46"+
    "\1\50\31\46\1\u012b\33\46\1\50\34\46\1\u012c\30\46"+
    "\1\50\34\46\1\u012d\30\46\1\50\36\46\1\u012e\26\46"+
    "\1\50\41\46\1\u012f\23\46\1\50\33\46\1\u0130\31\46"+
    "\1\50\17\46\1\u0131\40\46\1\31\3\46\1\31\1\47"+
    "\23\31\1\u0132\35\31\3\46\1\31\1\47\32\31\1\u0133"+
    "\26\31\3\46\1\31\1\47\34\31\1\u0134\24\31\3\46"+
    "\1\31\1\47\23\31\1\u0135\35\31\3\46\1\31\1\47"+
    "\23\31\1\u0136\35\31\3\46\1\31\1\47\23\31\1\u0137"+
    "\35\31\3\46\1\31\1\47\32\31\1\u0138\26\31\3\46"+
    "\1\31\1\47\24\31\1\u0139\34\31\3\46\1\31\1\47"+
    "\27\31\1\u013a\31\31\3\46\1\31\1\47\20\31\1\u013b"+
    "\40\31\3\46\1\31\1\47\23\31\1\u013c\35\31\3\46"+
    "\1\31\1\47\35\31\1\u013d\22\31\6\0\2\7\4\0"+
    "\2\22\3\0\3\22\1\u013e\20\22\2\0\2\22\1\u013e"+
    "\11\22\2\0\1\22\6\0\2\7\4\0\2\22\3\0"+
    "\3\22\1\u013f\20\22\2\0\2\22\1\u013f\11\22\2\0"+
    "\1\22\5\46\1\50\23\46\1\u0140\41\46\1\50\32\46"+
    "\1\u0141\32\46\1\50\34\46\1\u0142\30\46\1\50\23\46"+
    "\1\u0143\41\46\1\50\23\46\1\u0144\41\46\1\50\23\46"+
    "\1\u0145\41\46\1\50\32\46\1\u0146\32\46\1\50\24\46"+
    "\1\u0147\40\46\1\50\27\46\1\u0148\35\46\1\50\20\46"+
    "\1\u0149\44\46\1\50\23\46\1\u014a\41\46\1\50\35\46"+
    "\1\u014b\22\46\1\31\3\46\1\31\1\47\27\31\1\u014c"+
    "\31\31\3\46\1\31\1\47\41\31\1\u014d\17\31\3\46"+
    "\1\31\1\47\13\31\1\u014e\45\31\3\46\1\31\1\47"+
    "\27\31\1\u014f\31\31\3\46\1\31\1\47\15\31\1\u0150"+
    "\43\31\3\46\1\31\1\47\27\31\1\u0151\31\31\3\46"+
    "\1\31\1\47\34\31\1\u0152\24\31\3\46\1\31\1\47"+
    "\13\31\1\u0153\45\31\3\46\1\31\1\47\31\31\1\u0154"+
    "\27\31\3\46\1\31\1\47\27\31\1\u0155\31\31\3\46"+
    "\1\31\1\47\21\31\1\u0156\37\31\3\46\1\31\1\47"+
    "\27\31\1\u0157\30\31\6\0\2\7\4\0\2\22\3\0"+
    "\4\22\1\u0158\17\22\2\0\3\22\1\u0158\10\22\2\0"+
    "\1\22\6\0\2\7\4\0\2\22\3\0\4\22\1\u0159"+
    "\17\22\2\0\3\22\1\u0159\10\22\2\0\1\22\5\46"+
    "\1\50\27\46\1\u015a\35\46\1\50\41\46\1\u015b\23\46"+
    "\1\50\13\46\1\u015c\51\46\1\50\27\46\1\u015d\35\46"+
    "\1\50\15\46\1\u015e\47\46\1\50\27\46\1\u015f\35\46"+
    "\1\50\34\46\1\u0160\30\46\1\50\13\46\1\u0161\51\46"+
    "\1\50\31\46\1\u0162\33\46\1\50\27\46\1\u0163\35\46"+
    "\1\50\21\46\1\u0164\43\46\1\50\27\46\1\u0165\30\46"+
    "\1\31\3\u015a\1\31\1\u0166\61\31\3\46\1\31\1\47"+
    "\34\31\1\u0167\24\31\3\46\1\31\1\47\31\31\1\u0168"+
    "\27\31\3\46\1\31\1\47\26\31\1\u0169\32\31\3\46"+
    "\1\31\1\47\13\31\1\u016a\45\31\3\u015f\1\31\1\u016b"+
    "\61\31\3\46\1\31\1\47\13\31\1\u016c\45\31\3\46"+
    "\1\31\1\47\31\31\1\u016d\27\31\3\46\1\31\1\47"+
    "\16\31\1\u016e\42\31\3\46\1\31\1\47\31\31\1\u016f"+
    "\27\31\3\46\1\31\1\47\34\31\1\u0170\24\31\3\u0165"+
    "\1\31\1\u0171\60\31\6\0\2\7\4\0\2\22\3\0"+
    "\17\22\1\u0172\4\22\2\0\11\22\1\u0172\2\22\2\0"+
    "\1\22\6\0\2\7\4\0\2\22\3\0\17\22\1\u0173"+
    "\4\22\2\0\11\22\1\u0173\2\22\2\0\1\22\1\46"+
    "\3\u015a\1\46\1\u0166\65\46\1\50\34\46\1\u0174\30\46"+
    "\1\50\31\46\1\u0175\33\46\1\50\26\46\1\u0176\36\46"+
    "\1\50\13\46\1\u0177\45\46\3\u015f\1\46\1\u016b\65\46"+
    "\1\50\13\46\1\u0178\51\46\1\50\31\46\1\u0179\33\46"+
    "\1\50\16\46\1\u017a\46\46\1\50\31\46\1\u017b\33\46"+
    "\1\50\34\46\1\u017c\24\46\3\u0165\1\46\1\u0171\60\46"+
    "\1\31\3\46\1\31\1\47\32\31\1\u017d\26\31\3\46"+
    "\1\31\1\47\23\31\1\u017e\35\31\3\u0176\1\31\1\u017f"+
    "\61\31\3\46\1\31\1\47\15\31\1\u0180\43\31\3\46"+
    "\1\31\1\47\31\31\1\u0181\27\31\3\46\1\31\1\47"+
    "\23\31\1\u0182\35\31\3\u017a\1\31\1\u0183\61\31\3\46"+
    "\1\31\1\47\25\31\1\u0184\33\31\3\46\1\31\1\47"+
    "\27\31\1\u0185\30\31\5\46\1\50\32\46\1\u0186\32\46"+
    "\1\50\23\46\1\u0187\35\46\3\u0176\1\46\1\u017f\65\46"+
    "\1\50\15\46\1\u0188\47\46\1\50\31\46\1\u0189\33\46"+
    "\1\50\23\46\1\u018a\35\46\3\u017a\1\46\1\u0183\65\46"+
    "\1\50\25\46\1\u018b\37\46\1\50\27\46\1\u018c\30\46"+
    "\1\31\3\46\1\31\1\47\34\31\1\u018d\24\31\3\46"+
    "\1\31\1\47\27\31\1\u018e\31\31\3\46\1\31\1\47"+
    "\23\31\1\u018f\35\31\3\46\1\31\1\47\23\31\1\u0190"+
    "\35\31\3\46\1\31\1\47\27\31\1\u0191\31\31\3\46"+
    "\1\31\1\47\34\31\1\u0192\24\31\3\u018c\1\31\1\u0193"+
    "\60\31\5\46\1\50\34\46\1\u0194\30\46\1\50\27\46"+
    "\1\u0195\35\46\1\50\23\46\1\u0196\41\46\1\50\23\46"+
    "\1\u0197\41\46\1\50\27\46\1\u0198\35\46\1\50\34\46"+
    "\1\u0199\24\46\3\u018c\1\46\1\u0193\60\46\1\31\3\46"+
    "\1\31\1\47\13\31\1\u019a\45\31\3\u0195\1\31\1\u019b"+
    "\61\31\3\46\1\31\1\47\27\31\1\u019c\31\31\3\46"+
    "\1\31\1\47\27\31\1\u019d\31\31\3\u0198\1\31\1\u019e"+
    "\61\31\3\46\1\31\1\47\24\31\1\u019f\33\31\5\46"+
    "\1\50\13\46\1\u01a0\45\46\3\u0195\1\46\1\u019b\65\46"+
    "\1\50\27\46\1\u01a1\35\46\1\50\27\46\1\u01a2\31\46"+
    "\3\u0198\1\46\1\u019e\65\46\1\50\24\46\1\u01a3\33\46"+
    "\1\31\3\46\1\31\1\47\31\31\1\u01a4\27\31\3\46"+
    "\1\31\1\47\26\31\1\u01a5\32\31\3\u01a2\1\31\1\u01a6"+
    "\61\31\3\46\1\31\1\47\13\31\1\u01a7\44\31\5\46"+
    "\1\50\31\46\1\u01a8\33\46\1\50\26\46\1\u01a9\32\46"+
    "\3\u01a2\1\46\1\u01a6\65\46\1\50\13\46\1\u01aa\44\46"+
    "\1\31\3\46\1\31\1\47\23\31\1\u01ab\35\31\3\u01a9"+
    "\1\31\1\u01ac\61\31\3\46\1\31\1\47\31\31\1\u01ad"+
    "\26\31\5\46\1\50\23\46\1\u01ae\35\46\3\u01a9\1\46"+
    "\1\u01ac\65\46\1\50\31\46\1\u01af\26\46\1\31\3\46"+
    "\1\31\1\47\27\31\1\u01b0\31\31\3\46\1\31\1\47"+
    "\23\31\1\u01b1\34\31\5\46\1\50\27\46\1\u01b2\35\46"+
    "\1\50\23\46\1\u01b3\34\46\1\31\3\u01b2\1\31\1\u01b4"+
    "\61\31\3\46\1\31\1\47\27\31\1\u01b5\30\31\1\46"+
    "\3\u01b2\1\46\1\u01b4\65\46\1\50\27\46\1\u01b6\30\46"+
    "\1\31\3\u01b6\1\31\1\u01b7\60\31\1\46\3\u01b6\1\46"+
    "\1\u01b7\60\46";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21870];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\3\1\4\11\2\1\3\11"+
    "\3\1\4\11\13\0\2\1\1\0\2\11\22\0\2\1"+
    "\23\0\2\1\25\0\2\1\26\0\2\1\26\0\2\1"+
    "\30\0\2\1\32\0\1\11\1\0\2\1\30\0\1\11"+
    "\2\0\2\1\32\0\2\1\15\0\1\11\14\0\2\1"+
    "\30\0\2\1\30\0\2\1\14\0\1\11\4\0\1\11"+
    "\5\0\1\11\2\1\13\0\1\11\3\0\1\11\17\0"+
    "\1\11\7\0\1\11\2\0\1\11\7\0\1\11\5\0"+
    "\1\11\7\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

	private Symbol symbol(int type) {
		return new Symbol(type, new Token(type, yyline + 1, yycolumn + 1));
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, new Token(type, (String) value, yyline + 1, yycolumn + 1));
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormsLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new java_cup.runtime.Symbol(FormsParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 41: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 42: break;
          case 3:
            { return symbol(EXCL, yytext());
            }
            // fall through
          case 43: break;
          case 4:
            { return symbol(QUOTE, yytext());
            }
            // fall through
          case 44: break;
          case 5:
            { return symbol(SYMB, yytext());
            }
            // fall through
          case 45: break;
          case 6:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 46: break;
          case 7:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 47: break;
          case 8:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 48: break;
          case 9:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 49: break;
          case 10:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 50: break;
          case 11:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 51: break;
          case 12:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 52: break;
          case 13:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 53: break;
          case 14:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 54: break;
          case 15:
            { return symbol(PARAM, yytext());
            }
            // fall through
          case 55: break;
          case 16:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 56: break;
          case 17:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 57: break;
          case 18:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 58: break;
          case 19:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 59: break;
          case 20:
            { return symbol(STR, yytext());
            }
            // fall through
          case 60: break;
          case 21:
            { return symbol(STR_N, yytext());
            }
            // fall through
          case 61: break;
          case 22:
            { return symbol(USER, yytext());
            }
            // fall through
          case 62: break;
          case 23:
            { return symbol(PASS, yytext());
            }
            // fall through
          case 63: break;
          case 24:
            { return symbol(DATE, yytext());
            }
            // fall through
          case 64: break;
          case 25:
            { return symbol(FIN_SOL, yytext());
            }
            // fall through
          case 65: break;
          case 26:
            { return symbol(INIT_SOL, yytext());
            }
            // fall through
          case 66: break;
          case 27:
            { return symbol(ADD_USER, yytext());
            }
            // fall through
          case 67: break;
          case 28:
            { return symbol(LOGIN, yytext());
            }
            // fall through
          case 68: break;
          case 29:
            { return symbol(NEW_USER, yytext());
            }
            // fall through
          case 69: break;
          case 30:
            { return symbol(FIN_MANY_SOL, yytext());
            }
            // fall through
          case 70: break;
          case 31:
            { return symbol(INIT_MANY_SOL, yytext());
            }
            // fall through
          case 71: break;
          case 32:
            { return symbol(DATE_ADD, yytext());
            }
            // fall through
          case 72: break;
          case 33:
            { return symbol(NEW_PASS, yytext());
            }
            // fall through
          case 73: break;
          case 34:
            { return symbol(OLD_USER, yytext());
            }
            // fall through
          case 74: break;
          case 35:
            { return symbol(DEL_USER, yytext());
            }
            // fall through
          case 75: break;
          case 36:
            { return symbol(NEW_FORM, yytext());
            }
            // fall through
          case 76: break;
          case 37:
            { return symbol(EDIT_USER, yytext());
            }
            // fall through
          case 77: break;
          case 38:
            { return symbol(DATE_MOD, yytext());
            }
            // fall through
          case 78: break;
          case 39:
            { return symbol(CRED, yytext());
            }
            // fall through
          case 79: break;
          case 40:
            { return symbol(PARAM_F, yytext());
            }
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
