// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: forms.flex

package com.cesar31.formsweb.parser.main;

import static com.cesar31.formsweb.parser.main.FormsParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class FormsLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\2\6\1\0\2\6\1\10\1\11"+
    "\1\12\1\13\1\6\1\14\1\15\11\16\1\17\1\6"+
    "\1\20\1\0\1\21\2\6\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\2\33\1\52\1\6\1\53"+
    "\1\6\1\54\1\0\2\33\1\55\1\56\1\57\1\60"+
    "\2\33\1\61\2\33\1\62\1\33\1\63\1\64\3\33"+
    "\1\65\1\66\1\67\5\33\1\70\1\0\1\71\7\0"+
    "\1\1\32\0\1\1\1\6\10\0\1\33\12\0\1\33"+
    "\4\0\1\33\4\0\1\6\27\33\1\0\37\33\1\0"+
    "\u01ca\33\4\0\14\33\16\0\5\33\7\0\1\33\1\0"+
    "\1\33\21\0\165\33\1\0\2\33\2\0\4\33\1\0"+
    "\1\33\6\0\1\33\1\0\3\33\1\0\1\33\1\0"+
    "\24\33\1\0\123\33\1\0\213\33\1\0\255\33\1\0"+
    "\46\33\2\0\1\33\6\0\51\33\10\0\55\33\1\0"+
    "\1\33\1\0\2\33\1\0\2\33\1\0\1\33\10\0"+
    "\33\33\4\0\4\33\35\0\13\33\5\0\100\33\12\72"+
    "\4\0\146\33\1\0\10\33\2\0\12\33\1\0\6\33"+
    "\12\72\3\33\2\0\1\33\20\0\73\33\2\0\145\33"+
    "\16\0\12\72\54\33\4\0\1\33\2\0\1\33\2\0"+
    "\56\33\22\0\34\33\4\0\13\33\65\0\25\33\1\0"+
    "\10\33\25\0\17\33\1\0\201\33\2\0\12\72\1\0"+
    "\23\33\1\0\10\33\2\0\2\33\2\0\26\33\1\0"+
    "\7\33\1\0\1\33\3\0\4\33\2\0\11\33\2\0"+
    "\2\33\2\0\4\33\10\0\1\33\4\0\2\33\1\0"+
    "\5\33\2\0\12\72\2\33\12\0\1\33\1\0\1\33"+
    "\2\0\3\33\1\0\6\33\4\0\2\33\2\0\26\33"+
    "\1\0\7\33\1\0\2\33\1\0\2\33\1\0\2\33"+
    "\2\0\1\33\1\0\5\33\4\0\2\33\2\0\3\33"+
    "\3\0\1\33\7\0\4\33\1\0\1\33\7\0\12\72"+
    "\6\33\13\0\3\33\1\0\11\33\1\0\3\33\1\0"+
    "\26\33\1\0\7\33\1\0\2\33\1\0\5\33\2\0"+
    "\12\33\1\0\3\33\1\0\3\33\2\0\1\33\17\0"+
    "\4\33\2\0\12\72\11\0\7\33\1\0\3\33\1\0"+
    "\10\33\2\0\2\33\2\0\26\33\1\0\7\33\1\0"+
    "\2\33\1\0\5\33\2\0\11\33\2\0\2\33\2\0"+
    "\3\33\10\0\2\33\4\0\2\33\1\0\5\33\2\0"+
    "\12\72\1\0\1\33\20\0\2\33\1\0\6\33\3\0"+
    "\3\33\1\0\4\33\3\0\2\33\1\0\1\33\1\0"+
    "\2\33\3\0\2\33\3\0\3\33\3\0\14\33\4\0"+
    "\5\33\3\0\3\33\1\0\4\33\2\0\1\33\6\0"+
    "\1\33\16\0\12\72\20\0\15\33\1\0\3\33\1\0"+
    "\27\33\1\0\20\33\3\0\10\33\1\0\3\33\1\0"+
    "\4\33\7\0\2\33\1\0\3\33\5\0\4\33\2\0"+
    "\12\72\20\0\4\33\1\0\10\33\1\0\3\33\1\0"+
    "\27\33\1\0\12\33\1\0\5\33\2\0\11\33\1\0"+
    "\3\33\1\0\4\33\7\0\2\33\7\0\1\33\1\0"+
    "\4\33\2\0\12\72\1\0\2\33\15\0\4\33\1\0"+
    "\10\33\1\0\3\33\1\0\63\33\1\0\3\33\1\0"+
    "\5\33\5\0\4\33\7\0\5\33\2\0\12\72\12\0"+
    "\6\33\2\0\2\33\1\0\22\33\3\0\30\33\1\0"+
    "\11\33\1\0\1\33\2\0\7\33\3\0\1\33\4\0"+
    "\6\33\1\0\1\33\1\0\10\33\6\0\12\72\2\0"+
    "\2\33\15\0\72\33\5\0\17\33\1\0\12\72\47\0"+
    "\2\33\1\0\1\33\1\0\5\33\1\0\30\33\1\0"+
    "\1\33\1\0\27\33\2\0\5\33\1\0\1\33\1\0"+
    "\6\33\2\0\12\72\2\0\4\33\40\0\1\33\27\0"+
    "\2\33\6\0\12\72\13\0\1\33\1\0\1\33\1\0"+
    "\1\33\4\0\12\33\1\0\44\33\4\0\24\33\1\0"+
    "\22\33\1\0\44\33\11\0\1\33\71\0\100\33\12\72"+
    "\6\0\100\33\12\72\4\33\2\0\46\33\1\0\1\33"+
    "\5\0\1\33\2\0\53\33\1\0\115\33\1\0\4\33"+
    "\2\0\7\33\1\0\1\33\1\0\4\33\2\0\51\33"+
    "\1\0\4\33\2\0\41\33\1\0\4\33\2\0\7\33"+
    "\1\0\1\33\1\0\4\33\2\0\17\33\1\0\71\33"+
    "\1\0\4\33\2\0\103\33\2\0\3\33\40\0\20\33"+
    "\20\0\126\33\2\0\6\33\3\0\u016c\33\2\0\21\33"+
    "\1\1\32\33\5\0\113\33\3\0\13\33\7\0\15\33"+
    "\1\0\7\33\13\0\25\33\13\0\24\33\14\0\15\33"+
    "\1\0\3\33\1\0\2\33\14\0\124\33\3\0\1\33"+
    "\4\0\2\33\2\0\12\72\41\0\3\33\2\0\12\72"+
    "\6\0\131\33\7\0\53\33\5\0\106\33\12\0\37\33"+
    "\1\0\14\33\4\0\14\33\12\0\12\72\36\33\2\0"+
    "\5\33\13\0\54\33\4\0\32\33\6\0\12\72\46\0"+
    "\34\33\4\0\77\33\1\0\35\33\2\0\1\33\12\72"+
    "\6\0\12\72\15\0\1\33\10\0\17\33\101\0\114\33"+
    "\4\0\12\72\21\0\11\33\14\0\60\33\12\72\72\33"+
    "\14\0\70\33\10\0\12\72\3\0\3\33\12\72\44\33"+
    "\2\0\11\33\7\0\53\33\2\0\3\33\20\0\3\33"+
    "\1\0\47\33\5\0\372\33\1\0\33\33\2\0\6\33"+
    "\2\0\46\33\2\0\6\33\2\0\10\33\1\0\1\33"+
    "\1\0\1\33\1\0\1\33\1\0\37\33\2\0\65\33"+
    "\1\0\7\33\1\0\1\33\3\0\3\33\1\0\7\33"+
    "\3\0\4\33\2\0\6\33\4\0\15\33\5\0\3\33"+
    "\1\0\7\33\3\0\13\1\35\0\2\1\5\0\1\1"+
    "\17\0\2\33\23\0\1\33\12\0\1\1\21\0\1\33"+
    "\15\0\1\33\20\0\15\33\63\0\41\33\21\0\1\33"+
    "\4\0\1\33\2\0\12\33\1\0\1\33\3\0\5\33"+
    "\6\0\1\33\1\0\1\33\1\0\1\33\1\0\4\33"+
    "\1\0\13\33\2\0\4\33\5\0\5\33\4\0\1\33"+
    "\21\0\51\33\u022d\0\64\33\26\0\57\33\1\0\57\33"+
    "\1\0\205\33\6\0\11\33\14\0\46\33\1\0\1\33"+
    "\5\0\1\33\2\0\70\33\7\0\1\33\17\0\30\33"+
    "\11\0\7\33\1\0\7\33\1\0\7\33\1\0\7\33"+
    "\1\0\7\33\1\0\7\33\1\0\7\33\1\0\7\33"+
    "\1\0\40\33\57\0\1\33\320\0\1\1\4\0\3\33"+
    "\31\0\17\33\1\0\5\33\2\0\5\33\4\0\126\33"+
    "\2\0\2\33\2\0\3\33\1\0\132\33\1\0\4\33"+
    "\5\0\53\33\1\0\136\33\21\0\33\33\65\0\306\33"+
    "\112\0\360\33\20\0\215\33\103\0\56\33\2\0\15\33"+
    "\3\0\20\33\12\72\2\33\24\0\63\33\1\0\12\33"+
    "\1\0\163\33\45\0\11\33\2\0\147\33\2\0\65\33"+
    "\2\0\5\33\60\0\61\33\30\0\64\33\14\0\106\33"+
    "\12\0\12\72\6\0\30\33\3\0\1\33\1\0\3\33"+
    "\12\72\44\33\2\0\44\33\14\0\35\33\3\0\101\33"+
    "\16\0\1\33\12\72\6\0\20\33\12\72\5\33\1\0"+
    "\67\33\11\0\16\33\2\0\12\72\6\0\27\33\3\0"+
    "\111\33\30\0\3\33\2\0\20\33\2\0\5\33\12\0"+
    "\6\33\2\0\6\33\2\0\6\33\11\0\7\33\1\0"+
    "\7\33\1\0\53\33\1\0\14\33\10\0\173\33\1\0"+
    "\2\33\2\0\12\72\6\0\244\33\14\0\27\33\4\0"+
    "\61\33\4\0\156\33\2\0\152\33\46\0\7\33\14\0"+
    "\5\33\5\0\14\33\1\0\15\33\1\0\5\33\1\0"+
    "\1\33\1\0\2\33\1\0\2\33\1\0\154\33\41\0"+
    "\153\33\22\0\100\33\2\0\66\33\50\0\14\33\4\0"+
    "\20\33\20\0\20\33\3\0\2\33\30\0\3\33\40\0"+
    "\5\33\1\0\207\33\23\0\12\72\7\0\32\33\4\0"+
    "\1\33\1\0\32\33\13\0\131\33\3\0\6\33\2\0"+
    "\6\33\2\0\6\33\2\0\3\33\43\0\14\33\1\0"+
    "\32\33\1\0\23\33\1\0\2\33\1\0\17\33\2\0"+
    "\16\33\42\0\173\33\105\0\65\33\210\0\1\33\202\0"+
    "\35\33\3\0\61\33\17\0\1\33\37\0\40\33\15\0"+
    "\36\33\5\0\53\33\5\0\36\33\2\0\44\33\4\0"+
    "\10\33\1\0\5\33\52\0\236\33\2\0\12\72\6\0"+
    "\44\33\4\0\44\33\4\0\50\33\10\0\64\33\234\0"+
    "\67\33\11\0\26\33\12\0\10\33\230\0\6\33\2\0"+
    "\1\33\1\0\54\33\1\0\2\33\3\0\1\33\2\0"+
    "\27\33\12\0\27\33\11\0\37\33\101\0\23\33\1\0"+
    "\2\33\12\0\26\33\12\0\32\33\106\0\70\33\6\0"+
    "\2\33\100\0\4\33\1\0\2\33\5\0\10\33\1\0"+
    "\3\33\1\0\35\33\2\0\3\33\4\0\1\33\40\0"+
    "\35\33\3\0\35\33\43\0\10\33\1\0\36\33\31\0"+
    "\66\33\12\0\26\33\12\0\23\33\15\0\22\33\156\0"+
    "\111\33\67\0\63\33\15\0\63\33\15\0\50\33\10\0"+
    "\12\72\306\0\35\33\12\0\1\33\10\0\41\33\217\0"+
    "\27\33\11\0\107\33\37\0\12\72\17\0\74\33\25\0"+
    "\31\33\7\0\12\72\6\0\65\33\1\0\12\72\4\0"+
    "\3\33\11\0\44\33\2\0\1\33\11\0\105\33\4\0"+
    "\4\33\3\0\12\72\1\33\1\0\1\33\43\0\22\33"+
    "\1\0\45\33\6\0\1\33\101\0\7\33\1\0\1\33"+
    "\1\0\4\33\1\0\17\33\1\0\12\33\7\0\73\33"+
    "\5\0\12\72\6\0\4\33\1\0\10\33\2\0\2\33"+
    "\2\0\26\33\1\0\7\33\1\0\2\33\1\0\5\33"+
    "\1\0\12\33\2\0\2\33\2\0\3\33\2\0\1\33"+
    "\6\0\1\33\5\0\7\33\2\0\7\33\3\0\5\33"+
    "\213\0\113\33\5\0\12\72\4\0\2\33\40\0\106\33"+
    "\1\0\1\33\10\0\12\72\246\0\66\33\2\0\11\33"+
    "\27\0\6\33\42\0\101\33\3\0\1\33\13\0\12\72"+
    "\46\0\71\33\7\0\12\72\66\0\33\33\2\0\17\33"+
    "\4\0\12\72\306\0\73\33\145\0\100\33\12\72\25\0"+
    "\1\33\240\0\10\33\2\0\56\33\2\0\10\33\1\0"+
    "\2\33\33\0\77\33\10\0\1\33\10\0\112\33\3\0"+
    "\1\33\42\0\71\33\7\0\11\33\1\0\55\33\1\0"+
    "\11\33\17\0\12\72\30\0\36\33\2\0\26\33\1\0"+
    "\16\33\111\0\7\33\1\0\2\33\1\0\54\33\3\0"+
    "\1\33\1\0\2\33\1\0\11\33\10\0\12\72\6\0"+
    "\6\33\1\0\2\33\1\0\45\33\1\0\2\33\1\0"+
    "\6\33\7\0\12\72\u0136\0\27\33\11\0\232\33\146\0"+
    "\157\33\21\0\304\33\274\0\57\33\321\0\107\33\271\0"+
    "\71\33\7\0\37\33\1\0\12\72\146\0\36\33\2\0"+
    "\5\33\13\0\67\33\11\0\4\33\14\0\12\72\11\0"+
    "\25\33\5\0\23\33\260\0\100\33\200\0\113\33\4\0"+
    "\71\33\7\0\21\33\100\0\2\33\1\0\1\33\34\0"+
    "\370\33\10\0\363\33\15\0\37\33\61\0\3\33\21\0"+
    "\4\33\10\0\u018c\33\4\0\153\33\5\0\15\33\3\0"+
    "\11\33\7\0\12\33\3\0\2\33\306\0\5\33\3\0"+
    "\6\33\10\0\10\33\2\0\7\33\36\0\4\33\224\0"+
    "\3\33\273\0\125\33\1\0\107\33\1\0\2\33\2\0"+
    "\1\33\2\0\2\33\2\0\4\33\1\0\14\33\1\0"+
    "\1\33\1\0\7\33\1\0\101\33\1\0\4\33\2\0"+
    "\10\33\1\0\7\33\1\0\34\33\1\0\4\33\1\0"+
    "\5\33\1\0\1\33\3\0\7\33\1\0\u0154\33\2\0"+
    "\31\33\1\0\31\33\1\0\37\33\1\0\31\33\1\0"+
    "\37\33\1\0\31\33\1\0\37\33\1\0\31\33\1\0"+
    "\37\33\1\0\31\33\1\0\10\33\2\0\62\72\67\33"+
    "\4\0\62\33\10\0\1\33\16\0\1\33\26\0\5\33"+
    "\1\0\17\33\120\0\7\33\1\0\21\33\2\0\7\33"+
    "\1\0\2\33\1\0\5\33\325\0\55\33\3\0\16\33"+
    "\2\0\12\72\4\0\1\33\u0171\0\60\33\12\72\6\0"+
    "\305\33\13\0\7\33\51\0\114\33\4\0\12\72\246\0"+
    "\4\33\1\0\33\33\1\0\2\33\1\0\1\33\2\0"+
    "\1\33\1\0\12\33\1\0\4\33\1\0\1\33\1\0"+
    "\1\33\6\0\1\33\4\0\1\33\1\0\1\33\1\0"+
    "\1\33\1\0\3\33\1\0\2\33\1\0\1\33\2\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\1\33\1\0\2\33\1\0\1\33\2\0\4\33\1\0"+
    "\7\33\1\0\4\33\1\0\4\33\1\0\1\33\1\0"+
    "\12\33\1\0\21\33\5\0\3\33\1\0\5\33\1\0"+
    "\21\33\164\0\32\33\6\0\32\33\6\0\32\33\166\0"+
    "\327\33\51\0\65\33\13\0\336\33\2\0\u0182\33\16\0"+
    "\u0131\33\37\0\36\33\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\13\1\14\1\15\1\16\3\17"+
    "\1\20\1\21\1\22\1\23\22\0\2\17\1\24\36\0"+
    "\2\17\1\25\20\0\1\26\20\0\2\17\37\0\1\27"+
    "\1\0\2\17\34\0\1\30\3\0\2\17\4\0\1\31"+
    "\2\0\1\32\1\0\1\33\5\0\1\34\12\0\1\35"+
    "\4\0\2\17\16\0\1\36\1\37\3\0\1\40\10\0"+
    "\1\41\1\0\2\17\14\0\1\42\14\0\1\43\1\0"+
    "\2\17\5\0\1\44\1\45\13\0\1\46\1\0\1\47"+
    "\5\0\2\17\23\0\1\50\4\0\2\17\1\51\1\0"+
    "\1\52\1\53\10\0\1\54\14\0\2\17\1\0\1\55"+
    "\24\0\1\56\1\57\14\0\1\60\10\0\2\17\1\0"+
    "\1\61\6\0\1\62\7\0\1\63\2\0\1\64\1\65"+
    "\1\66\5\0\1\67\5\0\1\70\20\0\1\71\5\0"+
    "\1\72\4\0\1\73\2\0\1\74\7\0\1\75\2\0"+
    "\1\76\3\0\1\77\5\0\1\100\1\101\4\0\1\102"+
    "\1\103\1\104\2\0\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\166\0\73\0\261\0\354\0\354"+
    "\0\73\0\73\0\73\0\73\0\u0127\0\u0162\0\73\0\73"+
    "\0\73\0\u0127\0\u019d\0\u01d8\0\73\0\73\0\73\0\73"+
    "\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0"+
    "\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\u0674\0\73\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\73\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\73\0\u11bf"+
    "\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\73\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044"+
    "\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c"+
    "\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4"+
    "\0\73\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591"+
    "\0\u25cc\0\u2607\0\73\0\u2642\0\u267d\0\73\0\u26b8\0\73"+
    "\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\73\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\73\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca"+
    "\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\73\0\73\0\u2f04"+
    "\0\u2f3f\0\u2f7a\0\73\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1"+
    "\0\u30dc\0\u3117\0\u3152\0\73\0\u318d\0\u31c8\0\u3203\0\u323e"+
    "\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416"+
    "\0\u3451\0\u348c\0\u34c7\0\73\0\u3502\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b"+
    "\0\73\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928"+
    "\0\u3963\0\73\0\73\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a"+
    "\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\73\0\u3c27"+
    "\0\73\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4"+
    "\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c"+
    "\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174"+
    "\0\u41af\0\u41ea\0\u4225\0\73\0\u4260\0\u429b\0\u42d6\0\u4311"+
    "\0\u434c\0\u4387\0\73\0\u43c2\0\73\0\73\0\u43fd\0\u4438"+
    "\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\73\0\u45d5"+
    "\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad"+
    "\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4\0\u490f\0\73\0\u494a"+
    "\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22"+
    "\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa"+
    "\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2"+
    "\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\u506f\0\u50aa"+
    "\0\u50e5\0\73\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c\0\u5247"+
    "\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\73\0\u53a9\0\u53e4"+
    "\0\u541f\0\u545a\0\u5495\0\u54d0\0\73\0\u550b\0\u5546\0\u5581"+
    "\0\u55bc\0\u55f7\0\u5632\0\u566d\0\73\0\u56a8\0\u56e3\0\73"+
    "\0\u0127\0\u0127\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\73"+
    "\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931\0\73\0\u596c\0\u59a7"+
    "\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09\0\u5b44\0\u5b7f"+
    "\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1\0\73\0\u5d1c"+
    "\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\73\0\u5e43\0\u5e7e\0\u5eb9"+
    "\0\u5ef4\0\73\0\u5f2f\0\u5f6a\0\73\0\u5fa5\0\u5fe0\0\u601b"+
    "\0\u6056\0\u6091\0\u60cc\0\u6107\0\73\0\u6142\0\u617d\0\73"+
    "\0\u61b8\0\u61f3\0\u622e\0\73\0\u6269\0\u62a4\0\u62df\0\u631a"+
    "\0\u6355\0\73\0\73\0\u6390\0\u63cb\0\u6406\0\u6441\0\73"+
    "\0\73\0\73\0\u647c\0\u64b7\0\73\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\5\22\1\23\2\22\1\24\17\22\1\25\1\26"+
    "\4\22\1\23\1\24\6\22\1\27\1\30\1\22\75\0"+
    "\1\3\70\0\1\31\3\32\1\31\1\0\1\31\1\33"+
    "\3\31\1\33\1\31\2\34\3\31\1\35\1\36\1\37"+
    "\1\31\1\40\1\41\2\31\1\42\2\31\1\43\1\44"+
    "\1\45\1\46\1\47\1\31\1\50\1\31\1\51\1\52"+
    "\5\31\1\33\15\31\1\34\6\0\1\7\1\0\1\7"+
    "\4\0\2\7\3\0\30\7\2\0\14\7\2\0\1\7"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\30\22"+
    "\2\0\14\22\2\0\1\22\6\0\1\7\1\0\1\7"+
    "\4\0\2\16\3\0\30\22\2\0\14\22\2\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\10\22"+
    "\1\53\17\22\2\0\5\22\1\53\6\22\2\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\15\22"+
    "\1\54\12\22\2\0\7\22\1\54\4\22\2\0\1\22"+
    "\5\31\1\55\66\31\3\32\1\31\1\55\7\31\2\34"+
    "\3\31\1\35\1\36\1\37\1\31\1\40\1\41\2\31"+
    "\1\42\2\31\1\43\1\44\1\45\1\46\1\47\1\31"+
    "\1\50\1\31\1\51\1\52\23\31\1\34\5\31\1\55"+
    "\1\31\1\56\3\31\1\56\1\31\2\56\3\31\30\56"+
    "\2\31\14\56\2\31\1\56\5\31\1\55\7\31\2\57"+
    "\53\31\1\57\5\31\1\55\22\31\1\60\4\31\1\61"+
    "\5\31\1\62\34\31\1\55\32\31\1\63\37\31\1\55"+
    "\14\31\1\64\6\31\1\65\3\31\1\66\2\31\1\67"+
    "\2\31\1\70\34\31\1\55\27\31\1\71\42\31\1\55"+
    "\20\31\1\72\3\31\1\73\5\31\1\74\37\31\1\55"+
    "\17\31\1\75\10\31\1\76\1\77\40\31\1\55\32\31"+
    "\1\100\37\31\1\55\32\31\1\101\37\31\1\55\32\31"+
    "\1\102\5\31\1\103\31\31\1\55\33\31\1\104\36\31"+
    "\1\55\14\31\1\105\55\31\1\55\14\31\1\106\3\31"+
    "\1\107\51\31\1\55\20\31\1\110\3\31\1\111\45\31"+
    "\1\55\35\31\1\112\1\113\26\31\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\15\22\1\114\12\22\2\0"+
    "\7\22\1\114\4\22\2\0\1\22\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\10\22\1\115\17\22\2\0"+
    "\5\22\1\115\6\22\2\0\1\22\5\31\1\116\1\31"+
    "\1\56\3\31\1\56\1\31\2\56\3\31\30\56\2\31"+
    "\14\56\2\31\1\56\5\31\1\55\7\31\2\117\53\31"+
    "\1\117\5\31\1\55\35\31\1\120\34\31\1\55\24\31"+
    "\1\121\45\31\1\55\20\31\1\122\51\31\1\55\37\31"+
    "\1\123\32\31\1\55\30\31\1\124\41\31\1\55\20\31"+
    "\1\125\51\31\1\55\14\31\1\126\55\31\1\55\27\31"+
    "\1\127\1\130\41\31\1\55\20\31\1\131\51\31\1\55"+
    "\24\31\1\132\45\31\1\55\16\31\1\133\53\31\1\55"+
    "\16\31\1\134\10\31\1\135\42\31\1\55\35\31\1\136"+
    "\30\31\3\75\1\31\1\137\72\31\1\55\14\31\1\140"+
    "\55\31\1\55\17\31\1\141\52\31\1\55\22\31\1\142"+
    "\47\31\1\55\17\31\1\143\52\31\1\55\30\31\1\144"+
    "\41\31\1\55\20\31\1\145\51\31\1\55\16\31\1\146"+
    "\53\31\1\55\35\31\1\147\1\150\33\31\1\55\17\31"+
    "\1\151\52\31\1\55\34\31\1\152\35\31\1\55\30\31"+
    "\1\153\12\31\1\154\26\31\1\55\37\31\1\155\32\31"+
    "\1\55\27\31\1\156\42\31\1\55\40\31\1\157\24\31"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\30\22"+
    "\2\0\1\160\13\22\2\0\1\22\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\30\22\2\0\1\161\13\22"+
    "\2\0\1\22\5\31\1\55\7\31\2\162\53\31\1\162"+
    "\5\31\1\55\20\31\1\163\51\31\1\55\31\31\1\164"+
    "\40\31\1\55\14\31\1\165\55\31\1\55\32\31\1\166"+
    "\37\31\1\55\33\31\1\167\36\31\1\55\16\31\1\170"+
    "\53\31\1\55\36\31\1\171\33\31\1\55\40\31\1\172"+
    "\31\31\1\55\15\31\1\173\54\31\1\55\14\31\1\174"+
    "\2\31\1\175\52\31\1\55\30\31\1\176\41\31\1\55"+
    "\23\31\1\177\46\31\1\55\23\31\1\200\46\31\1\55"+
    "\14\31\1\201\55\31\1\55\30\31\1\202\41\31\1\55"+
    "\22\31\1\203\47\31\1\55\24\31\1\204\45\31\1\55"+
    "\24\31\1\205\45\31\1\55\24\31\1\206\45\31\1\55"+
    "\15\31\1\207\54\31\1\55\41\31\1\210\30\31\1\55"+
    "\24\31\1\211\45\31\1\55\14\31\1\212\55\31\1\55"+
    "\36\31\1\213\33\31\1\55\24\31\1\214\45\31\1\55"+
    "\40\31\1\215\31\31\1\55\14\31\1\216\55\31\1\55"+
    "\37\31\1\217\32\31\1\55\40\31\1\220\25\31\3\156"+
    "\1\31\1\221\72\31\1\55\14\31\1\222\50\31\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\22\22\1\223"+
    "\5\22\2\0\11\22\1\223\2\22\2\0\1\22\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\22\22\1\224"+
    "\5\22\2\0\11\22\1\224\2\22\2\0\1\22\5\31"+
    "\1\55\5\31\1\225\64\31\1\55\22\31\1\226\47\31"+
    "\1\55\20\31\1\227\51\31\1\55\46\31\1\230\23\31"+
    "\1\55\31\31\1\231\40\31\1\55\32\31\1\232\37\31"+
    "\1\55\26\31\1\233\43\31\1\55\20\31\1\234\51\31"+
    "\1\55\30\31\1\235\41\31\1\55\32\31\1\236\37\31"+
    "\1\55\35\31\1\237\34\31\1\55\20\31\1\240\51\31"+
    "\1\55\24\31\1\241\45\31\1\55\14\31\1\242\55\31"+
    "\1\55\20\31\1\243\51\31\1\55\36\31\1\244\33\31"+
    "\1\55\40\31\1\245\31\31\1\55\20\31\1\246\51\31"+
    "\1\55\16\31\1\247\53\31\1\55\31\31\1\250\40\31"+
    "\1\55\21\31\1\251\50\31\1\55\35\31\1\252\34\31"+
    "\1\55\32\31\1\253\37\31\1\55\32\31\1\254\37\31"+
    "\1\55\30\31\1\255\41\31\1\55\42\31\1\256\27\31"+
    "\1\55\32\31\1\257\37\31\1\55\20\31\1\260\45\31"+
    "\3\216\1\31\1\261\72\31\1\55\32\31\1\262\37\31"+
    "\1\55\27\31\1\263\42\31\1\55\35\31\1\264\27\31"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\16\22"+
    "\1\265\11\22\2\0\10\22\1\265\3\22\2\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\16\22"+
    "\1\266\11\22\2\0\10\22\1\266\3\22\2\0\1\22"+
    "\5\31\1\55\7\31\2\267\53\31\1\267\5\31\1\55"+
    "\14\31\1\270\55\31\1\55\14\31\1\271\55\31\1\55"+
    "\37\31\1\272\26\31\3\231\1\31\1\273\72\31\1\55"+
    "\46\31\1\274\23\31\1\55\15\31\1\275\50\31\3\234"+
    "\1\31\1\276\72\31\1\55\31\31\1\277\34\31\3\236"+
    "\1\31\1\300\72\31\1\55\46\31\1\301\23\31\1\55"+
    "\31\31\1\302\40\31\1\55\31\31\1\303\40\31\1\55"+
    "\46\31\1\304\23\31\1\55\35\31\1\305\30\31\3\244"+
    "\1\31\1\306\72\31\1\55\27\31\1\307\42\31\1\55"+
    "\31\31\1\310\40\31\1\55\20\31\1\311\51\31\1\55"+
    "\46\31\1\312\23\31\1\55\24\31\1\313\45\31\1\55"+
    "\20\31\1\314\51\31\1\55\46\31\1\315\23\31\1\55"+
    "\31\31\1\316\40\31\1\55\20\31\1\317\51\31\1\55"+
    "\32\31\1\320\33\31\3\257\1\31\1\321\72\31\1\55"+
    "\35\31\1\322\34\31\1\55\46\31\1\323\23\31\1\55"+
    "\32\31\1\324\37\31\1\55\24\31\1\325\40\31\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\13\22\1\326"+
    "\14\22\2\0\6\22\1\326\5\22\2\0\1\22\6\0"+
    "\1\7\1\0\1\7\4\0\2\22\3\0\13\22\1\327"+
    "\14\22\2\0\6\22\1\327\5\22\2\0\1\22\5\31"+
    "\1\55\7\31\2\330\53\31\1\330\5\31\1\55\35\31"+
    "\1\331\34\31\1\55\16\31\1\332\53\31\1\55\20\31"+
    "\1\333\51\31\1\55\37\31\1\334\32\31\1\55\32\31"+
    "\1\335\37\31\1\55\14\31\1\336\55\31\1\55\40\31"+
    "\1\337\31\31\1\55\16\31\1\340\53\31\1\55\14\31"+
    "\1\341\55\31\1\55\16\31\1\342\11\31\1\343\41\31"+
    "\1\55\32\31\1\344\37\31\1\55\14\31\1\345\51\31"+
    "\3\310\1\31\1\346\66\31\3\311\1\31\1\347\72\31"+
    "\1\55\40\31\1\350\31\31\1\55\16\31\1\351\47\31"+
    "\3\352\1\31\1\353\46\31\1\354\23\31\1\55\21\31"+
    "\1\355\11\31\1\356\36\31\1\55\20\31\1\357\51\31"+
    "\1\55\37\31\1\360\32\31\1\55\35\31\1\361\34\31"+
    "\1\55\24\31\1\362\45\31\1\55\41\31\1\363\24\31"+
    "\3\324\1\31\1\364\72\31\1\55\32\31\1\365\32\31"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\10\22"+
    "\1\366\17\22\2\0\5\22\1\366\6\22\2\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\10\22"+
    "\1\367\17\22\2\0\5\22\1\367\6\22\2\0\1\22"+
    "\5\31\1\55\5\31\1\370\64\31\1\55\46\31\1\371"+
    "\23\31\1\55\24\31\1\372\45\31\1\55\43\31\1\373"+
    "\26\31\1\55\20\31\1\374\51\31\1\55\43\31\1\375"+
    "\26\31\1\55\36\31\1\376\33\31\1\55\36\31\1\377"+
    "\33\31\1\55\24\31\1\u0100\45\31\1\55\35\31\1\u0101"+
    "\34\31\1\55\35\31\1\u0102\34\31\1\55\32\31\1\u0103"+
    "\33\31\3\344\1\31\1\u0104\72\31\1\55\35\31\1\u0105"+
    "\34\31\1\55\36\31\1\u0106\33\31\1\55\14\31\1\u0107"+
    "\51\31\3\352\1\31\1\353\72\31\1\55\16\31\1\u0108"+
    "\53\31\1\55\32\31\1\u0109\37\31\1\55\14\31\1\u010a"+
    "\55\31\1\55\36\31\1\u010b\33\31\1\55\35\31\1\u010c"+
    "\34\31\1\55\17\31\1\u010d\52\31\1\55\17\31\1\u010e"+
    "\52\31\1\55\24\31\1\u010f\41\31\3\u0110\1\31\1\u0111"+
    "\46\31\1\u0112\16\31\6\0\1\7\1\0\1\7\4\0"+
    "\2\22\3\0\2\22\1\u0113\25\22\2\0\1\22\1\u0113"+
    "\12\22\2\0\1\22\6\0\1\7\1\0\1\7\4\0"+
    "\2\22\3\0\2\22\1\u0114\25\22\2\0\1\22\1\u0114"+
    "\12\22\2\0\1\22\5\31\1\55\7\31\2\u0115\53\31"+
    "\1\u0115\5\31\1\55\16\31\1\u0116\53\31\1\55\32\31"+
    "\1\u0117\37\31\1\55\37\31\1\u0118\32\31\1\55\43\31"+
    "\1\u0119\22\31\3\375\1\31\1\u011a\66\31\3\376\1\31"+
    "\1\u011b\72\31\1\55\40\31\1\u011c\31\31\1\55\14\31"+
    "\1\u011d\55\31\1\55\46\31\1\u011e\23\31\1\55\20\31"+
    "\1\u011f\51\31\1\55\17\31\1\u0120\52\31\1\55\24\31"+
    "\1\u0121\45\31\1\55\40\31\1\u0122\31\31\1\55\35\31"+
    "\1\u0123\34\31\1\55\14\31\1\u0124\55\31\1\55\35\31"+
    "\1\u0125\34\31\1\55\36\31\1\u0126\27\31\3\u010b\1\31"+
    "\1\u0127\72\31\1\55\32\31\1\u0128\33\31\3\u010d\1\31"+
    "\1\u0129\72\31\1\55\32\31\1\u012a\37\31\1\55\36\31"+
    "\1\u012b\27\31\3\u0110\1\31\1\u0111\72\31\1\55\14\31"+
    "\1\u012c\1\31\1\u012d\12\31\1\u012e\33\31\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\10\22\1\u012f\17\22"+
    "\2\0\5\22\1\u012f\6\22\2\0\1\22\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\10\22\1\u0130\17\22"+
    "\2\0\5\22\1\u0130\6\22\2\0\1\22\5\31\1\55"+
    "\7\31\2\u0131\53\31\1\u0131\5\31\1\55\32\31\1\u0132"+
    "\37\31\1\55\31\31\1\u0133\40\31\1\55\32\31\1\u0134"+
    "\37\31\1\55\37\31\1\u0135\32\31\1\55\14\31\1\u0136"+
    "\55\31\1\55\27\31\1\u0137\42\31\1\55\16\31\1\u0138"+
    "\2\31\1\u0139\16\31\1\u013a\31\31\1\55\14\31\1\u013b"+
    "\55\31\1\55\24\31\1\u013c\45\31\1\55\32\31\1\u013d"+
    "\37\31\1\55\14\31\1\u013e\55\31\1\55\46\31\1\u013f"+
    "\23\31\1\55\30\31\1\u0140\41\31\1\55\30\31\1\u0141"+
    "\41\31\1\55\36\31\1\u0142\33\31\1\55\36\31\1\u0143"+
    "\27\31\3\u012a\1\31\1\u0144\72\31\1\55\24\31\1\u0145"+
    "\45\31\1\55\31\31\1\u0146\40\31\1\55\35\31\1\u0147"+
    "\34\31\1\55\40\31\1\u0148\24\31\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\23\22\1\u0149\4\22\2\0"+
    "\12\22\1\u0149\1\22\2\0\1\22\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\23\22\1\u014a\4\22\2\0"+
    "\12\22\1\u014a\1\22\2\0\1\22\1\31\3\u0131\1\31"+
    "\1\u014b\72\31\1\55\30\31\1\u014c\35\31\3\u0133\1\31"+
    "\1\u014d\66\31\3\u0134\1\31\1\u014e\72\31\1\55\32\31"+
    "\1\u014f\37\31\1\55\35\31\1\u0150\34\31\1\55\20\31"+
    "\1\u0151\51\31\1\55\32\31\1\u0152\37\31\1\55\32\31"+
    "\1\u0153\37\31\1\55\36\31\1\u0154\33\31\1\55\16\31"+
    "\1\u0155\53\31\1\55\21\31\1\u0156\44\31\3\u013d\1\31"+
    "\1\u0157\72\31\1\55\35\31\1\u0158\34\31\1\55\16\31"+
    "\1\u0159\2\31\1\u015a\16\31\1\u015b\31\31\1\55\33\31"+
    "\1\u015c\36\31\1\55\40\31\1\u015d\31\31\1\55\42\31"+
    "\1\u015e\27\31\1\55\46\31\1\u015f\23\31\1\55\15\31"+
    "\1\u0160\54\31\1\55\37\31\1\u0161\32\31\1\55\20\31"+
    "\1\u0162\51\31\1\55\20\31\1\u0163\44\31\6\0\1\7"+
    "\1\0\1\7\4\0\2\22\3\0\24\22\1\u0164\3\22"+
    "\2\0\13\22\1\u0164\2\0\1\22\6\0\1\7\1\0"+
    "\1\7\4\0\2\22\3\0\24\22\1\u0165\3\22\2\0"+
    "\13\22\1\u0165\2\0\1\22\5\31\1\55\33\31\1\u0166"+
    "\32\31\3\u014f\1\31\1\u0167\72\31\1\55\24\31\1\u0168"+
    "\45\31\1\55\36\31\1\u0169\33\31\1\55\30\31\1\u016a"+
    "\41\31\1\55\35\31\1\u016b\34\31\1\55\40\31\1\u016c"+
    "\31\31\1\55\24\31\1\u016d\45\31\1\55\24\31\1\u016e"+
    "\45\31\1\55\24\31\1\u016f\45\31\1\55\32\31\1\u0170"+
    "\37\31\1\55\32\31\1\u0171\37\31\1\55\36\31\1\u0172"+
    "\33\31\1\55\32\31\1\u0173\37\31\1\55\27\31\1\u0174"+
    "\42\31\1\55\32\31\1\u0175\37\31\1\55\16\31\1\u0176"+
    "\2\31\1\u0177\50\31\1\55\27\31\1\u0178\42\31\1\55"+
    "\24\31\1\u0179\45\31\1\55\14\31\1\u017a\55\31\1\55"+
    "\41\31\1\u017b\23\31\6\0\1\7\1\0\1\7\4\0"+
    "\2\22\3\0\3\22\1\u017c\24\22\2\0\2\22\1\u017c"+
    "\11\22\2\0\1\22\6\0\1\7\1\0\1\7\4\0"+
    "\2\22\3\0\3\22\1\u017d\24\22\2\0\2\22\1\u017d"+
    "\11\22\2\0\1\22\5\31\1\55\32\31\1\u017e\37\31"+
    "\1\55\32\31\1\u017f\37\31\1\55\46\31\1\u0180\23\31"+
    "\1\55\33\31\1\u0181\36\31\1\55\30\31\1\u0182\41\31"+
    "\1\55\14\31\1\u0183\55\31\1\55\32\31\1\u0184\37\31"+
    "\1\55\16\31\1\u0185\53\31\1\55\32\31\1\u0186\37\31"+
    "\1\55\30\31\1\u0187\41\31\1\55\35\31\1\u0188\34\31"+
    "\1\55\40\31\1\u0189\25\31\3\u0173\1\31\1\u018a\72\31"+
    "\1\55\14\31\1\u018b\55\31\1\55\35\31\1\u018c\34\31"+
    "\1\55\32\31\1\u018d\37\31\1\55\32\31\1\u018e\37\31"+
    "\1\55\20\31\1\u018f\51\31\1\55\22\31\1\u0190\47\31"+
    "\1\55\16\31\1\u0191\53\31\1\55\32\31\1\u0192\32\31"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\4\22"+
    "\1\u0193\23\22\2\0\3\22\1\u0193\10\22\2\0\1\22"+
    "\6\0\1\7\1\0\1\7\4\0\2\22\3\0\4\22"+
    "\1\u0194\23\22\2\0\3\22\1\u0194\10\22\2\0\1\22"+
    "\5\31\1\55\31\31\1\u0195\34\31\3\u017f\1\31\1\u0196"+
    "\72\31\1\55\40\31\1\u0197\31\31\1\55\32\31\1\u0198"+
    "\37\31\1\55\40\31\1\u0199\31\31\1\55\35\31\1\u019a"+
    "\34\31\1\55\31\31\1\u019b\40\31\1\55\14\31\1\u019c"+
    "\51\31\3\u0186\1\31\1\u019d\72\31\1\55\33\31\1\u019e"+
    "\36\31\1\55\30\31\1\u019f\41\31\1\55\14\31\1\u01a0"+
    "\55\31\1\55\35\31\1\u01a1\34\31\1\55\17\31\1\u01a2"+
    "\52\31\1\55\30\31\1\u01a3\41\31\1\55\35\31\1\u01a4"+
    "\30\31\3\u018f\1\31\1\u01a5\72\31\1\55\40\31\1\u01a6"+
    "\31\31\1\55\24\31\1\u01a7\41\31\3\u0192\1\31\1\u01a8"+
    "\65\31\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\22\22\1\u01a9\5\22\2\0\11\22\1\u01a9\2\22\2\0"+
    "\1\22\6\0\1\7\1\0\1\7\4\0\2\22\3\0"+
    "\22\22\1\u01aa\5\22\2\0\11\22\1\u01aa\2\22\2\0"+
    "\1\22\5\31\1\55\20\31\1\u01ab\51\31\1\55\36\31"+
    "\1\u01ac\33\31\1\55\31\31\1\u01ad\40\31\1\55\27\31"+
    "\1\u01ae\42\31\1\55\24\31\1\u01af\41\31\3\u019b\1\31"+
    "\1\u01b0\72\31\1\55\16\31\1\u01b1\53\31\1\55\32\31"+
    "\1\u01b2\37\31\1\55\40\31\1\u01b3\31\31\1\55\35\31"+
    "\1\u01b4\34\31\1\55\24\31\1\u01b5\41\31\3\u01a2\1\31"+
    "\1\u01b6\72\31\1\55\33\31\1\u01b7\36\31\1\55\30\31"+
    "\1\u01b8\41\31\1\55\32\31\1\u01b9\37\31\1\55\32\31"+
    "\1\u01ba\37\31\1\55\31\31\1\u01bb\40\31\1\55\40\31"+
    "\1\u01bc\31\31\1\55\20\31\1\u01bd\51\31\1\55\14\31"+
    "\1\u01be\55\31\1\55\32\31\1\u01bf\37\31\1\55\24\31"+
    "\1\u01c0\45\31\1\55\31\31\1\u01c1\40\31\1\55\27\31"+
    "\1\u01c2\42\31\1\55\24\31\1\u01c3\45\31\1\55\32\31"+
    "\1\u01c4\37\31\1\55\32\31\1\u01c5\37\31\1\55\40\31"+
    "\1\u01c6\25\31\3\u01b9\1\31\1\u01c7\72\31\1\55\31\31"+
    "\1\u01c8\40\31\1\55\37\31\1\u01c9\32\31\1\55\14\31"+
    "\1\u01ca\55\31\1\55\31\31\1\u01cb\40\31\1\55\35\31"+
    "\1\u01cc\30\31\3\u01bf\1\31\1\u01cd\72\31\1\55\32\31"+
    "\1\u01ce\37\31\1\55\20\31\1\u01cf\51\31\1\55\14\31"+
    "\1\u01d0\55\31\1\55\32\31\1\u01d1\33\31\3\u01c4\1\31"+
    "\1\u01d2\72\31\1\55\31\31\1\u01d3\40\31\1\55\27\31"+
    "\1\u01d4\36\31\3\u01c8\1\31\1\u01d5\72\31\1\55\20\31"+
    "\1\u01d6\51\31\1\55\35\31\1\u01d7\34\31\1\55\37\31"+
    "\1\u01d8\32\31\1\55\24\31\1\u01d9\45\31\1\55\31\31"+
    "\1\u01da\40\31\1\55\31\31\1\u01db\40\31\1\55\35\31"+
    "\1\u01dc\30\31\3\u01d1\1\31\1\u01dd\72\31\1\55\20\31"+
    "\1\u01de\51\31\1\55\14\31\1\u01df\51\31\3\u01d6\1\31"+
    "\1\u01e0\72\31\1\55\24\31\1\u01e1\45\31\1\55\20\31"+
    "\1\u01e2\51\31\1\55\32\31\1\u01e3\33\31\3\u01da\1\31"+
    "\1\u01e4\72\31\1\55\37\31\1\u01e5\32\31\1\55\24\31"+
    "\1\u01e6\45\31\1\55\31\31\1\u01e7\40\31\1\55\35\31"+
    "\1\u01e8\34\31\1\55\32\31\1\u01e9\33\31\3\u01e2\1\31"+
    "\1\u01ea\66\31\3\u01e3\1\31\1\u01eb\72\31\1\55\20\31"+
    "\1\u01ec\51\31\1\55\32\31\1\u01ed\37\31\1\55\37\31"+
    "\1\u01ee\32\31\1\55\24\31\1\u01ef\41\31\3\u01e9\1\31"+
    "\1\u01f0\66\31\3\u01ec\1\31\1\u01f1\66\31\3\u01ed\1\31"+
    "\1\u01f2\72\31\1\55\20\31\1\u01f3\51\31\1\55\32\31"+
    "\1\u01f4\33\31\3\u01f3\1\31\1\u01f5\66\31\3\u01f4\1\31"+
    "\1\u01f6\65\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25842];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\3\1\4\11\2\1\3\11"+
    "\3\1\4\11\22\0\2\1\1\11\36\0\2\1\1\11"+
    "\20\0\1\11\20\0\2\1\37\0\1\11\1\0\2\1"+
    "\34\0\1\11\3\0\2\1\4\0\1\11\2\0\1\11"+
    "\1\0\1\11\5\0\1\11\12\0\1\11\4\0\2\1"+
    "\16\0\2\11\3\0\1\11\10\0\1\11\1\0\2\1"+
    "\14\0\1\11\14\0\1\11\1\0\2\1\5\0\2\11"+
    "\13\0\1\11\1\0\1\11\5\0\2\1\23\0\1\11"+
    "\4\0\2\1\1\11\1\0\2\11\10\0\1\11\14\0"+
    "\2\1\1\0\1\11\24\0\2\1\14\0\1\11\10\0"+
    "\2\1\1\0\1\11\6\0\1\11\7\0\1\11\2\0"+
    "\1\11\2\1\5\0\1\11\5\0\1\11\20\0\1\11"+
    "\5\0\1\11\4\0\1\11\2\0\1\11\7\0\1\11"+
    "\2\0\1\11\3\0\1\11\5\0\2\11\4\0\3\11"+
    "\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

	private Symbol symbol(int type) {
		return new Symbol(type, new Token(type, yyline + 1, yycolumn + 1));
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, new Token(type, (String) value, yyline + 1, yycolumn + 1));
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormsLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new java_cup.runtime.Symbol(FormsParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 71: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 72: break;
          case 3:
            { return symbol(EXCL, yytext());
            }
            // fall through
          case 73: break;
          case 4:
            { return symbol(QUOTE, yytext());
            }
            // fall through
          case 74: break;
          case 5:
            { return symbol(SYMB, yytext());
            }
            // fall through
          case 75: break;
          case 6:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 76: break;
          case 7:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 77: break;
          case 8:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 78: break;
          case 9:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 79: break;
          case 10:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 80: break;
          case 11:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 81: break;
          case 12:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 82: break;
          case 13:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 83: break;
          case 14:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 84: break;
          case 15:
            { return symbol(PARAM, yytext());
            }
            // fall through
          case 85: break;
          case 16:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 86: break;
          case 17:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 87: break;
          case 18:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 88: break;
          case 19:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 89: break;
          case 20:
            { return symbol(STR, yytext());
            }
            // fall through
          case 90: break;
          case 21:
            { return symbol(ID_, yytext());
            }
            // fall through
          case 91: break;
          case 22:
            { return symbol(ID, yytext());
            }
            // fall through
          case 92: break;
          case 23:
            { return symbol(URL, yytext());
            }
            // fall through
          case 93: break;
          case 24:
            { return symbol(THEME, yytext());
            }
            // fall through
          case 94: break;
          case 25:
            { return symbol(BTN, yytext());
            }
            // fall through
          case 95: break;
          case 26:
            { return symbol(CLASS, yytext());
            }
            // fall through
          case 96: break;
          case 27:
            { return symbol(COMBO, yytext());
            }
            // fall through
          case 97: break;
          case 28:
            { return symbol(ROWS, yytext());
            }
            // fall through
          case 98: break;
          case 29:
            { return symbol(RADIO, yytext());
            }
            // fall through
          case 99: break;
          case 30:
            { return symbol(IMG, yytext());
            }
            // fall through
          case 100: break;
          case 31:
            { return symbol(INDEX, yytext());
            }
            // fall through
          case 101: break;
          case 32:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 102: break;
          case 33:
            { return symbol(TITLE, yytext());
            }
            // fall through
          case 103: break;
          case 34:
            { return symbol(FILE, yytext());
            }
            // fall through
          case 104: break;
          case 35:
            { return symbol(USER, yytext());
            }
            // fall through
          case 105: break;
          case 36:
            { return symbol(CHECKBOX, yytext());
            }
            // fall through
          case 106: break;
          case 37:
            { return symbol(COLUMNS, yytext());
            }
            // fall through
          case 107: break;
          case 38:
            { return symbol(OPTION, yytext());
            }
            // fall through
          case 108: break;
          case 39:
            { return symbol(PASS, yytext());
            }
            // fall through
          case 109: break;
          case 40:
            { return symbol(REQUIRED, yytext());
            }
            // fall through
          case 110: break;
          case 41:
            { return symbol(DATE, yytext());
            }
            // fall through
          case 111: break;
          case 42:
            { return symbol(ALIGN, yytext());
            }
            // fall through
          case 112: break;
          case 43:
            { return symbol(TEXT_AREA, yytext());
            }
            // fall through
          case 113: break;
          case 44:
            { return symbol(FORM, yytext());
            }
            // fall through
          case 114: break;
          case 45:
            { return symbol(TEXT_FIELD, yytext());
            }
            // fall through
          case 115: break;
          case 46:
            { return symbol(FIN_SOL, yytext());
            }
            // fall through
          case 116: break;
          case 47:
            { return symbol(INIT_SOL, yytext());
            }
            // fall through
          case 117: break;
          case 48:
            { return symbol(FIELD_N, yytext());
            }
            // fall through
          case 118: break;
          case 49:
            { return symbol(ADD_USER, yytext());
            }
            // fall through
          case 119: break;
          case 50:
            { return symbol(LOGIN, yytext());
            }
            // fall through
          case 120: break;
          case 51:
            { return symbol(TEXT, yytext());
            }
            // fall through
          case 121: break;
          case 52:
            { return symbol(NEW_USER, yytext());
            }
            // fall through
          case 122: break;
          case 53:
            { return symbol(FIN_MANY_SOL, yytext());
            }
            // fall through
          case 123: break;
          case 54:
            { return symbol(INIT_MANY_SOL, yytext());
            }
            // fall through
          case 124: break;
          case 55:
            { return symbol(DATE_ADD, yytext());
            }
            // fall through
          case 125: break;
          case 56:
            { return symbol(NEW_PASS, yytext());
            }
            // fall through
          case 126: break;
          case 57:
            { return symbol(OLD_USER, yytext());
            }
            // fall through
          case 127: break;
          case 58:
            { return symbol(DEL_USER, yytext());
            }
            // fall through
          case 128: break;
          case 59:
            { return symbol(NEW_FORM, yytext());
            }
            // fall through
          case 129: break;
          case 60:
            { return symbol(USER_C, yytext());
            }
            // fall through
          case 130: break;
          case 61:
            { return symbol(EDIT_USER, yytext());
            }
            // fall through
          case 131: break;
          case 62:
            { return symbol(ADD_COMP, yytext());
            }
            // fall through
          case 132: break;
          case 63:
            { return symbol(DATE_MOD, yytext());
            }
            // fall through
          case 133: break;
          case 64:
            { return symbol(DEL_COMP, yytext());
            }
            // fall through
          case 134: break;
          case 65:
            { return symbol(DEL_FORM, yytext());
            }
            // fall through
          case 135: break;
          case 66:
            { return symbol(CRED, yytext());
            }
            // fall through
          case 136: break;
          case 67:
            { return symbol(EDIT_COMP, yytext());
            }
            // fall through
          case 137: break;
          case 68:
            { return symbol(EDIT_FORM, yytext());
            }
            // fall through
          case 138: break;
          case 69:
            { return symbol(PARAM_C, yytext());
            }
            // fall through
          case 139: break;
          case 70:
            { return symbol(PARAM_F, yytext());
            }
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
