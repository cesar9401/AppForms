
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.formsweb.lexerandparser;

import com.cesar31.formsweb.lexerandparser.FormsLex;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\002\007\000\002\002\007\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\007\007\000\002\007\007\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\010\007\000\002\010" +
    "\007\000\002\011\007\000\002\011\007\000\002\011\007" +
    "\000\002\011\007\000\002\011\007\000\002\012\012\000" +
    "\002\012\012\000\002\012\012\000\002\012\012\000\002" +
    "\012\012\000\002\012\012\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\010\000\002\013\010" +
    "\000\002\014\012\000\002\014\012\000\002\014\012\000" +
    "\002\014\012\000\002\014\012\000\002\014\012\000\002" +
    "\017\007\000\002\017\007\000\002\017\007\000\002\017" +
    "\007\000\002\016\010\000\002\016\010\000\002\016\010" +
    "\000\002\016\010\000\002\016\010\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\002\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\015" +
    "\006\000\002\015\002\000\002\020\012\000\002\020\012" +
    "\000\002\020\012\000\002\020\012\000\002\020\012\000" +
    "\002\020\012\000\002\020\012\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\006\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0166\000\006\003\004\014\006\001\002\000\004\023" +
    "\u0165\001\002\000\004\002\u0164\001\002\000\006\003\011" +
    "\023\012\001\002\000\010\002\uffff\003\004\014\006\001" +
    "\002\000\004\002\001\001\002\000\004\004\u0161\001\002" +
    "\000\006\003\014\004\013\001\002\000\006\003\u015d\013" +
    "\u015e\001\002\000\004\013\015\001\002\000\014\003\021" +
    "\035\023\040\017\041\016\042\020\001\002\000\006\003" +
    "\u013e\015\u013d\001\002\000\006\003\u0127\015\u0126\001\002" +
    "\000\006\003\u0123\015\u0122\001\002\000\004\015\210\001" +
    "\002\000\010\002\ufffb\003\ufffb\014\ufffb\001\002\000\006" +
    "\003\025\015\024\001\002\000\006\003\030\016\026\001" +
    "\002\000\006\003\030\016\026\001\002\000\006\003\173" +
    "\036\172\001\002\000\010\002\ufff7\003\ufff7\014\ufff7\001" +
    "\002\000\004\036\031\001\002\000\004\013\032\001\002" +
    "\000\004\020\033\001\002\000\006\003\035\016\034\001" +
    "\002\000\006\003\141\047\142\001\002\000\004\047\037" +
    "\001\002\000\010\002\uffed\003\uffed\014\uffed\001\002\000" +
    "\004\013\040\001\002\000\042\033\045\034\043\035\061" +
    "\036\047\037\053\040\041\041\052\042\051\043\057\044" +
    "\044\045\054\046\050\047\046\050\056\051\060\052\055" +
    "\001\002\000\010\003\uffa9\017\uffa9\022\uffa9\001\002\000" +
    "\006\003\064\022\063\001\002\000\010\003\uffaf\017\uffaf" +
    "\022\uffaf\001\002\000\010\003\uffa5\017\uffa5\022\uffa5\001" +
    "\002\000\010\003\uffb0\017\uffb0\022\uffb0\001\002\000\010" +
    "\003\uffac\017\uffac\022\uffac\001\002\000\010\003\uffad\017" +
    "\uffad\022\uffad\001\002\000\010\003\uffa3\017\uffa3\022\uffa3" +
    "\001\002\000\010\003\uffa7\017\uffa7\022\uffa7\001\002\000" +
    "\010\003\uffa8\017\uffa8\022\uffa8\001\002\000\010\003\uffaa" +
    "\017\uffaa\022\uffaa\001\002\000\010\003\uffa4\017\uffa4\022" +
    "\uffa4\001\002\000\010\003\uffa1\017\uffa1\022\uffa1\001\002" +
    "\000\010\003\uffab\017\uffab\022\uffab\001\002\000\010\003" +
    "\uffa6\017\uffa6\022\uffa6\001\002\000\010\003\uffa2\017\uffa2" +
    "\022\uffa2\001\002\000\010\003\uffae\017\uffae\022\uffae\001" +
    "\002\000\004\021\120\001\002\000\006\003\102\050\101" +
    "\001\002\000\004\050\065\001\002\000\004\013\066\001" +
    "\002\000\042\033\045\034\043\035\061\036\047\037\053" +
    "\040\041\041\052\042\051\043\057\044\044\045\054\046" +
    "\050\047\046\050\056\051\060\052\055\001\002\000\006" +
    "\017\uffc2\022\070\001\002\000\004\037\073\001\002\000" +
    "\004\017\072\001\002\000\006\003\uffd8\021\uffd8\001\002" +
    "\000\006\003\074\013\075\001\002\000\004\034\100\001" +
    "\002\000\006\003\076\034\077\001\002\000\006\003\uffc3" +
    "\017\uffc3\001\002\000\006\003\uffc5\017\uffc5\001\002\000" +
    "\006\003\uffc4\017\uffc4\001\002\000\006\003\107\013\110" +
    "\001\002\000\004\013\103\001\002\000\042\033\045\034" +
    "\043\035\061\036\047\037\053\040\041\041\052\042\051" +
    "\043\057\044\044\045\054\046\050\047\046\050\056\051" +
    "\060\052\055\001\002\000\006\017\uffc2\022\070\001\002" +
    "\000\004\017\106\001\002\000\006\003\uffd7\021\uffd7\001" +
    "\002\000\042\033\045\034\043\035\061\036\047\037\053" +
    "\040\041\041\052\042\051\043\057\044\044\045\054\046" +
    "\050\047\046\050\056\051\060\052\055\001\002\000\042" +
    "\033\045\034\043\035\061\036\047\037\053\040\041\041" +
    "\052\042\051\043\057\044\044\045\054\046\050\047\046" +
    "\050\056\051\060\052\055\001\002\000\010\003\uffc2\017" +
    "\uffc2\022\070\001\002\000\006\003\113\017\114\001\002" +
    "\000\006\003\uffd5\021\uffd5\001\002\000\006\003\uffd9\021" +
    "\uffd9\001\002\000\006\017\uffc2\022\070\001\002\000\004" +
    "\017\117\001\002\000\006\003\uffd6\021\uffd6\001\002\000" +
    "\004\017\121\001\002\000\006\003\122\014\124\001\002" +
    "\000\004\005\136\001\002\000\010\002\uffde\003\uffde\014" +
    "\uffde\001\002\000\006\003\126\005\125\001\002\000\006" +
    "\003\131\023\132\001\002\000\004\023\127\001\002\000" +
    "\004\015\130\001\002\000\010\002\uffb3\003\uffb3\014\uffb3" +
    "\001\002\000\004\015\135\001\002\000\006\003\133\015" +
    "\134\001\002\000\010\002\uffb1\003\uffb1\014\uffb1\001\002" +
    "\000\010\002\uffb5\003\uffb5\014\uffb5\001\002\000\010\002" +
    "\uffb2\003\uffb2\014\uffb2\001\002\000\004\023\137\001\002" +
    "\000\004\015\140\001\002\000\010\002\uffb4\003\uffb4\014" +
    "\uffb4\001\002\000\004\013\164\001\002\000\006\003\143" +
    "\013\144\001\002\000\042\033\045\034\043\035\061\036" +
    "\047\037\053\040\041\041\052\042\051\043\057\044\044" +
    "\045\054\046\050\047\046\050\056\051\060\052\055\001" +
    "\002\000\042\033\045\034\043\035\061\036\047\037\053" +
    "\040\041\041\052\042\051\043\057\044\044\045\054\046" +
    "\050\047\046\050\056\051\060\052\055\001\002\000\006" +
    "\003\064\022\063\001\002\000\006\003\147\021\150\001" +
    "\002\000\004\017\155\001\002\000\006\003\151\017\152" +
    "\001\002\000\006\003\122\014\124\001\002\000\006\003" +
    "\122\014\124\001\002\000\010\002\uffdf\003\uffdf\014\uffdf" +
    "\001\002\000\010\002\uffda\003\uffda\014\uffda\001\002\000" +
    "\006\003\122\014\124\001\002\000\010\002\uffdb\003\uffdb" +
    "\014\uffdb\001\002\000\006\003\064\022\063\001\002\000" +
    "\004\021\161\001\002\000\004\017\162\001\002\000\006" +
    "\003\122\014\124\001\002\000\010\002\uffdc\003\uffdc\014" +
    "\uffdc\001\002\000\042\033\045\034\043\035\061\036\047" +
    "\037\053\040\041\041\052\042\051\043\057\044\044\045" +
    "\054\046\050\047\046\050\056\051\060\052\055\001\002" +
    "\000\006\003\064\022\063\001\002\000\004\021\167\001" +
    "\002\000\004\017\170\001\002\000\006\003\122\014\124" +
    "\001\002\000\010\002\uffdd\003\uffdd\014\uffdd\001\002\000" +
    "\006\003\177\013\200\001\002\000\004\013\174\001\002" +
    "\000\004\020\175\001\002\000\006\003\035\016\034\001" +
    "\002\000\010\002\uffec\003\uffec\014\uffec\001\002\000\004" +
    "\020\205\001\002\000\006\003\201\020\202\001\002\000" +
    "\006\003\035\016\034\001\002\000\006\003\035\016\034" +
    "\001\002\000\010\002\uffee\003\uffee\014\uffee\001\002\000" +
    "\010\002\uffea\003\uffea\014\uffea\001\002\000\006\003\035" +
    "\016\034\001\002\000\010\002\uffeb\003\uffeb\014\uffeb\001" +
    "\002\000\010\002\ufff9\003\ufff9\014\ufff9\001\002\000\006" +
    "\003\213\016\211\001\002\000\006\003\u0112\036\u0111\001" +
    "\002\000\010\002\ufff8\003\ufff8\014\ufff8\001\002\000\004" +
    "\036\216\001\002\000\010\002\ufff5\003\ufff5\014\ufff5\001" +
    "\002\000\010\002\ufff2\003\ufff2\014\ufff2\001\002\000\004" +
    "\013\217\001\002\000\004\020\220\001\002\000\006\003" +
    "\223\016\222\001\002\000\010\002\uffe8\003\uffe8\014\uffe8" +
    "\001\002\000\010\003\331\043\330\047\332\001\002\000" +
    "\006\043\225\047\226\001\002\000\010\002\uffe3\003\uffe3" +
    "\014\uffe3\001\002\000\004\013\235\001\002\000\004\013" +
    "\227\001\002\000\042\033\045\034\043\035\061\036\047" +
    "\037\053\040\041\041\052\042\051\043\057\044\044\045" +
    "\054\046\050\047\046\050\056\051\060\052\055\001\002" +
    "\000\010\003\064\017\231\022\063\001\002\000\004\021" +
    "\232\001\002\000\004\017\233\001\002\000\006\003\122" +
    "\014\124\001\002\000\010\002\uffbb\003\uffbb\014\uffbb\001" +
    "\002\000\042\033\045\034\043\035\061\036\047\037\053" +
    "\040\041\041\052\042\051\043\057\044\044\045\054\046" +
    "\050\047\046\050\056\051\060\052\055\001\002\000\006" +
    "\003\240\022\237\001\002\000\006\003\315\044\316\001" +
    "\002\000\004\044\245\001\002\000\004\021\242\001\002" +
    "\000\004\017\243\001\002\000\006\003\122\014\124\001" +
    "\002\000\010\002\uffd3\003\uffd3\014\uffd3\001\002\000\004" +
    "\013\246\001\002\000\042\033\045\034\043\035\061\036" +
    "\047\037\053\040\041\041\052\042\051\043\057\044\044" +
    "\045\054\046\050\047\046\050\056\051\060\052\055\001" +
    "\002\000\006\003\251\022\250\001\002\000\010\003\273" +
    "\044\274\045\272\001\002\000\004\045\253\001\002\000" +
    "\006\003\uffcd\021\uffcd\001\002\000\004\013\254\001\002" +
    "\000\042\033\045\034\043\035\061\036\047\037\053\040" +
    "\041\041\052\042\051\043\057\044\044\045\054\046\050" +
    "\047\046\050\056\051\060\052\055\001\002\000\006\017" +
    "\uffbd\022\256\001\002\000\006\003\261\046\262\001\002" +
    "\000\004\017\260\001\002\000\006\003\uffc9\021\uffc9\001" +
    "\002\000\004\013\270\001\002\000\006\003\263\013\264" +
    "\001\002\000\004\034\267\001\002\000\006\003\265\034" +
    "\266\001\002\000\006\003\uffbe\017\uffbe\001\002\000\006" +
    "\003\uffc1\017\uffc1\001\002\000\006\003\uffbf\017\uffbf\001" +
    "\002\000\004\034\271\001\002\000\006\003\uffc0\017\uffc0" +
    "\001\002\000\006\003\305\013\306\001\002\000\004\013" +
    "\301\001\002\000\004\013\275\001\002\000\042\033\045" +
    "\034\043\035\061\036\047\037\053\040\041\041\052\042" +
    "\051\043\057\044\044\045\054\046\050\047\046\050\056" +
    "\051\060\052\055\001\002\000\006\003\uffbd\022\256\001" +
    "\002\000\004\003\300\001\002\000\006\003\uffc6\021\uffc6" +
    "\001\002\000\042\033\045\034\043\035\061\036\047\037" +
    "\053\040\041\041\052\042\051\043\057\044\044\045\054" +
    "\046\050\047\046\050\056\051\060\052\055\001\002\000" +
    "\006\017\uffbd\022\256\001\002\000\004\017\304\001\002" +
    "\000\006\003\uffc8\021\uffc8\001\002\000\042\033\045\034" +
    "\043\035\061\036\047\037\053\040\041\041\052\042\051" +
    "\043\057\044\044\045\054\046\050\047\046\050\056\051" +
    "\060\052\055\001\002\000\042\033\045\034\043\035\061" +
    "\036\047\037\053\040\041\041\052\042\051\043\057\044" +
    "\044\045\054\046\050\047\046\050\056\051\060\052\055" +
    "\001\002\000\006\017\uffbd\022\256\001\002\000\004\017" +
    "\311\001\002\000\006\003\uffca\021\uffca\001\002\000\006" +
    "\017\uffbd\022\256\001\002\000\004\017\314\001\002\000" +
    "\006\003\uffc7\021\uffc7\001\002\000\004\013\325\001\002" +
    "\000\006\003\317\013\320\001\002\000\042\033\045\034" +
    "\043\035\061\036\047\037\053\040\041\041\052\042\051" +
    "\043\057\044\044\045\054\046\050\047\046\050\056\051" +
    "\060\052\055\001\002\000\042\033\045\034\043\035\061" +
    "\036\047\037\053\040\041\041\052\042\051\043\057\044" +
    "\044\045\054\046\050\047\046\050\056\051\060\052\055" +
    "\001\002\000\006\003\251\022\250\001\002\000\006\003" +
    "\uffce\021\uffce\001\002\000\006\003\251\022\250\001\002" +
    "\000\006\003\uffcb\021\uffcb\001\002\000\042\033\045\034" +
    "\043\035\061\036\047\037\053\040\041\041\052\042\051" +
    "\043\057\044\044\045\054\046\050\047\046\050\056\051" +
    "\060\052\055\001\002\000\006\003\251\022\250\001\002" +
    "\000\006\003\uffcc\021\uffcc\001\002\000\006\003\u0100\013" +
    "\u0101\001\002\000\004\013\360\001\002\000\006\003\333" +
    "\013\334\001\002\000\042\033\045\034\043\035\061\036" +
    "\047\037\053\040\041\041\052\042\051\043\057\044\044" +
    "\045\054\046\050\047\046\050\056\051\060\052\055\001" +
    "\002\000\042\033\045\034\043\035\061\036\047\037\053" +
    "\040\041\041\052\042\051\043\057\044\044\045\054\046" +
    "\050\047\046\050\056\051\060\052\055\001\002\000\010" +
    "\003\336\017\337\022\063\001\002\000\006\021\350\050" +
    "\065\001\002\000\006\003\340\021\341\001\002\000\004" +
    "\017\346\001\002\000\006\003\342\017\343\001\002\000" +
    "\006\003\122\014\124\001\002\000\006\003\122\014\124" +
    "\001\002\000\010\002\uffbc\003\uffbc\014\uffbc\001\002\000" +
    "\010\002\uffb6\003\uffb6\014\uffb6\001\002\000\006\003\122" +
    "\014\124\001\002\000\010\002\uffb7\003\uffb7\014\uffb7\001" +
    "\002\000\004\017\351\001\002\000\006\003\122\014\124" +
    "\001\002\000\010\002\uffb8\003\uffb8\014\uffb8\001\002\000" +
    "\010\003\064\017\354\022\063\001\002\000\004\021\355" +
    "\001\002\000\004\017\356\001\002\000\006\003\122\014" +
    "\124\001\002\000\010\002\uffb9\003\uffb9\014\uffb9\001\002" +
    "\000\042\033\045\034\043\035\061\036\047\037\053\040" +
    "\041\041\052\042\051\043\057\044\044\045\054\046\050" +
    "\047\046\050\056\051\060\052\055\001\002\000\010\003" +
    "\363\017\365\022\362\001\002\000\010\003\374\044\316" +
    "\050\101\001\002\000\006\044\245\050\065\001\002\000" +
    "\004\021\371\001\002\000\004\021\366\001\002\000\004" +
    "\017\367\001\002\000\006\003\122\014\124\001\002\000" +
    "\010\002\uffba\003\uffba\014\uffba\001\002\000\004\017\372" +
    "\001\002\000\006\003\122\014\124\001\002\000\010\002" +
    "\uffd2\003\uffd2\014\uffd2\001\002\000\004\013\375\001\002" +
    "\000\042\033\045\034\043\035\061\036\047\037\053\040" +
    "\041\041\052\042\051\043\057\044\044\045\054\046\050" +
    "\047\046\050\056\051\060\052\055\001\002\000\010\003" +
    "\251\017\uffc2\022\377\001\002\000\012\003\273\037\073" +
    "\044\274\045\272\001\002\000\042\033\045\034\043\035" +
    "\061\036\047\037\053\040\041\041\052\042\051\043\057" +
    "\044\044\045\054\046\050\047\046\050\056\051\060\052" +
    "\055\001\002\000\042\033\045\034\043\035\061\036\047" +
    "\037\053\040\041\041\052\042\051\043\057\044\044\045" +
    "\054\046\050\047\046\050\056\051\060\052\055\001\002" +
    "\000\006\003\240\022\237\001\002\000\006\003\u0104\021" +
    "\u0105\001\002\000\004\017\u010a\001\002\000\006\003\u0106" +
    "\017\u0107\001\002\000\006\003\122\014\124\001\002\000" +
    "\006\003\122\014\124\001\002\000\010\002\uffd4\003\uffd4" +
    "\014\uffd4\001\002\000\010\002\uffcf\003\uffcf\014\uffcf\001" +
    "\002\000\006\003\122\014\124\001\002\000\010\002\uffd0" +
    "\003\uffd0\014\uffd0\001\002\000\006\003\240\022\237\001" +
    "\002\000\004\021\u010e\001\002\000\004\017\u010f\001\002" +
    "\000\006\003\122\014\124\001\002\000\010\002\uffd1\003" +
    "\uffd1\014\uffd1\001\002\000\006\003\u0117\013\u0118\001\002" +
    "\000\004\013\u0113\001\002\000\004\020\u0114\001\002\000" +
    "\006\003\223\016\222\001\002\000\010\002\uffe7\003\uffe7" +
    "\014\uffe7\001\002\000\010\002\uffe2\003\uffe2\014\uffe2\001" +
    "\002\000\004\020\u011f\001\002\000\006\003\u0119\020\u011a" +
    "\001\002\000\006\003\223\016\222\001\002\000\006\003" +
    "\223\016\222\001\002\000\010\002\uffe9\003\uffe9\014\uffe9" +
    "\001\002\000\010\002\uffe4\003\uffe4\014\uffe4\001\002\000" +
    "\010\002\uffe5\003\uffe5\014\uffe5\001\002\000\010\002\uffe0" +
    "\003\uffe0\014\uffe0\001\002\000\006\003\223\016\222\001" +
    "\002\000\010\002\uffe6\003\uffe6\014\uffe6\001\002\000\010" +
    "\002\uffe1\003\uffe1\014\uffe1\001\002\000\006\003\030\016" +
    "\026\001\002\000\006\003\030\016\026\001\002\000\010" +
    "\002\uffef\003\uffef\014\uffef\001\002\000\010\002\ufff0\003" +
    "\ufff0\014\ufff0\001\002\000\006\003\u0129\016\u0128\001\002" +
    "\000\006\003\u0129\016\u0128\001\002\000\006\003\u0134\036" +
    "\u0133\001\002\000\004\036\u012b\001\002\000\010\002\ufff4" +
    "\003\ufff4\014\ufff4\001\002\000\004\013\u012c\001\002\000" +
    "\004\020\u012d\001\002\000\006\003\u012f\016\u012e\001\002" +
    "\000\006\003\u0130\043\330\001\002\000\004\043\225\001" +
    "\002\000\004\013\u0131\001\002\000\042\033\045\034\043" +
    "\035\061\036\047\037\053\040\041\041\052\042\051\043" +
    "\057\044\044\045\054\046\050\047\046\050\056\051\060" +
    "\052\055\001\002\000\006\003\240\022\237\001\002\000" +
    "\006\003\u0137\013\u0138\001\002\000\004\013\u0135\001\002" +
    "\000\004\020\u0136\001\002\000\006\003\u012f\016\u012e\001" +
    "\002\000\004\020\u013b\001\002\000\006\003\u0139\020\u013a" +
    "\001\002\000\006\003\u012f\016\u012e\001\002\000\006\003" +
    "\u012f\016\u012e\001\002\000\006\003\u012f\016\u012e\001\002" +
    "\000\010\002\ufff6\003\ufff6\014\ufff6\001\002\000\006\003" +
    "\u0140\016\u013f\001\002\000\006\003\u0140\016\u013f\001\002" +
    "\000\006\003\u0154\036\u0153\001\002\000\004\036\u0142\001" +
    "\002\000\010\002\ufff1\003\ufff1\014\ufff1\001\002\000\004" +
    "\013\u0143\001\002\000\004\020\u0144\001\002\000\006\003" +
    "\u0146\016\u0145\001\002\000\006\003\u014a\047\u014b\001\002" +
    "\000\004\047\u0147\001\002\000\004\013\u0148\001\002\000" +
    "\042\033\045\034\043\035\061\036\047\037\053\040\041" +
    "\041\052\042\051\043\057\044\044\045\054\046\050\047" +
    "\046\050\056\051\060\052\055\001\002\000\004\017\231" +
    "\001\002\000\004\013\u0151\001\002\000\006\003\u014c\013" +
    "\u014d\001\002\000\042\033\045\034\043\035\061\036\047" +
    "\037\053\040\041\041\052\042\051\043\057\044\044\045" +
    "\054\046\050\047\046\050\056\051\060\052\055\001\002" +
    "\000\042\033\045\034\043\035\061\036\047\037\053\040" +
    "\041\041\052\042\051\043\057\044\044\045\054\046\050" +
    "\047\046\050\056\051\060\052\055\001\002\000\006\003" +
    "\u014f\017\337\001\002\000\004\021\350\001\002\000\004" +
    "\017\354\001\002\000\042\033\045\034\043\035\061\036" +
    "\047\037\053\040\041\041\052\042\051\043\057\044\044" +
    "\045\054\046\050\047\046\050\056\051\060\052\055\001" +
    "\002\000\004\017\365\001\002\000\006\003\u0157\013\u0158" +
    "\001\002\000\004\013\u0155\001\002\000\004\020\u0156\001" +
    "\002\000\006\003\u0146\016\u0145\001\002\000\004\020\u015b" +
    "\001\002\000\006\003\u0159\020\u015a\001\002\000\006\003" +
    "\u0146\016\u0145\001\002\000\006\003\u0146\016\u0145\001\002" +
    "\000\006\003\u0146\016\u0145\001\002\000\010\002\ufff3\003" +
    "\ufff3\014\ufff3\001\002\000\014\003\021\035\023\040\017" +
    "\041\016\042\020\001\002\000\014\003\021\035\023\040" +
    "\017\041\016\042\020\001\002\000\010\002\ufffe\003\ufffe" +
    "\014\ufffe\001\002\000\010\002\ufffa\003\ufffa\014\ufffa\001" +
    "\002\000\004\013\u0162\001\002\000\014\003\021\035\023" +
    "\040\017\041\016\042\020\001\002\000\010\002\ufffc\003" +
    "\ufffc\014\ufffc\001\002\000\004\002\000\001\002\000\004" +
    "\004\u0166\001\002\000\004\013\u0167\001\002\000\014\003" +
    "\021\035\023\040\017\041\016\042\020\001\002\000\010" +
    "\002\ufffd\003\ufffd\014\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0166\000\006\002\006\004\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\006" +
    "\004\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\206\001\001\000\004\007\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\041\001\001\000\002\001" +
    "\001\000\004\013\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\066\001\001\000\004" +
    "\006\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\103" +
    "\001\001\000\004\006\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\114\001\001\000\004\021\110" +
    "\001\001\000\004\006\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\156\001" +
    "\001\000\004\021\144\001\001\000\004\013\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\153\001\001\000\004\003\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\155\001\001\000" +
    "\002\001\001\000\004\013\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\162\001\001\000\002\001" +
    "\001\000\004\021\164\001\001\000\004\013\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\203" +
    "\001\001\000\004\012\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\211\010\213\011\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\035\014\220\020\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\227\001\001\000\004\013\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\233\001\001\000\002" +
    "\001\001\000\004\021\235\001\001\000\004\017\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\246\001\001\000\004" +
    "\016\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\254\001\001" +
    "\000\004\015\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\275\001\001\000\004\015\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\301\001" +
    "\001\000\004\015\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\311\001\001\000\004\021\306\001" +
    "\001\000\004\015\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\322\001\001\000\004\021\320\001\001\000\004\016" +
    "\321\001\001\000\002\001\001\000\004\016\323\001\001" +
    "\000\002\001\001\000\004\021\325\001\001\000\004\016" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\352\001\001\000" +
    "\004\021\334\001\001\000\004\013\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\344\001\001\000\004\003\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\351" +
    "\001\001\000\002\001\001\000\004\013\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\356\001\001" +
    "\000\002\001\001\000\004\021\360\001\001\000\006\013" +
    "\165\017\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\367\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\375\001\001\000\006\006\104\016\326" +
    "\001\001\000\002\001\001\000\004\021\u010b\001\001\000" +
    "\004\021\u0101\001\001\000\004\017\u0102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u0108\001\001\000\004\003\u0107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u010a\001\001\000\002\001" +
    "\001\000\004\017\u010c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\175\014\u0114\020\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\203\014\u011c\020\u011d\001\001\000\010\012\202\014" +
    "\u011a\020\u011b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\205\014" +
    "\u011f\020\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u0124\001\001\000\004\007\u0123\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u013b\001\001" +
    "\000\004\010\u0129\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u0131\001\001\000\004" +
    "\017\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0114\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u011c\001\001\000\004\014" +
    "\u011a\001\001\000\004\014\u011f\001\001\000\002\001\001" +
    "\000\004\011\u015b\001\001\000\004\011\u0140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0148\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u014f\001\001\000\004\021\u014d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u011d\001\001\000\004\020\u011b\001\001\000\004\020" +
    "\u0120\001\001\000\002\001\001\000\004\005\u015f\001\001" +
    "\000\004\005\u015e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u0162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u0167\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Symbol cur_token;
	private boolean parsed;

	// public FormsParser(FormsLex lex) {
	// 	super(lex);
	// 	this.parsed = true;
	// }

	public parser(FormsLex lex) {
		super(lex);
		this.parsed = true;
	}

	public void report_fatal_error(String message, Object info) {
        /* parsed */
        this.parsed = false;

        //System.out.println("report_fatal_error");
        //System.out.println("Message: " + message);
        //System.out.println("Object info: " + info);

        /* Armando reportes de errores */
        List<String> expected = new ArrayList<>();
        List<Integer> tokens = expected_token_ids();
        for(Integer i : tokens) {
            expected.add(symbl_name_from_id(i));
        }
	}

	public void syntax_error(Symbol cur_token) {
        /* parsed */
        this.parsed = false;
        /**/

        List<String> expected = new ArrayList<>();

        this.cur_token = cur_token;
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);

        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
            expected.add(symbl_name_from_id(i));
        }
        System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}

	public boolean isParsed() {
		return parsed;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sol ::= ini_sol sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sol EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sol ::= ini_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini_sol ::= SMALLER EXCL INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini_sol ::= error EXCL INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini_sol ::= SMALLER error INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini_sol ::= SMALLER EXCL error COLON sol_user_nl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini_sol ::= SMALLER EXCL INIT_SOL error sol_user_nl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sol_user_nl ::= ADD_USER GREATER credNew 
            {
              Object RESULT =null;
		 System.out.println("Crear Usuario"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sol_user_nl ::= error GREATER credNew 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sol_user_nl ::= ADD_USER error credNew 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sol_user_nl ::= EDIT_USER GREATER credEdit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sol_user_nl ::= error GREATER credEdit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sol_user_nl ::= EDIT_USER error credEdit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sol_user_nl ::= DEL_USER GREATER credDel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sol_user_nl ::= error GREATER credDel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sol_user_nl ::= DEL_USER error credDel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sol_user_nl ::= LOGIN GREATER credNew 
            {
              Object RESULT =null;
		 System.out.println("Login Usuario"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sol_user_nl ::= LOGIN error credNew 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // credNew ::= LBRACE CRED COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // credNew ::= error CRED COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // credNew ::= LBRACE error COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // credNew ::= LBRACE CRED error LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // credNew ::= LBRACE CRED COLON error new_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // credEdit ::= LBRACE CRED COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // credEdit ::= error CRED COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // credEdit ::= LBRACE error COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // credEdit ::= LBRACE CRED error LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // credEdit ::= LBRACE CRED COLON error edit_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // credDel ::= LBRACE CRED COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // credDel ::= error CRED COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // credDel ::= LBRACE error COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // credDel ::= LBRACE CRED error LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // credDel ::= LBRACE CRED COLON error del_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // new_user ::= LBRACE USER COLON str_param pass_user RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					System.out.printf("User = %s\n", u);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // new_user ::= error USER COLON str_param pass_user RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // new_user ::= LBRACE error COLON str_param pass_user RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // new_user ::= LBRACE USER error str_param pass_user RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // new_user ::= LBRACE USER COLON str_param pass_user error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // new_user ::= LBRACE USER COLON str_param pass_user RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pass_user ::= COMMA PASS COLON str_param user_date RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					System.out.printf("Pass = %s\n", p);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pass_user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pass_user ::= error PASS COLON str_param user_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pass_user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pass_user ::= COMMA error COLON str_param user_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pass_user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pass_user ::= COMMA PASS error str_param user_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pass_user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pass_user ::= COMMA PASS COLON str_param user_date error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pass_user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // edit_user ::= LBRACE OLD_USER COLON str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					System.out.printf("oldUser = %s\n", u);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // edit_user ::= error OLD_USER COLON str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // edit_user ::= LBRACE error COLON str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // edit_user ::= LBRACE OLD_USER error str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // edit_user ::= LBRACE OLD_USER COLON str_param user_n error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // edit_user ::= LBRACE OLD_USER COLON str_param user_n RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // user_n ::= COMMA NEW_USER COLON str_param edit_pass 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					System.out.printf("newUser = %s\n", v);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // user_n ::= error NEW_USER COLON str_param edit_pass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // user_n ::= COMMA error COLON str_param edit_pass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // user_n ::= COMMA NEW_USER error str_param edit_pass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // edit_pass ::= COMMA NEW_PASS COLON str_param edit_date RBRACE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					System.out.printf("newPass = %s\n", w);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // edit_pass ::= error NEW_PASS COLON str_param edit_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // edit_pass ::= COMMA error COLON str_param edit_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // edit_pass ::= COMMA NEW_PASS error str_param edit_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // edit_pass ::= COMMA NEW_USER COLON str_param edit_date error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // user_date ::= COMMA DATE_ADD COLON DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.printf("DateMod = %s\n", a);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_date",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // user_date ::= COMMA DATE_ADD error DATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_date",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // user_date ::= COMMA DATE_ADD COLON error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_date",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // user_date ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_date",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // edit_date ::= COMMA DATE_MOD COLON DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.printf("Date = %s\n", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // edit_date ::= COMMA error COLON DATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // edit_date ::= COMMA DATE_MOD error DATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // edit_date ::= COMMA DATE_MOD COLON error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // edit_date ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // del_user ::= LBRACE USER COLON str_param RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					System.out.printf("delUser = %s\n", u);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // del_user ::= error USER COLON str_param RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // del_user ::= LBRACE error COLON str_param RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // del_user ::= LBRACE USER error str_param RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // del_user ::= LBRACE USER COLON str_param error RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // del_user ::= LBRACE USER COLON str_param RBRACE error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // del_user ::= LBRACE USER COLON str_param RBRACE RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fin_sol ::= SMALLER FIN_SOL EXCL GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // fin_sol ::= error FIN_SOL EXCL GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fin_sol ::= SMALLER error EXCL GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fin_sol ::= SMALLER FIN_SOL error GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fin_sol ::= SMALLER FIN_SOL EXCL error 
            {
              Object RESULT =null;
		 System.out.println("GREATER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // str_param ::= STR 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // str_param ::= DATE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // str_param ::= ADD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // str_param ::= CRED 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // str_param ::= USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // str_param ::= PASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // str_param ::= DATE_ADD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // str_param ::= EDIT_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // str_param ::= DEL_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // str_param ::= LOGIN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // str_param ::= OLD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // str_param ::= NEW_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // str_param ::= NEW_PASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // str_param ::= DATE_MOD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // str_param ::= NEW_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // str_param ::= PARAM_F 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
