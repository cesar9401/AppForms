
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.formsweb.lexerandparser;

import com.cesar31.formsweb.lexerandparser.FormsLex;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\002\007\000\002\002\007\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\007\007\000\002\007\007" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\010\007\000\002\010\007\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\011\007\000\002\011" +
    "\007\000\002\011\007\000\002\011\007\000\002\011\007" +
    "\000\002\012\012\000\002\012\012\000\002\012\012\000" +
    "\002\012\012\000\002\012\012\000\002\012\012\000\002" +
    "\013\010\000\002\013\010\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\014\012\000\002\014\012" +
    "\000\002\014\012\000\002\014\012\000\002\014\012\000" +
    "\002\014\012\000\002\017\007\000\002\017\007\000\002" +
    "\017\007\000\002\017\007\000\002\016\010\000\002\016" +
    "\010\000\002\016\010\000\002\016\010\000\002\016\010" +
    "\000\002\006\006\000\002\006\002\000\002\015\006\000" +
    "\002\015\002\000\002\020\012\000\002\020\012\000\002" +
    "\020\012\000\002\020\012\000\002\020\012\000\002\020" +
    "\012\000\002\020\012\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\006\003\004\014\006\001\002\000\004\023" +
    "\u0157\001\002\000\004\002\u0156\001\002\000\006\003\011" +
    "\023\012\001\002\000\010\002\uffff\003\004\014\006\001" +
    "\002\000\004\002\001\001\002\000\004\004\u0153\001\002" +
    "\000\006\003\014\004\013\001\002\000\006\003\u014f\013" +
    "\u0150\001\002\000\004\013\015\001\002\000\012\003\020" +
    "\035\022\040\017\041\016\001\002\000\006\003\u0130\015" +
    "\u012f\001\002\000\006\003\u0119\015\u0118\001\002\000\004" +
    "\015\204\001\002\000\010\002\ufffb\003\ufffb\014\ufffb\001" +
    "\002\000\006\003\024\015\023\001\002\000\006\003\027" +
    "\016\025\001\002\000\006\003\027\016\025\001\002\000" +
    "\006\003\167\036\166\001\002\000\010\002\ufff7\003\ufff7" +
    "\014\ufff7\001\002\000\004\036\030\001\002\000\004\013" +
    "\031\001\002\000\004\020\032\001\002\000\006\003\034" +
    "\016\033\001\002\000\006\003\135\047\136\001\002\000" +
    "\004\047\036\001\002\000\010\002\uffef\003\uffef\014\uffef" +
    "\001\002\000\004\013\037\001\002\000\042\033\044\034" +
    "\042\035\057\036\047\037\052\040\040\041\051\042\050" +
    "\043\056\044\043\045\054\046\046\047\045\050\055\051" +
    "\060\052\053\001\002\000\010\003\uffb0\017\uffb0\022\uffb0" +
    "\001\002\000\006\003\063\022\062\001\002\000\010\003" +
    "\uffb6\017\uffb6\022\uffb6\001\002\000\010\003\uffac\017\uffac" +
    "\022\uffac\001\002\000\010\003\uffb7\017\uffb7\022\uffb7\001" +
    "\002\000\010\003\uffb3\017\uffb3\022\uffb3\001\002\000\010" +
    "\003\uffaa\017\uffaa\022\uffaa\001\002\000\010\003\uffb4\017" +
    "\uffb4\022\uffb4\001\002\000\010\003\uffae\017\uffae\022\uffae" +
    "\001\002\000\010\003\uffaf\017\uffaf\022\uffaf\001\002\000" +
    "\010\003\uffb1\017\uffb1\022\uffb1\001\002\000\010\003\uffa8" +
    "\017\uffa8\022\uffa8\001\002\000\010\003\uffab\017\uffab\022" +
    "\uffab\001\002\000\010\003\uffb2\017\uffb2\022\uffb2\001\002" +
    "\000\010\003\uffad\017\uffad\022\uffad\001\002\000\010\003" +
    "\uffb5\017\uffb5\022\uffb5\001\002\000\010\003\uffa9\017\uffa9" +
    "\022\uffa9\001\002\000\004\021\114\001\002\000\006\003" +
    "\076\050\075\001\002\000\004\050\064\001\002\000\004" +
    "\013\065\001\002\000\042\033\044\034\042\035\057\036" +
    "\047\037\052\040\040\041\051\042\050\043\056\044\043" +
    "\045\054\046\046\047\045\050\055\051\060\052\053\001" +
    "\002\000\006\017\uffc6\022\067\001\002\000\004\037\072" +
    "\001\002\000\004\017\071\001\002\000\006\003\uffda\021" +
    "\uffda\001\002\000\004\013\073\001\002\000\002\001\002" +
    "\000\006\003\uffc7\017\uffc7\001\002\000\006\003\103\013" +
    "\104\001\002\000\004\013\077\001\002\000\042\033\044" +
    "\034\042\035\057\036\047\037\052\040\040\041\051\042" +
    "\050\043\056\044\043\045\054\046\046\047\045\050\055" +
    "\051\060\052\053\001\002\000\006\017\uffc6\022\067\001" +
    "\002\000\004\017\102\001\002\000\006\003\uffd9\021\uffd9" +
    "\001\002\000\042\033\044\034\042\035\057\036\047\037" +
    "\052\040\040\041\051\042\050\043\056\044\043\045\054" +
    "\046\046\047\045\050\055\051\060\052\053\001\002\000" +
    "\042\033\044\034\042\035\057\036\047\037\052\040\040" +
    "\041\051\042\050\043\056\044\043\045\054\046\046\047" +
    "\045\050\055\051\060\052\053\001\002\000\010\003\uffc6" +
    "\017\uffc6\022\067\001\002\000\006\003\107\017\110\001" +
    "\002\000\006\003\uffd7\021\uffd7\001\002\000\006\003\uffdb" +
    "\021\uffdb\001\002\000\006\017\uffc6\022\067\001\002\000" +
    "\004\017\113\001\002\000\006\003\uffd8\021\uffd8\001\002" +
    "\000\004\017\115\001\002\000\006\003\116\014\120\001" +
    "\002\000\004\005\132\001\002\000\010\002\uffe0\003\uffe0" +
    "\014\uffe0\001\002\000\006\003\122\005\121\001\002\000" +
    "\006\003\125\023\126\001\002\000\004\023\123\001\002" +
    "\000\004\015\124\001\002\000\010\002\uffba\003\uffba\014" +
    "\uffba\001\002\000\004\015\131\001\002\000\006\003\130" +
    "\015\127\001\002\000\010\002\uffbc\003\uffbc\014\uffbc\001" +
    "\002\000\010\002\uffb8\003\uffb8\014\uffb8\001\002\000\010" +
    "\002\uffb9\003\uffb9\014\uffb9\001\002\000\004\023\133\001" +
    "\002\000\004\015\134\001\002\000\010\002\uffbb\003\uffbb" +
    "\014\uffbb\001\002\000\004\013\160\001\002\000\006\003" +
    "\137\013\140\001\002\000\042\033\044\034\042\035\057" +
    "\036\047\037\052\040\040\041\051\042\050\043\056\044" +
    "\043\045\054\046\046\047\045\050\055\051\060\052\053" +
    "\001\002\000\042\033\044\034\042\035\057\036\047\037" +
    "\052\040\040\041\051\042\050\043\056\044\043\045\054" +
    "\046\046\047\045\050\055\051\060\052\053\001\002\000" +
    "\006\003\063\022\062\001\002\000\006\003\143\021\144" +
    "\001\002\000\004\017\151\001\002\000\006\003\145\017" +
    "\146\001\002\000\006\003\116\014\120\001\002\000\006" +
    "\003\116\014\120\001\002\000\010\002\uffe1\003\uffe1\014" +
    "\uffe1\001\002\000\010\002\uffdc\003\uffdc\014\uffdc\001\002" +
    "\000\006\003\116\014\120\001\002\000\010\002\uffdd\003" +
    "\uffdd\014\uffdd\001\002\000\006\003\063\022\062\001\002" +
    "\000\004\021\155\001\002\000\004\017\156\001\002\000" +
    "\006\003\116\014\120\001\002\000\010\002\uffde\003\uffde" +
    "\014\uffde\001\002\000\042\033\044\034\042\035\057\036" +
    "\047\037\052\040\040\041\051\042\050\043\056\044\043" +
    "\045\054\046\046\047\045\050\055\051\060\052\053\001" +
    "\002\000\006\003\063\022\062\001\002\000\004\021\163" +
    "\001\002\000\004\017\164\001\002\000\006\003\116\014" +
    "\120\001\002\000\010\002\uffdf\003\uffdf\014\uffdf\001\002" +
    "\000\006\003\173\013\174\001\002\000\004\013\170\001" +
    "\002\000\004\020\171\001\002\000\006\003\034\016\033" +
    "\001\002\000\010\002\uffee\003\uffee\014\uffee\001\002\000" +
    "\004\020\201\001\002\000\006\003\175\020\176\001\002" +
    "\000\006\003\034\016\033\001\002\000\006\003\034\016" +
    "\033\001\002\000\010\002\ufff0\003\ufff0\014\ufff0\001\002" +
    "\000\010\002\uffec\003\uffec\014\uffec\001\002\000\006\003" +
    "\034\016\033\001\002\000\010\002\uffed\003\uffed\014\uffed" +
    "\001\002\000\010\002\ufff9\003\ufff9\014\ufff9\001\002\000" +
    "\006\003\207\016\205\001\002\000\006\003\u0108\036\u0107" +
    "\001\002\000\010\002\ufff8\003\ufff8\014\ufff8\001\002\000" +
    "\004\036\212\001\002\000\010\002\ufff5\003\ufff5\014\ufff5" +
    "\001\002\000\010\002\ufff2\003\ufff2\014\ufff2\001\002\000" +
    "\004\013\213\001\002\000\004\020\214\001\002\000\006" +
    "\003\217\016\216\001\002\000\010\002\uffea\003\uffea\014" +
    "\uffea\001\002\000\010\003\317\043\316\047\320\001\002" +
    "\000\006\043\221\047\222\001\002\000\010\002\uffe5\003" +
    "\uffe5\014\uffe5\001\002\000\004\013\231\001\002\000\004" +
    "\013\223\001\002\000\042\033\044\034\042\035\057\036" +
    "\047\037\052\040\040\041\051\042\050\043\056\044\043" +
    "\045\054\046\046\047\045\050\055\051\060\052\053\001" +
    "\002\000\010\003\063\017\225\022\062\001\002\000\004" +
    "\021\226\001\002\000\004\017\227\001\002\000\006\003" +
    "\116\014\120\001\002\000\010\002\uffc2\003\uffc2\014\uffc2" +
    "\001\002\000\042\033\044\034\042\035\057\036\047\037" +
    "\052\040\040\041\051\042\050\043\056\044\043\045\054" +
    "\046\046\047\045\050\055\051\060\052\053\001\002\000" +
    "\006\003\234\022\233\001\002\000\006\003\303\044\304" +
    "\001\002\000\004\044\241\001\002\000\004\021\236\001" +
    "\002\000\004\017\237\001\002\000\006\003\116\014\120" +
    "\001\002\000\010\002\uffd5\003\uffd5\014\uffd5\001\002\000" +
    "\004\013\242\001\002\000\042\033\044\034\042\035\057" +
    "\036\047\037\052\040\040\041\051\042\050\043\056\044" +
    "\043\045\054\046\046\047\045\050\055\051\060\052\053" +
    "\001\002\000\006\003\245\022\244\001\002\000\010\003" +
    "\261\044\262\045\260\001\002\000\004\045\247\001\002" +
    "\000\006\003\uffcf\021\uffcf\001\002\000\004\013\250\001" +
    "\002\000\042\033\044\034\042\035\057\036\047\037\052" +
    "\040\040\041\051\042\050\043\056\044\043\045\054\046" +
    "\046\047\045\050\055\051\060\052\053\001\002\000\006" +
    "\017\uffc4\022\252\001\002\000\004\046\255\001\002\000" +
    "\004\017\254\001\002\000\006\003\uffcb\021\uffcb\001\002" +
    "\000\004\013\256\001\002\000\002\001\002\000\006\003" +
    "\uffc5\017\uffc5\001\002\000\006\003\273\013\274\001\002" +
    "\000\004\013\267\001\002\000\004\013\263\001\002\000" +
    "\042\033\044\034\042\035\057\036\047\037\052\040\040" +
    "\041\051\042\050\043\056\044\043\045\054\046\046\047" +
    "\045\050\055\051\060\052\053\001\002\000\006\003\uffc4" +
    "\022\252\001\002\000\004\003\266\001\002\000\006\003" +
    "\uffc8\021\uffc8\001\002\000\042\033\044\034\042\035\057" +
    "\036\047\037\052\040\040\041\051\042\050\043\056\044" +
    "\043\045\054\046\046\047\045\050\055\051\060\052\053" +
    "\001\002\000\006\017\uffc4\022\252\001\002\000\004\017" +
    "\272\001\002\000\006\003\uffca\021\uffca\001\002\000\042" +
    "\033\044\034\042\035\057\036\047\037\052\040\040\041" +
    "\051\042\050\043\056\044\043\045\054\046\046\047\045" +
    "\050\055\051\060\052\053\001\002\000\042\033\044\034" +
    "\042\035\057\036\047\037\052\040\040\041\051\042\050" +
    "\043\056\044\043\045\054\046\046\047\045\050\055\051" +
    "\060\052\053\001\002\000\006\017\uffc4\022\252\001\002" +
    "\000\004\017\277\001\002\000\006\003\uffcc\021\uffcc\001" +
    "\002\000\006\017\uffc4\022\252\001\002\000\004\017\302" +
    "\001\002\000\006\003\uffc9\021\uffc9\001\002\000\004\013" +
    "\313\001\002\000\006\003\305\013\306\001\002\000\042" +
    "\033\044\034\042\035\057\036\047\037\052\040\040\041" +
    "\051\042\050\043\056\044\043\045\054\046\046\047\045" +
    "\050\055\051\060\052\053\001\002\000\042\033\044\034" +
    "\042\035\057\036\047\037\052\040\040\041\051\042\050" +
    "\043\056\044\043\045\054\046\046\047\045\050\055\051" +
    "\060\052\053\001\002\000\006\003\245\022\244\001\002" +
    "\000\006\003\uffd0\021\uffd0\001\002\000\006\003\245\022" +
    "\244\001\002\000\006\003\uffcd\021\uffcd\001\002\000\042" +
    "\033\044\034\042\035\057\036\047\037\052\040\040\041" +
    "\051\042\050\043\056\044\043\045\054\046\046\047\045" +
    "\050\055\051\060\052\053\001\002\000\006\003\245\022" +
    "\244\001\002\000\006\003\uffce\021\uffce\001\002\000\006" +
    "\003\366\013\367\001\002\000\004\013\346\001\002\000" +
    "\006\003\321\013\322\001\002\000\042\033\044\034\042" +
    "\035\057\036\047\037\052\040\040\041\051\042\050\043" +
    "\056\044\043\045\054\046\046\047\045\050\055\051\060" +
    "\052\053\001\002\000\042\033\044\034\042\035\057\036" +
    "\047\037\052\040\040\041\051\042\050\043\056\044\043" +
    "\045\054\046\046\047\045\050\055\051\060\052\053\001" +
    "\002\000\010\003\324\017\325\022\062\001\002\000\006" +
    "\021\336\050\064\001\002\000\006\003\326\021\327\001" +
    "\002\000\004\017\334\001\002\000\006\003\330\017\331" +
    "\001\002\000\006\003\116\014\120\001\002\000\006\003" +
    "\116\014\120\001\002\000\010\002\uffc3\003\uffc3\014\uffc3" +
    "\001\002\000\010\002\uffbd\003\uffbd\014\uffbd\001\002\000" +
    "\006\003\116\014\120\001\002\000\010\002\uffbe\003\uffbe" +
    "\014\uffbe\001\002\000\004\017\337\001\002\000\006\003" +
    "\116\014\120\001\002\000\010\002\uffbf\003\uffbf\014\uffbf" +
    "\001\002\000\010\003\063\017\342\022\062\001\002\000" +
    "\004\021\343\001\002\000\004\017\344\001\002\000\006" +
    "\003\116\014\120\001\002\000\010\002\uffc0\003\uffc0\014" +
    "\uffc0\001\002\000\042\033\044\034\042\035\057\036\047" +
    "\037\052\040\040\041\051\042\050\043\056\044\043\045" +
    "\054\046\046\047\045\050\055\051\060\052\053\001\002" +
    "\000\010\003\351\017\353\022\350\001\002\000\010\003" +
    "\362\044\304\050\075\001\002\000\006\044\241\050\064" +
    "\001\002\000\004\021\357\001\002\000\004\021\354\001" +
    "\002\000\004\017\355\001\002\000\006\003\116\014\120" +
    "\001\002\000\010\002\uffc1\003\uffc1\014\uffc1\001\002\000" +
    "\004\017\360\001\002\000\006\003\116\014\120\001\002" +
    "\000\010\002\uffd4\003\uffd4\014\uffd4\001\002\000\004\013" +
    "\363\001\002\000\042\033\044\034\042\035\057\036\047" +
    "\037\052\040\040\041\051\042\050\043\056\044\043\045" +
    "\054\046\046\047\045\050\055\051\060\052\053\001\002" +
    "\000\010\003\245\017\uffc6\022\365\001\002\000\012\003" +
    "\261\037\072\044\262\045\260\001\002\000\042\033\044" +
    "\034\042\035\057\036\047\037\052\040\040\041\051\042" +
    "\050\043\056\044\043\045\054\046\046\047\045\050\055" +
    "\051\060\052\053\001\002\000\042\033\044\034\042\035" +
    "\057\036\047\037\052\040\040\041\051\042\050\043\056" +
    "\044\043\045\054\046\046\047\045\050\055\051\060\052" +
    "\053\001\002\000\006\003\234\022\233\001\002\000\006" +
    "\003\372\021\373\001\002\000\004\017\u0100\001\002\000" +
    "\006\003\374\017\375\001\002\000\006\003\116\014\120" +
    "\001\002\000\006\003\116\014\120\001\002\000\010\002" +
    "\uffd6\003\uffd6\014\uffd6\001\002\000\010\002\uffd1\003\uffd1" +
    "\014\uffd1\001\002\000\006\003\116\014\120\001\002\000" +
    "\010\002\uffd2\003\uffd2\014\uffd2\001\002\000\006\003\234" +
    "\022\233\001\002\000\004\021\u0104\001\002\000\004\017" +
    "\u0105\001\002\000\006\003\116\014\120\001\002\000\010" +
    "\002\uffd3\003\uffd3\014\uffd3\001\002\000\006\003\u010d\013" +
    "\u010e\001\002\000\004\013\u0109\001\002\000\004\020\u010a" +
    "\001\002\000\006\003\217\016\216\001\002\000\010\002" +
    "\uffe9\003\uffe9\014\uffe9\001\002\000\010\002\uffe4\003\uffe4" +
    "\014\uffe4\001\002\000\004\020\u0115\001\002\000\006\003" +
    "\u010f\020\u0110\001\002\000\006\003\217\016\216\001\002" +
    "\000\006\003\217\016\216\001\002\000\010\002\uffeb\003" +
    "\uffeb\014\uffeb\001\002\000\010\002\uffe6\003\uffe6\014\uffe6" +
    "\001\002\000\010\002\uffe7\003\uffe7\014\uffe7\001\002\000" +
    "\010\002\uffe2\003\uffe2\014\uffe2\001\002\000\006\003\217" +
    "\016\216\001\002\000\010\002\uffe8\003\uffe8\014\uffe8\001" +
    "\002\000\010\002\uffe3\003\uffe3\014\uffe3\001\002\000\006" +
    "\003\u011b\016\u011a\001\002\000\006\003\u011b\016\u011a\001" +
    "\002\000\006\003\u0126\036\u0125\001\002\000\004\036\u011d" +
    "\001\002\000\010\002\ufff4\003\ufff4\014\ufff4\001\002\000" +
    "\004\013\u011e\001\002\000\004\020\u011f\001\002\000\006" +
    "\003\u0121\016\u0120\001\002\000\006\003\u0122\043\316\001" +
    "\002\000\004\043\221\001\002\000\004\013\u0123\001\002" +
    "\000\042\033\044\034\042\035\057\036\047\037\052\040" +
    "\040\041\051\042\050\043\056\044\043\045\054\046\046" +
    "\047\045\050\055\051\060\052\053\001\002\000\006\003" +
    "\234\022\233\001\002\000\006\003\u0129\013\u012a\001\002" +
    "\000\004\013\u0127\001\002\000\004\020\u0128\001\002\000" +
    "\006\003\u0121\016\u0120\001\002\000\004\020\u012d\001\002" +
    "\000\006\003\u012b\020\u012c\001\002\000\006\003\u0121\016" +
    "\u0120\001\002\000\006\003\u0121\016\u0120\001\002\000\006" +
    "\003\u0121\016\u0120\001\002\000\010\002\ufff6\003\ufff6\014" +
    "\ufff6\001\002\000\006\003\u0132\016\u0131\001\002\000\006" +
    "\003\u0132\016\u0131\001\002\000\006\003\u0146\036\u0145\001" +
    "\002\000\004\036\u0134\001\002\000\010\002\ufff1\003\ufff1" +
    "\014\ufff1\001\002\000\004\013\u0135\001\002\000\004\020" +
    "\u0136\001\002\000\006\003\u0138\016\u0137\001\002\000\006" +
    "\003\u013c\047\u013d\001\002\000\004\047\u0139\001\002\000" +
    "\004\013\u013a\001\002\000\042\033\044\034\042\035\057" +
    "\036\047\037\052\040\040\041\051\042\050\043\056\044" +
    "\043\045\054\046\046\047\045\050\055\051\060\052\053" +
    "\001\002\000\004\017\225\001\002\000\004\013\u0143\001" +
    "\002\000\006\003\u013e\013\u013f\001\002\000\042\033\044" +
    "\034\042\035\057\036\047\037\052\040\040\041\051\042" +
    "\050\043\056\044\043\045\054\046\046\047\045\050\055" +
    "\051\060\052\053\001\002\000\042\033\044\034\042\035" +
    "\057\036\047\037\052\040\040\041\051\042\050\043\056" +
    "\044\043\045\054\046\046\047\045\050\055\051\060\052" +
    "\053\001\002\000\006\003\u0141\017\325\001\002\000\004" +
    "\021\336\001\002\000\004\017\342\001\002\000\042\033" +
    "\044\034\042\035\057\036\047\037\052\040\040\041\051" +
    "\042\050\043\056\044\043\045\054\046\046\047\045\050" +
    "\055\051\060\052\053\001\002\000\004\017\353\001\002" +
    "\000\006\003\u0149\013\u014a\001\002\000\004\013\u0147\001" +
    "\002\000\004\020\u0148\001\002\000\006\003\u0138\016\u0137" +
    "\001\002\000\004\020\u014d\001\002\000\006\003\u014b\020" +
    "\u014c\001\002\000\006\003\u0138\016\u0137\001\002\000\006" +
    "\003\u0138\016\u0137\001\002\000\006\003\u0138\016\u0137\001" +
    "\002\000\010\002\ufff3\003\ufff3\014\ufff3\001\002\000\012" +
    "\003\020\035\022\040\017\041\016\001\002\000\012\003" +
    "\020\035\022\040\017\041\016\001\002\000\010\002\ufffe" +
    "\003\ufffe\014\ufffe\001\002\000\010\002\ufffa\003\ufffa\014" +
    "\ufffa\001\002\000\004\013\u0154\001\002\000\012\003\020" +
    "\035\022\040\017\041\016\001\002\000\010\002\ufffc\003" +
    "\ufffc\014\ufffc\001\002\000\004\002\000\001\002\000\004" +
    "\004\u0158\001\002\000\004\013\u0159\001\002\000\012\003" +
    "\020\035\022\040\017\041\016\001\002\000\010\002\ufffd" +
    "\003\ufffd\014\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\006\002\006\004\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\006" +
    "\004\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\202\001\001\000\004\007\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\040\001\001\000\002\001\001\000\004\013" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\065\001\001\000\004\006\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\077\001" +
    "\001\000\004\006\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\110\001\001\000\004\021\104\001" +
    "\001\000\004\006\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\152\001\001" +
    "\000\004\021\140\001\001\000\004\013\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\147\001\001\000\004\003\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\151\001\001\000\002" +
    "\001\001\000\004\013\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\156\001\001\000\002\001\001" +
    "\000\004\021\160\001\001\000\004\013\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\177\001" +
    "\001\000\004\012\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\205\010\207\011\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\034\014\214\020\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\223\001\001\000\004\013\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\227\001\001\000\002\001" +
    "\001\000\004\021\231\001\001\000\004\017\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\242\001\001\000\004\016" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\250\001\001\000" +
    "\004\015\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\263\001\001\000\004\015" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\267\001\001\000\004\015\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\277\001\001\000\004" +
    "\021\274\001\001\000\004\015\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\310\001\001\000\004\021\306\001\001" +
    "\000\004\016\307\001\001\000\002\001\001\000\004\016" +
    "\311\001\001\000\002\001\001\000\004\021\313\001\001" +
    "\000\004\016\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\340" +
    "\001\001\000\004\021\322\001\001\000\004\013\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\332\001\001\000\004\003" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\337\001\001\000\002\001\001\000\004\013\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\344\001\001\000\002\001\001\000\004\021\346\001\001" +
    "\000\006\013\161\017\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\355\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\363\001\001\000\006\006" +
    "\100\016\314\001\001\000\002\001\001\000\004\021\u0101" +
    "\001\001\000\004\021\367\001\001\000\004\017\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\376\001\001\000\004\003\375\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u0100\001\001" +
    "\000\002\001\001\000\004\017\u0102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\171\014\u010a\020\u010b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\177\014\u0112\020\u0113\001\001\000\010" +
    "\012\176\014\u0110\020\u0111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\201\014\u0115\020\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u012d\001\001\000\004\010\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0123\001\001\000\004\017\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u0112\001\001\000\004\014\u0110\001\001\000" +
    "\004\014\u0115\001\001\000\002\001\001\000\004\011\u014d" +
    "\001\001\000\004\011\u0132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u013a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u0141\001\001\000\004\021\u013f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u0143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u010b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0113\001\001" +
    "\000\004\020\u0111\001\001\000\004\020\u0116\001\001\000" +
    "\002\001\001\000\004\005\u0151\001\001\000\004\005\u0150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u0154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u0159\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Symbol cur_token;
	private boolean parsed;

	// public FormsParser(FormsLex lex) {
	// 	super(lex);
	// 	this.parsed = true;
	// }

	public parser(FormsLex lex) {
		super(lex);
		this.parsed = true;
	}

	public void report_fatal_error(String message, Object info) {
        /* parsed */
        this.parsed = false;

        //System.out.println("report_fatal_error");
        //System.out.println("Message: " + message);
        //System.out.println("Object info: " + info);

        /* Armando reportes de errores */
        List<String> expected = new ArrayList<>();
        List<Integer> tokens = expected_token_ids();
        for(Integer i : tokens) {
            expected.add(symbl_name_from_id(i));
        }
	}

	public void syntax_error(Symbol cur_token) {
        /* parsed */
        this.parsed = false;
        /**/

        List<String> expected = new ArrayList<>();

        this.cur_token = cur_token;
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);

        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
            expected.add(symbl_name_from_id(i));
        }
        System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}

	public boolean isParsed() {
		return parsed;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sol ::= ini_sol sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sol EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sol ::= ini_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini_sol ::= SMALLER EXCL INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini_sol ::= error EXCL INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;
		 System.out.println("1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini_sol ::= SMALLER error INIT_SOL COLON sol_user_nl 
            {
              Object RESULT =null;
		 System.out.println("2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini_sol ::= SMALLER EXCL error COLON sol_user_nl 
            {
              Object RESULT =null;
		 System.out.println("3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini_sol ::= SMALLER EXCL INIT_SOL error sol_user_nl 
            {
              Object RESULT =null;
		 System.out.println("4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini_sol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sol_user_nl ::= ADD_USER GREATER credNew 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sol_user_nl ::= error GREATER credNew 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sol_user_nl ::= ADD_USER error credNew 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sol_user_nl ::= EDIT_USER GREATER credEdit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sol_user_nl ::= error GREATER credEdit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sol_user_nl ::= EDIT_USER error credEdit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sol_user_nl ::= DEL_USER GREATER credDel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sol_user_nl ::= error GREATER credDel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sol_user_nl ::= DEL_USER error credDel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // credNew ::= LBRACE CRED COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // credNew ::= error CRED COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // credNew ::= LBRACE error COLON LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // credNew ::= LBRACE CRED error LBRACKET new_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // credNew ::= LBRACE CRED COLON error new_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credNew",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // credEdit ::= LBRACE CRED COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // credEdit ::= error CRED COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // credEdit ::= LBRACE error COLON LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // credEdit ::= LBRACE CRED error LBRACKET edit_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // credEdit ::= LBRACE CRED COLON error edit_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credEdit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // credDel ::= LBRACE CRED COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // credDel ::= error CRED COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // credDel ::= LBRACE error COLON LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // credDel ::= LBRACE CRED error LBRACKET del_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // credDel ::= LBRACE CRED COLON error del_user 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("credDel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // new_user ::= LBRACE USER COLON str_param pass_user RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					System.out.printf("User = %s\n", u);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // new_user ::= error USER COLON str_param pass_user RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // new_user ::= LBRACE error COLON str_param pass_user RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // new_user ::= LBRACE USER error str_param pass_user RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // new_user ::= LBRACE USER COLON str_param pass_user error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // new_user ::= LBRACE USER COLON str_param pass_user RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pass_user ::= COMMA PASS COLON str_param user_date RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					System.out.printf("Pass = %s\n", p);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pass_user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pass_user ::= error PASS COLON str_param user_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pass_user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pass_user ::= COMMA error COLON str_param user_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pass_user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pass_user ::= COMMA PASS error str_param user_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pass_user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pass_user ::= COMMA PASS COLON str_param user_date error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pass_user",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // edit_user ::= LBRACE OLD_USER COLON str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					System.out.printf("oldUser = %s\n", u);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // edit_user ::= error OLD_USER COLON str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // edit_user ::= LBRACE error COLON str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // edit_user ::= LBRACE OLD_USER error str_param user_n RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // edit_user ::= LBRACE OLD_USER COLON str_param user_n error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // edit_user ::= LBRACE OLD_USER COLON str_param user_n RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_user",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // user_n ::= COMMA NEW_USER COLON str_param edit_pass 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					System.out.printf("newUser = %s\n", v);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // user_n ::= error NEW_USER COLON str_param edit_pass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // user_n ::= COMMA error COLON str_param edit_pass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // user_n ::= COMMA NEW_USER error str_param edit_pass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_n",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // edit_pass ::= COMMA NEW_PASS COLON str_param edit_date RBRACE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					System.out.printf("newPass = %s\n", w);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // edit_pass ::= error NEW_PASS COLON str_param edit_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // edit_pass ::= COMMA error COLON str_param edit_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // edit_pass ::= COMMA NEW_PASS error str_param edit_date RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // edit_pass ::= COMMA NEW_USER COLON str_param edit_date error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_pass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // user_date ::= COMMA DATE_ADD COLON date 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.printf("DateMod = %s\n", a);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_date",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // user_date ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_date",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // edit_date ::= COMMA DATE_MOD COLON date 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.printf("Date = %s\n", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // edit_date ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("edit_date",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // del_user ::= LBRACE USER COLON str_param RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					System.out.printf("delUser = %s\n", u);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // del_user ::= error USER COLON str_param RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // del_user ::= LBRACE error COLON str_param RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // del_user ::= LBRACE USER error str_param RBRACE RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // del_user ::= LBRACE USER COLON str_param error RBRACKET RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // del_user ::= LBRACE USER COLON str_param RBRACE error RBRACE fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // del_user ::= LBRACE USER COLON str_param RBRACE RBRACKET error fin_sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_user",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fin_sol ::= SMALLER FIN_SOL EXCL GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // fin_sol ::= error FIN_SOL EXCL GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fin_sol ::= SMALLER error EXCL GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fin_sol ::= SMALLER FIN_SOL error GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // fin_sol ::= SMALLER FIN_SOL EXCL error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_sol",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // str_param ::= STR 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // str_param ::= DATE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // str_param ::= ADD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // str_param ::= CRED 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // str_param ::= USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // str_param ::= PASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // str_param ::= DATE_ADD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // str_param ::= EDIT_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // str_param ::= DEL_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // str_param ::= LOGIN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // str_param ::= OLD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // str_param ::= NEW_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // str_param ::= NEW_PASS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // str_param ::= DATE_MOD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // str_param ::= NEW_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // str_param ::= PARAM_F 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
