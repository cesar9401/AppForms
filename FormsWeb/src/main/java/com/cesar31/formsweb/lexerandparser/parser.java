
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.formsweb.lexerandparser;

import com.cesar31.formsweb.lexerandparser.FormsLex;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\005\015\000\002\002\004\000\002\004" +
    "\015\000\002\002\005\000\002\003\005\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\006\003\000\002\006\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\021\003\000\002\021\003\000\002" +
    "\020\003\000\002\020\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\006\003\005\030\007\001\002\000\006\003" +
    "\011\037\012\001\002\000\010\003\uffef\005\uffef\037\uffef" +
    "\001\002\000\004\002\010\001\002\000\010\003\ufff0\005" +
    "\ufff0\037\ufff0\001\002\000\004\002\000\001\002\000\010" +
    "\003\uffed\004\uffed\031\uffed\001\002\000\010\003\uffee\004" +
    "\uffee\031\uffee\001\002\000\006\003\016\004\014\001\002" +
    "\000\006\003\ufffc\027\ufffc\001\002\000\006\003\017\027" +
    "\021\001\002\000\006\003\ufffb\027\ufffb\001\002\000\012" +
    "\003\ufff3\010\ufff3\034\ufff3\045\ufff3\001\002\000\006\003" +
    "\022\010\024\001\002\000\012\003\ufff4\010\ufff4\034\ufff4" +
    "\045\ufff4\001\002\000\006\003\ufff7\031\ufff7\001\002\000" +
    "\006\003\026\031\025\001\002\000\006\003\ufff8\031\ufff8" +
    "\001\002\000\010\002\ufff2\003\ufff2\032\ufff2\001\002\000" +
    "\010\002\ufff1\003\ufff1\032\ufff1\001\002\000\006\003\032" +
    "\032\030\001\002\000\010\003\uffec\011\uffec\012\uffec\001" +
    "\002\000\006\003\043\011\042\001\002\000\010\003\uffeb" +
    "\011\uffeb\012\uffeb\001\002\000\006\003\005\030\007\001" +
    "\002\000\006\003\036\005\035\001\002\000\006\003\ufffa" +
    "\037\ufffa\001\002\000\006\003\ufff9\037\ufff9\001\002\000" +
    "\006\003\011\037\012\001\002\000\006\003\026\031\025" +
    "\001\002\000\004\002\001\001\002\000\006\003\ufff6\027" +
    "\ufff6\001\002\000\006\003\ufff5\027\ufff5\001\002\000\006" +
    "\003\017\027\021\001\002\000\006\003\047\034\050\001" +
    "\002\000\006\003\032\032\030\001\002\000\006\003\uffe5" +
    "\032\uffe5\001\002\000\006\003\uffe6\032\uffe6\001\002\000" +
    "\004\012\052\001\002\000\006\003\017\027\021\001\002" +
    "\000\006\003\056\036\054\001\002\000\004\013\uffe8\001" +
    "\002\000\004\013\060\001\002\000\004\013\uffe7\001\002" +
    "\000\006\003\063\033\064\001\002\000\006\003\017\027" +
    "\021\001\002\000\004\045\062\001\002\000\006\003\ufffd" +
    "\033\ufffd\001\002\000\010\003\uffe9\030\uffe9\035\uffe9\001" +
    "\002\000\010\003\uffea\030\uffea\035\uffea\001\002\000\006" +
    "\003\066\035\067\001\002\000\006\003\uffe3\033\uffe3\001" +
    "\002\000\006\003\uffe4\033\uffe4\001\002\000\006\003\063" +
    "\033\064\001\002\000\006\003\uffff\030\uffff\001\002\000" +
    "\004\045\073\001\002\000\006\003\ufffe\036\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\006\005\005\015\003\001\001\000\004\016" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\014\001\001\000\002\001\001\000\004" +
    "\013\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\032\017\030\001\001" +
    "\000\002\001\001\000\004\012\043\001\001\000\002\001" +
    "\001\000\004\015\033\001\001\000\004\010\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\037\001" +
    "\001\000\004\014\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\044\001\001\000" +
    "\004\022\045\001\001\000\004\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\052\001\001\000" +
    "\004\013\071\001\001\000\004\020\054\001\001\000\002" +
    "\001\001\000\004\003\056\001\001\000\002\001\001\000" +
    "\004\021\064\001\001\000\004\013\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Symbol cur_token;
	private boolean parsed;

	// public FormsParser(FormsLex lex) {
	// 	super(lex);
	// 	this.parsed = true;
	// }

	public parser(FormsLex lex) {
		super(lex);
		this.parsed = true;
	}

	public void report_fatal_error(String message, Object info) {
        /* parsed */
        this.parsed = false;

        //System.out.println("report_fatal_error");
        //System.out.println("Message: " + message);
        //System.out.println("Object info: " + info);

        /* Armando reportes de errores */
        List<String> expected = new ArrayList<>();
        List<Integer> tokens = expected_token_ids();
        for(Integer i : tokens) {
            expected.add(symbl_name_from_id(i));
        }
	}

	public void syntax_error(Symbol cur_token) {
        /* parsed */
        this.parsed = false;
        /**/

        List<String> expected = new ArrayList<>();

        this.cur_token = cur_token;
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);

        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
            expected.add(symbl_name_from_id(i));
        }
        System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}

	public boolean isParsed() {
		return parsed;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sol_user_nl ::= smaller excl ini colon add_user greater user_nl smaller fin excl greater 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol_user_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sol_user_nl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // user_nl ::= lbrace cred colon lbracket lbrace user_user comma user_pass rbrace rbracket rbrace 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_nl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // user_user ::= USER colon STR 
            {
              Object RESULT =null;
		int userleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int userright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object user = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.printf("User = %s\n", user);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_user",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // user_pass ::= PASS colon STR 
            {
              Object RESULT =null;
		int passleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int passright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pass = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.printf("Pass = %s\n", pass); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_pass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini ::= INIT_SOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini ::= error 
            {
              Object RESULT =null;
		 System.out.println("ini ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fin ::= FIN_SOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fin ::= error 
            {
              Object RESULT =null;
		 System.out.println("fin ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // add_user ::= ADD_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_user",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // add_user ::= error 
            {
              Object RESULT =null;
		 System.out.println("new_user ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_user",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cred ::= CRED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cred",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cred ::= error 
            {
              Object RESULT =null;
		 System.out.println("cred ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cred",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // colon ::= COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colon",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // colon ::= error 
            {
              Object RESULT =null;
		 System.out.println("colon ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colon",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // greater ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("greater",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // greater ::= error 
            {
              Object RESULT =null;
		 System.out.println("greater ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("greater",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // smaller ::= SMALLER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("smaller",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // smaller ::= error 
            {
              Object RESULT =null;
		 System.out.println("smaller ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("smaller",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // excl ::= EXCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("excl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // excl ::= error 
            {
              Object RESULT =null;
		 System.out.println("excl ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("excl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lbrace ::= LBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lbrace",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lbrace ::= error 
            {
              Object RESULT =null;
		 System.out.println("lbrace ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lbrace",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rbrace ::= RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rbrace",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rbrace ::= error 
            {
              Object RESULT =null;
		 System.out.println("rbrace ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rbrace",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comma ::= COMMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comma ::= error 
            {
              Object RESULT =null;
		 System.out.println("comma ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lbracket ::= LBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lbracket",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lbracket ::= error 
            {
              Object RESULT =null;
		 System.out.println("lbracket ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lbracket",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rbracket ::= RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rbracket",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rbracket ::= error 
            {
              Object RESULT =null;
		 System.out.println("rbracket ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rbracket",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
