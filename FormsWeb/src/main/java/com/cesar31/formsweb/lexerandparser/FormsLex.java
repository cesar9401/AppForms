// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: forms.flex

package com.cesar31.formsweb.lexerandparser;

import static com.cesar31.formsweb.lexerandparser.sym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class FormsLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\7\0\1\6\1\7\1\10\1\11\1\0\1\12"+
    "\1\13\11\14\1\15\1\0\1\16\1\0\1\17\2\0"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\21\1\31\1\32\1\33\1\34\1\35\1\21"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\3\21\1\44"+
    "\1\45\1\46\1\0\1\47\1\0\2\21\1\50\1\51"+
    "\1\52\1\53\2\21\1\54\2\21\1\55\1\21\1\56"+
    "\1\57\3\21\1\60\1\61\1\62\5\21\1\63\1\0"+
    "\1\64\7\0\1\1\32\0\1\1\11\0\1\21\12\0"+
    "\1\21\4\0\1\21\5\0\27\21\1\0\37\21\1\0"+
    "\u01ca\21\4\0\14\21\16\0\5\21\7\0\1\21\1\0"+
    "\1\21\21\0\165\21\1\0\2\21\2\0\4\21\1\0"+
    "\1\21\6\0\1\21\1\0\3\21\1\0\1\21\1\0"+
    "\24\21\1\0\123\21\1\0\213\21\1\0\255\21\1\0"+
    "\46\21\2\0\1\21\6\0\51\21\10\0\55\21\1\0"+
    "\1\21\1\0\2\21\1\0\2\21\1\0\1\21\10\0"+
    "\33\21\4\0\4\21\35\0\13\21\5\0\100\21\12\65"+
    "\4\0\146\21\1\0\10\21\2\0\12\21\1\0\6\21"+
    "\12\65\3\21\2\0\1\21\20\0\73\21\2\0\145\21"+
    "\16\0\12\65\54\21\4\0\1\21\2\0\1\21\2\0"+
    "\56\21\22\0\34\21\4\0\13\21\65\0\25\21\1\0"+
    "\10\21\25\0\17\21\1\0\201\21\2\0\12\65\1\0"+
    "\23\21\1\0\10\21\2\0\2\21\2\0\26\21\1\0"+
    "\7\21\1\0\1\21\3\0\4\21\2\0\11\21\2\0"+
    "\2\21\2\0\4\21\10\0\1\21\4\0\2\21\1\0"+
    "\5\21\2\0\12\65\2\21\12\0\1\21\1\0\1\21"+
    "\2\0\3\21\1\0\6\21\4\0\2\21\2\0\26\21"+
    "\1\0\7\21\1\0\2\21\1\0\2\21\1\0\2\21"+
    "\2\0\1\21\1\0\5\21\4\0\2\21\2\0\3\21"+
    "\3\0\1\21\7\0\4\21\1\0\1\21\7\0\12\65"+
    "\6\21\13\0\3\21\1\0\11\21\1\0\3\21\1\0"+
    "\26\21\1\0\7\21\1\0\2\21\1\0\5\21\2\0"+
    "\12\21\1\0\3\21\1\0\3\21\2\0\1\21\17\0"+
    "\4\21\2\0\12\65\11\0\7\21\1\0\3\21\1\0"+
    "\10\21\2\0\2\21\2\0\26\21\1\0\7\21\1\0"+
    "\2\21\1\0\5\21\2\0\11\21\2\0\2\21\2\0"+
    "\3\21\10\0\2\21\4\0\2\21\1\0\5\21\2\0"+
    "\12\65\1\0\1\21\20\0\2\21\1\0\6\21\3\0"+
    "\3\21\1\0\4\21\3\0\2\21\1\0\1\21\1\0"+
    "\2\21\3\0\2\21\3\0\3\21\3\0\14\21\4\0"+
    "\5\21\3\0\3\21\1\0\4\21\2\0\1\21\6\0"+
    "\1\21\16\0\12\65\20\0\15\21\1\0\3\21\1\0"+
    "\27\21\1\0\20\21\3\0\10\21\1\0\3\21\1\0"+
    "\4\21\7\0\2\21\1\0\3\21\5\0\4\21\2\0"+
    "\12\65\20\0\4\21\1\0\10\21\1\0\3\21\1\0"+
    "\27\21\1\0\12\21\1\0\5\21\2\0\11\21\1\0"+
    "\3\21\1\0\4\21\7\0\2\21\7\0\1\21\1\0"+
    "\4\21\2\0\12\65\1\0\2\21\15\0\4\21\1\0"+
    "\10\21\1\0\3\21\1\0\63\21\1\0\3\21\1\0"+
    "\5\21\5\0\4\21\7\0\5\21\2\0\12\65\12\0"+
    "\6\21\2\0\2\21\1\0\22\21\3\0\30\21\1\0"+
    "\11\21\1\0\1\21\2\0\7\21\3\0\1\21\4\0"+
    "\6\21\1\0\1\21\1\0\10\21\6\0\12\65\2\0"+
    "\2\21\15\0\72\21\5\0\17\21\1\0\12\65\47\0"+
    "\2\21\1\0\1\21\1\0\5\21\1\0\30\21\1\0"+
    "\1\21\1\0\27\21\2\0\5\21\1\0\1\21\1\0"+
    "\6\21\2\0\12\65\2\0\4\21\40\0\1\21\27\0"+
    "\2\21\6\0\12\65\13\0\1\21\1\0\1\21\1\0"+
    "\1\21\4\0\12\21\1\0\44\21\4\0\24\21\1\0"+
    "\22\21\1\0\44\21\11\0\1\21\71\0\100\21\12\65"+
    "\6\0\100\21\12\65\4\21\2\0\46\21\1\0\1\21"+
    "\5\0\1\21\2\0\53\21\1\0\115\21\1\0\4\21"+
    "\2\0\7\21\1\0\1\21\1\0\4\21\2\0\51\21"+
    "\1\0\4\21\2\0\41\21\1\0\4\21\2\0\7\21"+
    "\1\0\1\21\1\0\4\21\2\0\17\21\1\0\71\21"+
    "\1\0\4\21\2\0\103\21\2\0\3\21\40\0\20\21"+
    "\20\0\126\21\2\0\6\21\3\0\u016c\21\2\0\21\21"+
    "\1\1\32\21\5\0\113\21\3\0\13\21\7\0\15\21"+
    "\1\0\7\21\13\0\25\21\13\0\24\21\14\0\15\21"+
    "\1\0\3\21\1\0\2\21\14\0\124\21\3\0\1\21"+
    "\4\0\2\21\2\0\12\65\41\0\3\21\2\0\12\65"+
    "\6\0\131\21\7\0\53\21\5\0\106\21\12\0\37\21"+
    "\1\0\14\21\4\0\14\21\12\0\12\65\36\21\2\0"+
    "\5\21\13\0\54\21\4\0\32\21\6\0\12\65\46\0"+
    "\34\21\4\0\77\21\1\0\35\21\2\0\1\21\12\65"+
    "\6\0\12\65\15\0\1\21\10\0\17\21\101\0\114\21"+
    "\4\0\12\65\21\0\11\21\14\0\60\21\12\65\72\21"+
    "\14\0\70\21\10\0\12\65\3\0\3\21\12\65\44\21"+
    "\2\0\11\21\7\0\53\21\2\0\3\21\20\0\3\21"+
    "\1\0\47\21\5\0\372\21\1\0\33\21\2\0\6\21"+
    "\2\0\46\21\2\0\6\21\2\0\10\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\37\21\2\0\65\21"+
    "\1\0\7\21\1\0\1\21\3\0\3\21\1\0\7\21"+
    "\3\0\4\21\2\0\6\21\4\0\15\21\5\0\3\21"+
    "\1\0\7\21\3\0\13\1\35\0\2\1\5\0\1\1"+
    "\17\0\2\21\23\0\1\21\12\0\1\1\21\0\1\21"+
    "\15\0\1\21\20\0\15\21\63\0\41\21\21\0\1\21"+
    "\4\0\1\21\2\0\12\21\1\0\1\21\3\0\5\21"+
    "\6\0\1\21\1\0\1\21\1\0\1\21\1\0\4\21"+
    "\1\0\13\21\2\0\4\21\5\0\5\21\4\0\1\21"+
    "\21\0\51\21\u022d\0\64\21\26\0\57\21\1\0\57\21"+
    "\1\0\205\21\6\0\11\21\14\0\46\21\1\0\1\21"+
    "\5\0\1\21\2\0\70\21\7\0\1\21\17\0\30\21"+
    "\11\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21"+
    "\1\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21"+
    "\1\0\40\21\57\0\1\21\320\0\1\1\4\0\3\21"+
    "\31\0\17\21\1\0\5\21\2\0\5\21\4\0\126\21"+
    "\2\0\2\21\2\0\3\21\1\0\132\21\1\0\4\21"+
    "\5\0\53\21\1\0\136\21\21\0\33\21\65\0\306\21"+
    "\112\0\360\21\20\0\215\21\103\0\56\21\2\0\15\21"+
    "\3\0\20\21\12\65\2\21\24\0\63\21\1\0\12\21"+
    "\1\0\163\21\45\0\11\21\2\0\147\21\2\0\65\21"+
    "\2\0\5\21\60\0\61\21\30\0\64\21\14\0\106\21"+
    "\12\0\12\65\6\0\30\21\3\0\1\21\1\0\3\21"+
    "\12\65\44\21\2\0\44\21\14\0\35\21\3\0\101\21"+
    "\16\0\1\21\12\65\6\0\20\21\12\65\5\21\1\0"+
    "\67\21\11\0\16\21\2\0\12\65\6\0\27\21\3\0"+
    "\111\21\30\0\3\21\2\0\20\21\2\0\5\21\12\0"+
    "\6\21\2\0\6\21\2\0\6\21\11\0\7\21\1\0"+
    "\7\21\1\0\53\21\1\0\14\21\10\0\173\21\1\0"+
    "\2\21\2\0\12\65\6\0\244\21\14\0\27\21\4\0"+
    "\61\21\4\0\156\21\2\0\152\21\46\0\7\21\14\0"+
    "\5\21\5\0\14\21\1\0\15\21\1\0\5\21\1\0"+
    "\1\21\1\0\2\21\1\0\2\21\1\0\154\21\41\0"+
    "\153\21\22\0\100\21\2\0\66\21\50\0\14\21\4\0"+
    "\20\21\20\0\20\21\3\0\2\21\30\0\3\21\40\0"+
    "\5\21\1\0\207\21\23\0\12\65\7\0\32\21\4\0"+
    "\1\21\1\0\32\21\13\0\131\21\3\0\6\21\2\0"+
    "\6\21\2\0\6\21\2\0\3\21\43\0\14\21\1\0"+
    "\32\21\1\0\23\21\1\0\2\21\1\0\17\21\2\0"+
    "\16\21\42\0\173\21\105\0\65\21\210\0\1\21\202\0"+
    "\35\21\3\0\61\21\17\0\1\21\37\0\40\21\15\0"+
    "\36\21\5\0\53\21\5\0\36\21\2\0\44\21\4\0"+
    "\10\21\1\0\5\21\52\0\236\21\2\0\12\65\6\0"+
    "\44\21\4\0\44\21\4\0\50\21\10\0\64\21\234\0"+
    "\67\21\11\0\26\21\12\0\10\21\230\0\6\21\2\0"+
    "\1\21\1\0\54\21\1\0\2\21\3\0\1\21\2\0"+
    "\27\21\12\0\27\21\11\0\37\21\101\0\23\21\1\0"+
    "\2\21\12\0\26\21\12\0\32\21\106\0\70\21\6\0"+
    "\2\21\100\0\4\21\1\0\2\21\5\0\10\21\1\0"+
    "\3\21\1\0\35\21\2\0\3\21\4\0\1\21\40\0"+
    "\35\21\3\0\35\21\43\0\10\21\1\0\36\21\31\0"+
    "\66\21\12\0\26\21\12\0\23\21\15\0\22\21\156\0"+
    "\111\21\67\0\63\21\15\0\63\21\15\0\50\21\10\0"+
    "\12\65\306\0\35\21\12\0\1\21\10\0\41\21\217\0"+
    "\27\21\11\0\107\21\37\0\12\65\17\0\74\21\25\0"+
    "\31\21\7\0\12\65\6\0\65\21\1\0\12\65\4\0"+
    "\3\21\11\0\44\21\2\0\1\21\11\0\105\21\4\0"+
    "\4\21\3\0\12\65\1\21\1\0\1\21\43\0\22\21"+
    "\1\0\45\21\6\0\1\21\101\0\7\21\1\0\1\21"+
    "\1\0\4\21\1\0\17\21\1\0\12\21\7\0\73\21"+
    "\5\0\12\65\6\0\4\21\1\0\10\21\2\0\2\21"+
    "\2\0\26\21\1\0\7\21\1\0\2\21\1\0\5\21"+
    "\1\0\12\21\2\0\2\21\2\0\3\21\2\0\1\21"+
    "\6\0\1\21\5\0\7\21\2\0\7\21\3\0\5\21"+
    "\213\0\113\21\5\0\12\65\4\0\2\21\40\0\106\21"+
    "\1\0\1\21\10\0\12\65\246\0\66\21\2\0\11\21"+
    "\27\0\6\21\42\0\101\21\3\0\1\21\13\0\12\65"+
    "\46\0\71\21\7\0\12\65\66\0\33\21\2\0\17\21"+
    "\4\0\12\65\306\0\73\21\145\0\100\21\12\65\25\0"+
    "\1\21\240\0\10\21\2\0\56\21\2\0\10\21\1\0"+
    "\2\21\33\0\77\21\10\0\1\21\10\0\112\21\3\0"+
    "\1\21\42\0\71\21\7\0\11\21\1\0\55\21\1\0"+
    "\11\21\17\0\12\65\30\0\36\21\2\0\26\21\1\0"+
    "\16\21\111\0\7\21\1\0\2\21\1\0\54\21\3\0"+
    "\1\21\1\0\2\21\1\0\11\21\10\0\12\65\6\0"+
    "\6\21\1\0\2\21\1\0\45\21\1\0\2\21\1\0"+
    "\6\21\7\0\12\65\u0136\0\27\21\11\0\232\21\146\0"+
    "\157\21\21\0\304\21\274\0\57\21\321\0\107\21\271\0"+
    "\71\21\7\0\37\21\1\0\12\65\146\0\36\21\2\0"+
    "\5\21\13\0\67\21\11\0\4\21\14\0\12\65\11\0"+
    "\25\21\5\0\23\21\260\0\100\21\200\0\113\21\4\0"+
    "\71\21\7\0\21\21\100\0\2\21\1\0\1\21\34\0"+
    "\370\21\10\0\363\21\15\0\37\21\61\0\3\21\21\0"+
    "\4\21\10\0\u018c\21\4\0\153\21\5\0\15\21\3\0"+
    "\11\21\7\0\12\21\3\0\2\21\306\0\5\21\3\0"+
    "\6\21\10\0\10\21\2\0\7\21\36\0\4\21\224\0"+
    "\3\21\273\0\125\21\1\0\107\21\1\0\2\21\2\0"+
    "\1\21\2\0\2\21\2\0\4\21\1\0\14\21\1\0"+
    "\1\21\1\0\7\21\1\0\101\21\1\0\4\21\2\0"+
    "\10\21\1\0\7\21\1\0\34\21\1\0\4\21\1\0"+
    "\5\21\1\0\1\21\3\0\7\21\1\0\u0154\21\2\0"+
    "\31\21\1\0\31\21\1\0\37\21\1\0\31\21\1\0"+
    "\37\21\1\0\31\21\1\0\37\21\1\0\31\21\1\0"+
    "\37\21\1\0\31\21\1\0\10\21\2\0\62\65\67\21"+
    "\4\0\62\21\10\0\1\21\16\0\1\21\26\0\5\21"+
    "\1\0\17\21\120\0\7\21\1\0\21\21\2\0\7\21"+
    "\1\0\2\21\1\0\5\21\325\0\55\21\3\0\16\21"+
    "\2\0\12\65\4\0\1\21\u0171\0\60\21\12\65\6\0"+
    "\305\21\13\0\7\21\51\0\114\21\4\0\12\65\246\0"+
    "\4\21\1\0\33\21\1\0\2\21\1\0\1\21\2\0"+
    "\1\21\1\0\12\21\1\0\4\21\1\0\1\21\1\0"+
    "\1\21\6\0\1\21\4\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\3\21\1\0\2\21\1\0\1\21\2\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\2\21\1\0\1\21\2\0\4\21\1\0"+
    "\7\21\1\0\4\21\1\0\4\21\1\0\1\21\1\0"+
    "\12\21\1\0\21\21\5\0\3\21\1\0\5\21\1\0"+
    "\21\21\164\0\32\21\6\0\32\21\6\0\32\21\166\0"+
    "\327\21\51\0\65\21\13\0\336\21\2\0\u0182\21\16\0"+
    "\u0131\21\37\0\36\21\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\1\13\1\14\1\15\3\16\1\17"+
    "\1\20\1\21\1\22\1\23\13\0\2\16\1\24\11\0"+
    "\2\16\12\0\2\16\13\0\2\16\13\0\2\16\13\0"+
    "\2\16\15\0\2\16\15\0\1\25\1\0\2\16\13\0"+
    "\1\26\2\0\2\16\15\0\2\16\1\27\14\0\2\16"+
    "\14\0\1\30\1\31\14\0\2\16\1\32\4\0\1\33"+
    "\5\0\1\34\1\35\1\36\2\0\1\37\3\0\1\40"+
    "\10\0\1\41\1\0\1\42\2\0\1\43\3\0\1\44"+
    "\2\0\1\45\3\0\1\46\1\0\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\66\0\242\0\66\0\66"+
    "\0\66\0\66\0\66\0\330\0\u010e\0\66\0\66\0\66"+
    "\0\330\0\u0144\0\u017a\0\66\0\u01b0\0\66\0\66\0\66"+
    "\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360"+
    "\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\66\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba"+
    "\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a"+
    "\0\66\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4"+
    "\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\66"+
    "\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e"+
    "\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe"+
    "\0\u1df4\0\u1e2a\0\u1e60\0\66\0\u1e96\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448"+
    "\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8"+
    "\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c\0\66\0\u2772"+
    "\0\u27a8\0\u27de\0\u2814\0\66\0\u284a\0\u2880\0\u28b6\0\u28ec"+
    "\0\u2922\0\66\0\330\0\330\0\u2958\0\u298e\0\66\0\u29c4"+
    "\0\u29fa\0\u2a30\0\66\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\u2be0\0\66\0\u2c16\0\66\0\u2c4c\0\u2c82"+
    "\0\66\0\u2cb8\0\u2cee\0\u2d24\0\66\0\u2d5a\0\u2d90\0\66"+
    "\0\u2dc6\0\u2dfc\0\u2e32\0\66\0\u2e68\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\5\21"+
    "\1\22\2\21\1\23\13\21\1\24\1\25\1\26\4\21"+
    "\1\22\1\23\6\21\1\27\1\30\1\21\70\0\1\3"+
    "\63\0\1\31\3\32\1\31\1\0\5\31\2\33\5\31"+
    "\1\34\1\31\1\35\1\36\3\31\1\37\1\40\1\41"+
    "\1\31\1\42\3\31\1\43\23\31\1\33\13\0\2\21"+
    "\3\0\24\21\1\0\1\25\1\0\14\21\2\0\1\21"+
    "\13\0\2\15\3\0\24\21\1\0\1\25\1\0\14\21"+
    "\2\0\1\21\13\0\2\21\3\0\10\21\1\44\13\21"+
    "\1\0\1\25\1\0\5\21\1\44\6\21\2\0\1\21"+
    "\13\0\2\21\3\0\13\21\1\45\10\21\1\0\1\25"+
    "\1\0\7\21\1\45\4\21\2\0\1\21\13\0\2\25"+
    "\3\0\24\25\1\0\1\25\1\0\14\25\2\0\1\25"+
    "\5\31\1\46\61\31\3\32\1\31\1\46\5\31\2\33"+
    "\5\31\1\34\1\31\1\35\1\36\3\31\1\37\1\40"+
    "\1\41\1\31\1\42\3\31\1\43\23\31\1\33\5\31"+
    "\1\46\5\31\2\47\50\31\1\47\5\31\1\46\30\31"+
    "\1\50\34\31\1\46\23\31\1\51\41\31\1\46\16\31"+
    "\1\52\46\31\1\46\26\31\1\53\36\31\1\46\26\31"+
    "\1\54\36\31\1\46\33\31\1\55\31\31\1\46\12\31"+
    "\1\56\52\31\1\46\31\31\1\57\26\31\13\0\2\21"+
    "\3\0\13\21\1\60\10\21\1\0\1\25\1\0\7\21"+
    "\1\60\4\21\2\0\1\21\13\0\2\21\3\0\10\21"+
    "\1\61\13\21\1\0\1\25\1\0\5\21\1\61\6\21"+
    "\2\0\1\21\5\31\1\46\5\31\2\62\50\31\1\62"+
    "\5\31\1\46\16\31\1\63\46\31\1\46\22\31\1\64"+
    "\42\31\1\46\14\31\1\65\50\31\1\46\20\31\1\66"+
    "\44\31\1\46\15\31\1\67\47\31\1\46\16\31\1\70"+
    "\46\31\1\46\30\31\1\71\1\72\33\31\1\46\33\31"+
    "\1\73\24\31\13\0\2\21\3\0\24\21\1\0\1\25"+
    "\1\0\1\74\13\21\2\0\1\21\13\0\2\21\3\0"+
    "\24\21\1\0\1\25\1\0\1\75\13\21\2\0\1\21"+
    "\5\31\1\46\5\31\2\76\50\31\1\76\5\31\1\46"+
    "\12\31\1\77\2\31\1\100\47\31\1\46\24\31\1\101"+
    "\40\31\1\46\21\31\1\102\43\31\1\46\22\31\1\103"+
    "\42\31\1\46\22\31\1\104\42\31\1\46\34\31\1\105"+
    "\30\31\1\46\12\31\1\106\52\31\1\46\31\31\1\107"+
    "\33\31\1\46\12\31\1\110\45\31\13\0\2\21\3\0"+
    "\17\21\1\111\4\21\1\0\1\25\1\0\11\21\1\111"+
    "\2\21\2\0\1\21\13\0\2\21\3\0\17\21\1\112"+
    "\4\21\1\0\1\25\1\0\11\21\1\112\2\21\2\0"+
    "\1\21\5\31\1\46\3\31\1\113\61\31\1\46\30\31"+
    "\1\114\34\31\1\46\16\31\1\115\46\31\1\46\22\31"+
    "\1\116\42\31\1\46\12\31\1\117\52\31\1\46\25\31"+
    "\1\120\37\31\1\46\17\31\1\121\45\31\1\46\26\31"+
    "\1\122\36\31\1\46\24\31\1\123\40\31\1\46\35\31"+
    "\1\124\27\31\1\46\30\31\1\125\27\31\13\0\2\21"+
    "\3\0\14\21\1\126\7\21\1\0\1\25\1\0\10\21"+
    "\1\126\3\21\2\0\1\21\13\0\2\21\3\0\14\21"+
    "\1\127\7\21\1\0\1\25\1\0\10\21\1\127\3\21"+
    "\2\0\1\21\5\31\1\46\5\31\2\130\50\31\1\130"+
    "\5\31\1\46\41\31\1\131\23\31\1\46\25\31\1\132"+
    "\37\31\1\46\25\31\1\133\37\31\1\46\41\31\1\134"+
    "\23\31\1\46\41\31\1\135\23\31\1\46\22\31\1\136"+
    "\42\31\1\46\41\31\1\137\23\31\1\46\16\31\1\140"+
    "\46\31\1\46\26\31\1\141\36\31\1\46\22\31\1\142"+
    "\35\31\13\0\2\21\3\0\11\21\1\143\12\21\1\0"+
    "\1\25\1\0\6\21\1\143\5\21\2\0\1\21\13\0"+
    "\2\21\3\0\11\21\1\144\12\21\1\0\1\25\1\0"+
    "\6\21\1\144\5\21\2\0\1\21\5\31\1\46\5\31"+
    "\2\145\50\31\1\145\5\31\1\46\33\31\1\146\31\31"+
    "\1\46\14\31\1\147\50\31\1\46\12\31\1\150\52\31"+
    "\1\46\14\31\1\151\7\31\1\152\40\31\1\46\33\31"+
    "\1\153\31\31\1\46\14\31\1\154\50\31\1\46\17\31"+
    "\1\155\7\31\1\156\35\31\1\46\32\31\1\157\32\31"+
    "\1\46\30\31\1\160\34\31\1\46\26\31\1\161\31\31"+
    "\13\0\2\21\3\0\10\21\1\162\13\21\1\0\1\25"+
    "\1\0\5\21\1\162\6\21\2\0\1\21\13\0\2\21"+
    "\3\0\10\21\1\163\13\21\1\0\1\25\1\0\5\21"+
    "\1\163\6\21\2\0\1\21\5\31\1\46\3\31\1\164"+
    "\61\31\1\46\31\31\1\165\33\31\1\46\22\31\1\166"+
    "\42\31\1\46\30\31\1\167\34\31\1\46\30\31\1\170"+
    "\34\31\1\46\26\31\1\171\36\31\1\46\31\31\1\172"+
    "\33\31\1\46\12\31\1\173\52\31\1\46\26\31\1\174"+
    "\36\31\1\46\12\31\1\175\52\31\1\46\30\31\1\176"+
    "\34\31\1\46\15\31\1\177\43\31\3\200\1\31\1\201"+
    "\41\31\1\202\16\31\13\0\2\21\3\0\2\21\1\203"+
    "\21\21\1\0\1\25\1\0\1\21\1\203\12\21\2\0"+
    "\1\21\13\0\2\21\3\0\2\21\1\204\21\21\1\0"+
    "\1\25\1\0\1\21\1\204\12\21\2\0\1\21\5\31"+
    "\1\46\5\31\2\205\50\31\1\205\5\31\1\46\33\31"+
    "\1\206\31\31\1\46\12\31\1\207\52\31\1\46\41\31"+
    "\1\210\23\31\1\46\16\31\1\211\46\31\1\46\15\31"+
    "\1\212\47\31\1\46\33\31\1\213\31\31\1\46\30\31"+
    "\1\214\34\31\1\46\30\31\1\215\34\31\1\46\31\31"+
    "\1\216\33\31\1\46\26\31\1\217\32\31\3\177\1\31"+
    "\1\220\61\31\3\200\1\31\1\201\65\31\1\46\12\31"+
    "\1\221\12\31\1\222\32\31\13\0\2\21\3\0\10\21"+
    "\1\223\13\21\1\0\1\25\1\0\5\21\1\223\6\21"+
    "\2\0\1\21\13\0\2\21\3\0\10\21\1\224\13\21"+
    "\1\0\1\25\1\0\5\21\1\224\6\21\2\0\1\21"+
    "\5\31\1\46\5\31\2\225\50\31\1\225\5\31\1\46"+
    "\12\31\1\226\52\31\1\46\23\31\1\227\41\31\1\46"+
    "\33\31\1\230\31\31\1\46\12\31\1\231\52\31\1\46"+
    "\22\31\1\232\42\31\1\46\12\31\1\233\52\31\1\46"+
    "\41\31\1\234\23\31\1\46\24\31\1\235\40\31\1\46"+
    "\31\31\1\236\33\31\1\46\31\31\1\237\33\31\1\46"+
    "\25\31\1\240\37\31\1\46\33\31\1\241\24\31\13\0"+
    "\2\21\3\0\20\21\1\242\3\21\1\0\1\25\1\0"+
    "\12\21\1\242\1\21\2\0\1\21\13\0\2\21\3\0"+
    "\20\21\1\243\3\21\1\0\1\25\1\0\12\21\1\243"+
    "\1\21\2\0\1\21\1\31\3\225\1\31\1\244\65\31"+
    "\1\46\30\31\1\245\34\31\1\46\16\31\1\246\46\31"+
    "\1\46\31\31\1\247\33\31\1\46\14\31\1\250\50\31"+
    "\1\46\17\31\1\251\45\31\1\46\30\31\1\252\34\31"+
    "\1\46\33\31\1\253\31\31\1\46\33\31\1\254\31\31"+
    "\1\46\35\31\1\255\27\31\1\46\41\31\1\256\23\31"+
    "\1\46\32\31\1\257\32\31\1\46\16\31\1\260\41\31"+
    "\13\0\2\21\3\0\21\21\1\261\2\21\1\0\1\25"+
    "\1\0\13\21\1\261\2\0\1\21\13\0\2\21\3\0"+
    "\21\21\1\262\2\21\1\0\1\25\1\0\13\21\1\262"+
    "\2\0\1\21\5\31\1\46\22\31\1\263\42\31\1\46"+
    "\31\31\1\264\33\31\1\46\33\31\1\265\31\31\1\46"+
    "\22\31\1\266\42\31\1\46\22\31\1\267\42\31\1\46"+
    "\22\31\1\270\42\31\1\46\31\31\1\271\33\31\1\46"+
    "\23\31\1\272\41\31\1\46\26\31\1\273\36\31\1\46"+
    "\17\31\1\274\45\31\1\46\22\31\1\275\42\31\1\46"+
    "\34\31\1\276\23\31\13\0\2\21\3\0\3\21\1\277"+
    "\20\21\1\0\1\25\1\0\2\21\1\277\11\21\2\0"+
    "\1\21\13\0\2\21\3\0\3\21\1\300\20\21\1\0"+
    "\1\25\1\0\2\21\1\300\11\21\2\0\1\21\5\31"+
    "\1\46\26\31\1\301\36\31\1\46\41\31\1\302\23\31"+
    "\1\46\12\31\1\303\52\31\1\46\26\31\1\304\36\31"+
    "\1\46\14\31\1\305\50\31\1\46\26\31\1\306\36\31"+
    "\1\46\33\31\1\307\31\31\1\46\12\31\1\310\52\31"+
    "\1\46\30\31\1\311\34\31\1\46\26\31\1\312\36\31"+
    "\1\46\20\31\1\313\44\31\1\46\26\31\1\314\31\31"+
    "\13\0\2\21\3\0\4\21\1\315\17\21\1\0\1\25"+
    "\1\0\3\21\1\315\10\21\2\0\1\21\13\0\2\21"+
    "\3\0\4\21\1\316\17\21\1\0\1\25\1\0\3\21"+
    "\1\316\10\21\2\0\1\21\1\31\3\301\1\31\1\317"+
    "\65\31\1\46\33\31\1\320\31\31\1\46\30\31\1\321"+
    "\34\31\1\46\25\31\1\322\37\31\1\46\12\31\1\323"+
    "\46\31\3\306\1\31\1\324\65\31\1\46\12\31\1\325"+
    "\52\31\1\46\30\31\1\326\34\31\1\46\15\31\1\327"+
    "\47\31\1\46\30\31\1\330\34\31\1\46\33\31\1\331"+
    "\25\31\3\314\1\31\1\332\60\31\13\0\2\21\3\0"+
    "\17\21\1\333\4\21\1\0\1\25\1\0\11\21\1\333"+
    "\2\21\2\0\1\21\13\0\2\21\3\0\17\21\1\334"+
    "\4\21\1\0\1\25\1\0\11\21\1\334\2\21\2\0"+
    "\1\21\5\31\1\46\31\31\1\335\33\31\1\46\22\31"+
    "\1\336\36\31\3\322\1\31\1\337\65\31\1\46\14\31"+
    "\1\340\50\31\1\46\30\31\1\341\34\31\1\46\22\31"+
    "\1\342\36\31\3\327\1\31\1\343\65\31\1\46\24\31"+
    "\1\344\40\31\1\46\26\31\1\345\36\31\1\46\33\31"+
    "\1\346\31\31\1\46\26\31\1\347\36\31\1\46\22\31"+
    "\1\350\42\31\1\46\22\31\1\351\42\31\1\46\26\31"+
    "\1\352\36\31\1\46\33\31\1\353\25\31\3\345\1\31"+
    "\1\354\65\31\1\46\12\31\1\355\46\31\3\347\1\31"+
    "\1\356\65\31\1\46\26\31\1\357\36\31\1\46\26\31"+
    "\1\360\32\31\3\352\1\31\1\361\65\31\1\46\23\31"+
    "\1\362\41\31\1\46\30\31\1\363\34\31\1\46\25\31"+
    "\1\364\33\31\3\360\1\31\1\365\65\31\1\46\12\31"+
    "\1\366\52\31\1\46\22\31\1\367\36\31\3\364\1\31"+
    "\1\370\65\31\1\46\30\31\1\371\34\31\1\46\26\31"+
    "\1\372\36\31\1\46\22\31\1\373\36\31\3\372\1\31"+
    "\1\374\65\31\1\46\26\31\1\375\32\31\3\375\1\31"+
    "\1\376\60\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11934];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\5\11\2\1\3\11"+
    "\3\1\1\11\1\1\3\11\13\0\2\1\1\11\11\0"+
    "\2\1\12\0\2\1\13\0\2\1\13\0\2\1\13\0"+
    "\2\1\15\0\2\1\15\0\1\11\1\0\2\1\13\0"+
    "\1\11\2\0\2\1\15\0\2\1\1\11\14\0\2\1"+
    "\14\0\2\1\14\0\2\1\1\11\4\0\1\11\5\0"+
    "\1\11\2\1\2\0\1\11\3\0\1\11\10\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

	private Symbol symbol(int type) {
		return new Symbol(type, yyline + 1, yycolumn + 1);
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline + 1, yycolumn + 1, value);
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormsLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 40: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 41: break;
          case 3:
            { return symbol(EXCL, yytext());
            }
            // fall through
          case 42: break;
          case 4:
            { return symbol(QUOTE, yytext());
            }
            // fall through
          case 43: break;
          case 5:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 44: break;
          case 6:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 45: break;
          case 7:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 46: break;
          case 8:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 47: break;
          case 9:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 48: break;
          case 10:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 49: break;
          case 11:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 50: break;
          case 12:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 51: break;
          case 13:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 52: break;
          case 14:
            { return symbol(PARAM, yytext());
            }
            // fall through
          case 53: break;
          case 15:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 54: break;
          case 16:
            { return symbol(SYMB, yytext());
            }
            // fall through
          case 55: break;
          case 17:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 56: break;
          case 18:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 57: break;
          case 19:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 58: break;
          case 20:
            { return symbol(STR, yytext());
            }
            // fall through
          case 59: break;
          case 21:
            { return symbol(USER, yytext());
            }
            // fall through
          case 60: break;
          case 22:
            { return symbol(PASS, yytext());
            }
            // fall through
          case 61: break;
          case 23:
            { return symbol(DATE, yytext());
            }
            // fall through
          case 62: break;
          case 24:
            { return symbol(FIN_SOL, yytext());
            }
            // fall through
          case 63: break;
          case 25:
            { return symbol(INIT_SOL, yytext());
            }
            // fall through
          case 64: break;
          case 26:
            { return symbol(ADD_USER, yytext());
            }
            // fall through
          case 65: break;
          case 27:
            { return symbol(LOGIN, yytext());
            }
            // fall through
          case 66: break;
          case 28:
            { return symbol(NEW_USER, yytext());
            }
            // fall through
          case 67: break;
          case 29:
            { return symbol(FIN_MANY_SOL, yytext());
            }
            // fall through
          case 68: break;
          case 30:
            { return symbol(INIT_MANY_SOL, yytext());
            }
            // fall through
          case 69: break;
          case 31:
            { return symbol(DATE_ADD, yytext());
            }
            // fall through
          case 70: break;
          case 32:
            { return symbol(NEW_PASS, yytext());
            }
            // fall through
          case 71: break;
          case 33:
            { return symbol(OLD_USER, yytext());
            }
            // fall through
          case 72: break;
          case 34:
            { return symbol(DEL_USER, yytext());
            }
            // fall through
          case 73: break;
          case 35:
            { return symbol(NEW_FORM, yytext());
            }
            // fall through
          case 74: break;
          case 36:
            { return symbol(EDIT_USER, yytext());
            }
            // fall through
          case 75: break;
          case 37:
            { return symbol(DATE_MOD, yytext());
            }
            // fall through
          case 76: break;
          case 38:
            { return symbol(CRED, yytext());
            }
            // fall through
          case 77: break;
          case 39:
            { return symbol(PARAM_F, yytext());
            }
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java FormsLex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        FormsLex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new FormsLex(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
