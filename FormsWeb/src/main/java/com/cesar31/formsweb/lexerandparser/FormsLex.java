// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: forms.flex

package com.cesar31.formsweb.lexerandparser;

import static com.cesar31.formsweb.lexerandparser.FormsParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class FormsLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\7\0\1\7\1\6\2\0\12\10"+
    "\1\11\1\0\1\12\1\0\1\13\2\0\1\14\1\10"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\10"+
    "\1\24\1\25\1\26\1\27\1\30\1\10\1\31\1\32"+
    "\1\33\1\34\1\10\1\35\3\10\1\36\1\0\1\37"+
    "\1\0\1\40\1\0\2\10\1\41\1\42\1\10\1\43"+
    "\2\10\1\44\2\10\1\45\1\10\1\46\1\47\3\10"+
    "\1\50\1\33\1\51\5\10\1\52\1\0\1\53\7\0"+
    "\1\1\32\0\1\1\11\0\1\54\12\0\1\54\4\0"+
    "\1\54\5\0\27\54\1\0\37\54\1\0\u01ca\54\4\0"+
    "\14\54\16\0\5\54\7\0\1\54\1\0\1\54\21\0"+
    "\165\54\1\0\2\54\2\0\4\54\1\0\1\54\6\0"+
    "\1\54\1\0\3\54\1\0\1\54\1\0\24\54\1\0"+
    "\123\54\1\0\213\54\1\0\255\54\1\0\46\54\2\0"+
    "\1\54\6\0\51\54\10\0\55\54\1\0\1\54\1\0"+
    "\2\54\1\0\2\54\1\0\1\54\10\0\33\54\4\0"+
    "\4\54\35\0\13\54\5\0\112\54\4\0\146\54\1\0"+
    "\10\54\2\0\12\54\1\0\23\54\2\0\1\54\20\0"+
    "\73\54\2\0\145\54\16\0\66\54\4\0\1\54\2\0"+
    "\1\54\2\0\56\54\22\0\34\54\4\0\13\54\65\0"+
    "\25\54\1\0\10\54\25\0\17\54\1\0\201\54\2\0"+
    "\12\54\1\0\23\54\1\0\10\54\2\0\2\54\2\0"+
    "\26\54\1\0\7\54\1\0\1\54\3\0\4\54\2\0"+
    "\11\54\2\0\2\54\2\0\4\54\10\0\1\54\4\0"+
    "\2\54\1\0\5\54\2\0\14\54\12\0\1\54\1\0"+
    "\1\54\2\0\3\54\1\0\6\54\4\0\2\54\2\0"+
    "\26\54\1\0\7\54\1\0\2\54\1\0\2\54\1\0"+
    "\2\54\2\0\1\54\1\0\5\54\4\0\2\54\2\0"+
    "\3\54\3\0\1\54\7\0\4\54\1\0\1\54\7\0"+
    "\20\54\13\0\3\54\1\0\11\54\1\0\3\54\1\0"+
    "\26\54\1\0\7\54\1\0\2\54\1\0\5\54\2\0"+
    "\12\54\1\0\3\54\1\0\3\54\2\0\1\54\17\0"+
    "\4\54\2\0\12\54\11\0\7\54\1\0\3\54\1\0"+
    "\10\54\2\0\2\54\2\0\26\54\1\0\7\54\1\0"+
    "\2\54\1\0\5\54\2\0\11\54\2\0\2\54\2\0"+
    "\3\54\10\0\2\54\4\0\2\54\1\0\5\54\2\0"+
    "\12\54\1\0\1\54\20\0\2\54\1\0\6\54\3\0"+
    "\3\54\1\0\4\54\3\0\2\54\1\0\1\54\1\0"+
    "\2\54\3\0\2\54\3\0\3\54\3\0\14\54\4\0"+
    "\5\54\3\0\3\54\1\0\4\54\2\0\1\54\6\0"+
    "\1\54\16\0\12\54\20\0\15\54\1\0\3\54\1\0"+
    "\27\54\1\0\20\54\3\0\10\54\1\0\3\54\1\0"+
    "\4\54\7\0\2\54\1\0\3\54\5\0\4\54\2\0"+
    "\12\54\20\0\4\54\1\0\10\54\1\0\3\54\1\0"+
    "\27\54\1\0\12\54\1\0\5\54\2\0\11\54\1\0"+
    "\3\54\1\0\4\54\7\0\2\54\7\0\1\54\1\0"+
    "\4\54\2\0\12\54\1\0\2\54\15\0\4\54\1\0"+
    "\10\54\1\0\3\54\1\0\63\54\1\0\3\54\1\0"+
    "\5\54\5\0\4\54\7\0\5\54\2\0\12\54\12\0"+
    "\6\54\2\0\2\54\1\0\22\54\3\0\30\54\1\0"+
    "\11\54\1\0\1\54\2\0\7\54\3\0\1\54\4\0"+
    "\6\54\1\0\1\54\1\0\10\54\6\0\12\54\2\0"+
    "\2\54\15\0\72\54\5\0\17\54\1\0\12\54\47\0"+
    "\2\54\1\0\1\54\1\0\5\54\1\0\30\54\1\0"+
    "\1\54\1\0\27\54\2\0\5\54\1\0\1\54\1\0"+
    "\6\54\2\0\12\54\2\0\4\54\40\0\1\54\27\0"+
    "\2\54\6\0\12\54\13\0\1\54\1\0\1\54\1\0"+
    "\1\54\4\0\12\54\1\0\44\54\4\0\24\54\1\0"+
    "\22\54\1\0\44\54\11\0\1\54\71\0\112\54\6\0"+
    "\116\54\2\0\46\54\1\0\1\54\5\0\1\54\2\0"+
    "\53\54\1\0\115\54\1\0\4\54\2\0\7\54\1\0"+
    "\1\54\1\0\4\54\2\0\51\54\1\0\4\54\2\0"+
    "\41\54\1\0\4\54\2\0\7\54\1\0\1\54\1\0"+
    "\4\54\2\0\17\54\1\0\71\54\1\0\4\54\2\0"+
    "\103\54\2\0\3\54\40\0\20\54\20\0\126\54\2\0"+
    "\6\54\3\0\u016c\54\2\0\21\54\1\1\32\54\5\0"+
    "\113\54\3\0\13\54\7\0\15\54\1\0\7\54\13\0"+
    "\25\54\13\0\24\54\14\0\15\54\1\0\3\54\1\0"+
    "\2\54\14\0\124\54\3\0\1\54\4\0\2\54\2\0"+
    "\12\54\41\0\3\54\2\0\12\54\6\0\131\54\7\0"+
    "\53\54\5\0\106\54\12\0\37\54\1\0\14\54\4\0"+
    "\14\54\12\0\50\54\2\0\5\54\13\0\54\54\4\0"+
    "\32\54\6\0\12\54\46\0\34\54\4\0\77\54\1\0"+
    "\35\54\2\0\13\54\6\0\12\54\15\0\1\54\10\0"+
    "\17\54\101\0\114\54\4\0\12\54\21\0\11\54\14\0"+
    "\164\54\14\0\70\54\10\0\12\54\3\0\61\54\2\0"+
    "\11\54\7\0\53\54\2\0\3\54\20\0\3\54\1\0"+
    "\47\54\5\0\372\54\1\0\33\54\2\0\6\54\2\0"+
    "\46\54\2\0\6\54\2\0\10\54\1\0\1\54\1\0"+
    "\1\54\1\0\1\54\1\0\37\54\2\0\65\54\1\0"+
    "\7\54\1\0\1\54\3\0\3\54\1\0\7\54\3\0"+
    "\4\54\2\0\6\54\4\0\15\54\5\0\3\54\1\0"+
    "\7\54\3\0\13\1\35\0\2\1\5\0\1\1\17\0"+
    "\2\54\23\0\1\54\12\0\1\1\21\0\1\54\15\0"+
    "\1\54\20\0\15\54\63\0\41\54\21\0\1\54\4\0"+
    "\1\54\2\0\12\54\1\0\1\54\3\0\5\54\6\0"+
    "\1\54\1\0\1\54\1\0\1\54\1\0\4\54\1\0"+
    "\13\54\2\0\4\54\5\0\5\54\4\0\1\54\21\0"+
    "\51\54\u022d\0\64\54\26\0\57\54\1\0\57\54\1\0"+
    "\205\54\6\0\11\54\14\0\46\54\1\0\1\54\5\0"+
    "\1\54\2\0\70\54\7\0\1\54\17\0\30\54\11\0"+
    "\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0"+
    "\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0"+
    "\40\54\57\0\1\54\320\0\1\1\4\0\3\54\31\0"+
    "\17\54\1\0\5\54\2\0\5\54\4\0\126\54\2\0"+
    "\2\54\2\0\3\54\1\0\132\54\1\0\4\54\5\0"+
    "\53\54\1\0\136\54\21\0\33\54\65\0\306\54\112\0"+
    "\360\54\20\0\215\54\103\0\56\54\2\0\15\54\3\0"+
    "\34\54\24\0\63\54\1\0\12\54\1\0\163\54\45\0"+
    "\11\54\2\0\147\54\2\0\65\54\2\0\5\54\60\0"+
    "\61\54\30\0\64\54\14\0\106\54\12\0\12\54\6\0"+
    "\30\54\3\0\1\54\1\0\61\54\2\0\44\54\14\0"+
    "\35\54\3\0\101\54\16\0\13\54\6\0\37\54\1\0"+
    "\67\54\11\0\16\54\2\0\12\54\6\0\27\54\3\0"+
    "\111\54\30\0\3\54\2\0\20\54\2\0\5\54\12\0"+
    "\6\54\2\0\6\54\2\0\6\54\11\0\7\54\1\0"+
    "\7\54\1\0\53\54\1\0\14\54\10\0\173\54\1\0"+
    "\2\54\2\0\12\54\6\0\244\54\14\0\27\54\4\0"+
    "\61\54\4\0\156\54\2\0\152\54\46\0\7\54\14\0"+
    "\5\54\5\0\14\54\1\0\15\54\1\0\5\54\1\0"+
    "\1\54\1\0\2\54\1\0\2\54\1\0\154\54\41\0"+
    "\153\54\22\0\100\54\2\0\66\54\50\0\14\54\4\0"+
    "\20\54\20\0\20\54\3\0\2\54\30\0\3\54\40\0"+
    "\5\54\1\0\207\54\23\0\12\54\7\0\32\54\4\0"+
    "\1\54\1\0\32\54\13\0\131\54\3\0\6\54\2\0"+
    "\6\54\2\0\6\54\2\0\3\54\43\0\14\54\1\0"+
    "\32\54\1\0\23\54\1\0\2\54\1\0\17\54\2\0"+
    "\16\54\42\0\173\54\105\0\65\54\210\0\1\54\202\0"+
    "\35\54\3\0\61\54\17\0\1\54\37\0\40\54\15\0"+
    "\36\54\5\0\53\54\5\0\36\54\2\0\44\54\4\0"+
    "\10\54\1\0\5\54\52\0\236\54\2\0\12\54\6\0"+
    "\44\54\4\0\44\54\4\0\50\54\10\0\64\54\234\0"+
    "\67\54\11\0\26\54\12\0\10\54\230\0\6\54\2\0"+
    "\1\54\1\0\54\54\1\0\2\54\3\0\1\54\2\0"+
    "\27\54\12\0\27\54\11\0\37\54\101\0\23\54\1\0"+
    "\2\54\12\0\26\54\12\0\32\54\106\0\70\54\6\0"+
    "\2\54\100\0\4\54\1\0\2\54\5\0\10\54\1\0"+
    "\3\54\1\0\35\54\2\0\3\54\4\0\1\54\40\0"+
    "\35\54\3\0\35\54\43\0\10\54\1\0\36\54\31\0"+
    "\66\54\12\0\26\54\12\0\23\54\15\0\22\54\156\0"+
    "\111\54\67\0\63\54\15\0\63\54\15\0\50\54\10\0"+
    "\12\54\306\0\35\54\12\0\1\54\10\0\41\54\217\0"+
    "\27\54\11\0\107\54\37\0\12\54\17\0\74\54\25\0"+
    "\31\54\7\0\12\54\6\0\65\54\1\0\12\54\4\0"+
    "\3\54\11\0\44\54\2\0\1\54\11\0\105\54\4\0"+
    "\4\54\3\0\13\54\1\0\1\54\43\0\22\54\1\0"+
    "\45\54\6\0\1\54\101\0\7\54\1\0\1\54\1\0"+
    "\4\54\1\0\17\54\1\0\12\54\7\0\73\54\5\0"+
    "\12\54\6\0\4\54\1\0\10\54\2\0\2\54\2\0"+
    "\26\54\1\0\7\54\1\0\2\54\1\0\5\54\1\0"+
    "\12\54\2\0\2\54\2\0\3\54\2\0\1\54\6\0"+
    "\1\54\5\0\7\54\2\0\7\54\3\0\5\54\213\0"+
    "\113\54\5\0\12\54\4\0\2\54\40\0\106\54\1\0"+
    "\1\54\10\0\12\54\246\0\66\54\2\0\11\54\27\0"+
    "\6\54\42\0\101\54\3\0\1\54\13\0\12\54\46\0"+
    "\71\54\7\0\12\54\66\0\33\54\2\0\17\54\4\0"+
    "\12\54\306\0\73\54\145\0\112\54\25\0\1\54\240\0"+
    "\10\54\2\0\56\54\2\0\10\54\1\0\2\54\33\0"+
    "\77\54\10\0\1\54\10\0\112\54\3\0\1\54\42\0"+
    "\71\54\7\0\11\54\1\0\55\54\1\0\11\54\17\0"+
    "\12\54\30\0\36\54\2\0\26\54\1\0\16\54\111\0"+
    "\7\54\1\0\2\54\1\0\54\54\3\0\1\54\1\0"+
    "\2\54\1\0\11\54\10\0\12\54\6\0\6\54\1\0"+
    "\2\54\1\0\45\54\1\0\2\54\1\0\6\54\7\0"+
    "\12\54\u0136\0\27\54\11\0\232\54\146\0\157\54\21\0"+
    "\304\54\274\0\57\54\321\0\107\54\271\0\71\54\7\0"+
    "\37\54\1\0\12\54\146\0\36\54\2\0\5\54\13\0"+
    "\67\54\11\0\4\54\14\0\12\54\11\0\25\54\5\0"+
    "\23\54\260\0\100\54\200\0\113\54\4\0\71\54\7\0"+
    "\21\54\100\0\2\54\1\0\1\54\34\0\370\54\10\0"+
    "\363\54\15\0\37\54\61\0\3\54\21\0\4\54\10\0"+
    "\u018c\54\4\0\153\54\5\0\15\54\3\0\11\54\7\0"+
    "\12\54\3\0\2\54\306\0\5\54\3\0\6\54\10\0"+
    "\10\54\2\0\7\54\36\0\4\54\224\0\3\54\273\0"+
    "\125\54\1\0\107\54\1\0\2\54\2\0\1\54\2\0"+
    "\2\54\2\0\4\54\1\0\14\54\1\0\1\54\1\0"+
    "\7\54\1\0\101\54\1\0\4\54\2\0\10\54\1\0"+
    "\7\54\1\0\34\54\1\0\4\54\1\0\5\54\1\0"+
    "\1\54\3\0\7\54\1\0\u0154\54\2\0\31\54\1\0"+
    "\31\54\1\0\37\54\1\0\31\54\1\0\37\54\1\0"+
    "\31\54\1\0\37\54\1\0\31\54\1\0\37\54\1\0"+
    "\31\54\1\0\10\54\2\0\151\54\4\0\62\54\10\0"+
    "\1\54\16\0\1\54\26\0\5\54\1\0\17\54\120\0"+
    "\7\54\1\0\21\54\2\0\7\54\1\0\2\54\1\0"+
    "\5\54\325\0\55\54\3\0\16\54\2\0\12\54\4\0"+
    "\1\54\u0171\0\72\54\6\0\305\54\13\0\7\54\51\0"+
    "\114\54\4\0\12\54\246\0\4\54\1\0\33\54\1\0"+
    "\2\54\1\0\1\54\2\0\1\54\1\0\12\54\1\0"+
    "\4\54\1\0\1\54\1\0\1\54\6\0\1\54\4\0"+
    "\1\54\1\0\1\54\1\0\1\54\1\0\3\54\1\0"+
    "\2\54\1\0\1\54\2\0\1\54\1\0\1\54\1\0"+
    "\1\54\1\0\1\54\1\0\1\54\1\0\2\54\1\0"+
    "\1\54\2\0\4\54\1\0\7\54\1\0\4\54\1\0"+
    "\4\54\1\0\1\54\1\0\12\54\1\0\21\54\5\0"+
    "\3\54\1\0\5\54\1\0\21\54\164\0\32\54\6\0"+
    "\32\54\6\0\32\54\166\0\327\54\51\0\65\54\13\0"+
    "\336\54\2\0\u0182\54\16\0\u0131\54\37\0\36\54\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\7\5\1\10\1\11\1\1\1\12\1\13"+
    "\1\14\3\0\7\5\4\0\7\5\3\0\10\5\3\0"+
    "\10\5\3\0\10\5\3\0\7\5\1\15\3\0\6\5"+
    "\1\16\3\0\6\5\3\0\6\5\3\0\6\5\3\0"+
    "\6\5\3\0\1\17\3\5\1\20\1\5\3\0\2\5"+
    "\1\21\1\5\1\0\1\22\1\0\3\5\2\0\1\23"+
    "\1\5\1\24\1\5\2\0\1\5\1\25\1\26\1\27"+
    "\2\5\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\55\0\132\0\55\0\207\0\55\0\264"+
    "\0\55\0\341\0\55\0\u010e\0\u013b\0\u0168\0\u0195\0\u01c2"+
    "\0\u01ef\0\u021c\0\55\0\55\0\u0249\0\55\0\55\0\u0276"+
    "\0\207\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\u040b\0\u0249\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654"+
    "\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c"+
    "\0\264\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97"+
    "\0\u0ec4\0\u0ef1\0\264\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2"+
    "\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a"+
    "\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a"+
    "\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572"+
    "\0\u159f\0\u15cc\0\264\0\u15f9\0\u1626\0\u1653\0\264\0\u1680"+
    "\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\264\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\55"+
    "\0\u1923\0\264\0\u1950\0\u197d\0\u19aa\0\u19d7\0\264\0\55"+
    "\0\55\0\u1a04\0\u1a31\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\10\1\14\1\10\1\15\1\16"+
    "\3\10\1\17\1\20\2\10\1\21\3\10\1\22\1\10"+
    "\1\23\1\24\1\25\11\10\1\26\1\27\1\25\57\0"+
    "\1\3\62\0\1\30\3\0\22\30\2\0\1\31\11\30"+
    "\2\0\1\31\10\0\1\10\3\0\22\10\2\0\12\10"+
    "\2\0\1\10\4\0\1\32\13\0\1\33\22\0\1\33"+
    "\21\0\1\10\3\0\15\10\1\34\4\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\10\10\1\35\11\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\3\10"+
    "\1\36\16\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\13\10\1\37\6\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\13\10\1\40\6\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\1\41\21\10\2\0"+
    "\12\10\2\0\1\10\10\0\1\10\3\0\16\10\1\42"+
    "\3\10\2\0\12\10\2\0\1\10\10\0\1\10\3\0"+
    "\22\10\2\0\1\43\11\10\2\0\1\43\10\0\1\30"+
    "\3\0\22\30\2\0\12\30\2\0\1\30\20\0\1\44"+
    "\2\0\1\45\17\0\1\44\1\45\33\0\1\46\20\0"+
    "\1\46\20\0\1\10\3\0\3\10\1\47\16\10\2\0"+
    "\12\10\2\0\1\10\10\0\1\10\3\0\7\10\1\50"+
    "\12\10\2\0\12\10\2\0\1\10\10\0\1\10\3\0"+
    "\1\10\1\51\20\10\2\0\12\10\2\0\1\10\10\0"+
    "\1\10\3\0\5\10\1\52\14\10\2\0\12\10\2\0"+
    "\1\10\10\0\1\10\3\0\2\10\1\53\17\10\2\0"+
    "\12\10\2\0\1\10\10\0\1\10\3\0\16\10\1\54"+
    "\3\10\2\0\12\10\2\0\1\10\10\0\1\10\3\0"+
    "\20\10\1\55\1\10\2\0\12\10\2\0\1\10\23\0"+
    "\1\56\20\0\1\56\36\0\1\57\17\0\1\57\34\0"+
    "\1\60\17\0\1\60\16\0\1\10\3\0\1\61\1\10"+
    "\1\62\17\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\11\10\1\63\10\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\6\10\1\64\13\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\7\10\1\65\12\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\7\10"+
    "\1\66\12\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\16\10\1\67\3\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\1\70\21\10\2\0\12\10\2\0"+
    "\1\10\26\0\1\71\17\0\1\71\31\0\1\72\20\0"+
    "\1\72\50\0\1\73\24\0\1\10\3\0\15\10\1\74"+
    "\4\10\2\0\12\10\2\0\1\10\10\0\1\10\3\0"+
    "\3\10\1\75\16\10\2\0\12\10\2\0\1\10\10\0"+
    "\1\10\3\0\7\10\1\76\12\10\2\0\12\10\2\0"+
    "\1\10\10\0\1\10\3\0\1\77\21\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\12\10\1\100\7\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\4\10"+
    "\1\101\15\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\21\10\1\102\2\0\12\10\2\0\1\10\10\0"+
    "\1\10\3\0\15\10\1\103\4\10\2\0\12\10\2\0"+
    "\1\10\40\0\1\104\54\0\1\105\46\0\1\106\15\0"+
    "\1\106\14\0\1\10\3\0\22\10\2\0\1\107\11\10"+
    "\2\0\1\10\10\0\1\10\3\0\12\10\1\110\7\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\12\10"+
    "\1\111\7\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\22\10\2\0\1\112\11\10\2\0\1\10\10\0"+
    "\1\10\3\0\22\10\2\0\1\113\11\10\2\0\1\10"+
    "\10\0\1\10\3\0\7\10\1\114\12\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\13\10\1\115\6\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\7\10"+
    "\1\116\12\10\2\0\12\10\2\0\1\10\32\0\1\117"+
    "\15\0\1\117\36\0\1\120\15\0\1\120\33\0\1\121"+
    "\17\0\1\121\15\0\1\10\3\0\20\10\1\122\1\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\1\10"+
    "\1\123\20\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\1\124\21\10\2\0\12\10\2\0\1\10\10\0"+
    "\1\10\3\0\1\10\1\125\20\10\2\0\12\10\2\0"+
    "\1\10\10\0\1\10\3\0\20\10\1\126\1\10\2\0"+
    "\12\10\2\0\1\10\10\0\1\10\3\0\1\10\1\127"+
    "\20\10\2\0\12\10\2\0\1\10\10\0\1\10\3\0"+
    "\15\10\1\130\4\10\2\0\12\10\2\0\1\10\10\0"+
    "\1\10\3\0\13\10\1\131\6\10\2\0\12\10\2\0"+
    "\1\10\27\0\1\132\17\0\1\132\34\0\1\133\17\0"+
    "\1\133\31\0\1\134\20\0\1\134\17\0\1\10\3\0"+
    "\16\10\1\135\3\10\2\0\12\10\2\0\1\10\10\0"+
    "\1\10\3\0\7\10\1\136\12\10\2\0\12\10\2\0"+
    "\1\10\10\0\1\10\3\0\15\10\1\137\4\10\2\0"+
    "\12\10\2\0\1\10\10\0\1\10\3\0\15\10\1\140"+
    "\4\10\2\0\12\10\2\0\1\10\10\0\1\10\3\0"+
    "\16\10\1\141\3\10\2\0\12\10\2\0\1\10\10\0"+
    "\1\10\3\0\1\142\21\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\2\10\1\143\17\10\2\0\12\10"+
    "\2\0\1\10\24\0\1\144\20\0\1\144\33\0\1\145"+
    "\20\0\1\145\32\0\1\146\20\0\1\146\20\0\1\10"+
    "\3\0\20\10\1\147\1\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\1\150\21\10\2\0\12\10\2\0"+
    "\1\10\10\0\1\10\3\0\22\10\2\0\1\151\11\10"+
    "\2\0\1\10\10\0\1\10\3\0\3\10\1\152\16\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\20\10"+
    "\1\153\1\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\15\10\1\154\4\10\2\0\12\10\2\0\1\10"+
    "\23\0\1\155\20\0\1\155\33\0\1\156\20\0\1\156"+
    "\25\0\1\157\23\0\1\157\23\0\1\10\3\0\1\160"+
    "\21\10\2\0\12\10\2\0\1\10\10\0\1\10\3\0"+
    "\10\10\1\161\11\10\2\0\12\10\2\0\1\10\10\0"+
    "\1\10\3\0\20\10\1\162\1\10\2\0\12\10\2\0"+
    "\1\10\10\0\1\10\3\0\1\163\21\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\1\164\21\10\2\0"+
    "\12\10\2\0\1\10\10\0\1\10\3\0\22\10\2\0"+
    "\1\165\11\10\2\0\1\10\15\0\1\166\23\0\1\166"+
    "\30\0\1\167\23\0\1\167\36\0\1\170\20\0\1\170"+
    "\20\0\1\10\3\0\15\10\1\171\4\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\3\10\1\172\16\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\16\10"+
    "\1\173\3\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\1\10\1\174\20\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\15\10\1\175\4\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\20\10\1\176\1\10"+
    "\2\0\12\10\2\0\1\10\23\0\1\177\20\0\1\177"+
    "\33\0\1\200\20\0\1\200\43\0\1\201\31\0\1\10"+
    "\3\0\7\10\1\202\12\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\16\10\1\203\3\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\20\10\1\204\1\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\7\10"+
    "\1\205\12\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\7\10\1\206\12\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\16\10\1\207\3\10\2\0\12\10"+
    "\2\0\1\10\33\0\1\210\54\0\1\211\55\0\1\212"+
    "\14\0\1\212\13\0\1\10\3\0\13\10\1\213\6\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\22\10"+
    "\2\0\1\214\11\10\2\0\1\10\10\0\1\10\3\0"+
    "\1\215\21\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\13\10\1\216\6\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\13\10\1\217\6\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\20\10\1\220\1\10"+
    "\2\0\12\10\2\0\1\10\34\0\1\221\14\0\1\221"+
    "\37\0\1\222\14\0\1\222\21\0\1\223\23\0\1\223"+
    "\22\0\1\10\3\0\20\10\1\224\1\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\15\10\1\225\4\10"+
    "\2\0\12\10\2\0\1\10\10\0\1\10\3\0\12\10"+
    "\1\226\7\10\2\0\12\10\2\0\1\10\10\0\1\10"+
    "\3\0\1\227\21\10\2\0\12\10\2\0\1\10\16\0"+
    "\1\230\23\0\1\230\30\0\1\231\23\0\1\231\16\0"+
    "\1\232\60\0\1\10\3\0\16\10\1\233\3\10\2\0"+
    "\12\10\2\0\1\10\10\0\1\10\3\0\7\10\1\234"+
    "\12\10\2\0\12\10\2\0\1\10\10\0\1\10\3\0"+
    "\15\10\1\235\4\10\2\0\12\10\2\0\1\10\17\0"+
    "\1\236\22\0\1\236\31\0\1\237\22\0\1\237\25\0"+
    "\1\240\51\0\1\10\3\0\20\10\1\241\1\10\2\0"+
    "\12\10\2\0\1\10\10\0\1\10\3\0\13\10\1\242"+
    "\6\10\2\0\12\10\2\0\1\10\10\0\1\10\3\0"+
    "\7\10\1\243\12\10\2\0\12\10\2\0\1\10\32\0"+
    "\1\244\15\0\1\244\36\0\1\245\15\0\1\245\14\0"+
    "\1\10\3\0\1\246\21\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\13\10\1\247\6\10\2\0\12\10"+
    "\2\0\1\10\13\0\1\250\54\0\1\251\51\0\1\10"+
    "\3\0\15\10\1\252\4\10\2\0\12\10\2\0\1\10"+
    "\10\0\1\10\3\0\7\10\1\253\12\10\2\0\12\10"+
    "\2\0\1\10\10\0\1\10\3\0\13\10\1\254\6\10"+
    "\2\0\12\10\2\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\7\1\2\11\1\1\2\11\1\1\3\0"+
    "\7\1\4\0\7\1\3\0\10\1\3\0\10\1\3\0"+
    "\10\1\3\0\10\1\3\0\7\1\3\0\6\1\3\0"+
    "\6\1\3\0\6\1\3\0\6\1\3\0\6\1\3\0"+
    "\4\1\1\0\1\1\1\0\3\1\2\0\1\11\3\1"+
    "\2\0\2\1\2\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

	private Symbol symbol(int type) {
		return new Symbol(type, yyline + 1, yycolumn + 1);
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline + 1, yycolumn + 1, value);
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormsLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new java_cup.runtime.Symbol(FormsParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 25: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 26: break;
          case 3:
            { return symbol(QUOTE, yytext());
            }
            // fall through
          case 27: break;
          case 4:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 28: break;
          case 5:
            { return symbol(PARAMQ, yytext());
            }
            // fall through
          case 29: break;
          case 6:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 30: break;
          case 7:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 31: break;
          case 8:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 32: break;
          case 9:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 33: break;
          case 10:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 34: break;
          case 11:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 35: break;
          case 12:
            { return symbol(ID, yytext());
            }
            // fall through
          case 36: break;
          case 13:
            { return symbol(USER, yytext());
            }
            // fall through
          case 37: break;
          case 14:
            { return symbol(PASS, yytext());
            }
            // fall through
          case 38: break;
          case 15:
            { return symbol(NEW_USER, yytext());
            }
            // fall through
          case 39: break;
          case 16:
            { return symbol(LOGIN, yytext());
            }
            // fall through
          case 40: break;
          case 17:
            { return symbol(DATE, yytext());
            }
            // fall through
          case 41: break;
          case 18:
            { return symbol(INIT_SOL, yytext());
            }
            // fall through
          case 42: break;
          case 19:
            { return symbol(FIN_SOL, yytext());
            }
            // fall through
          case 43: break;
          case 20:
            { return symbol(DEL_USER, yytext());
            }
            // fall through
          case 44: break;
          case 21:
            { return symbol(EDIT_USER, yytext());
            }
            // fall through
          case 45: break;
          case 22:
            { return symbol(FIN_MANY_SOL, yytext());
            }
            // fall through
          case 46: break;
          case 23:
            { return symbol(INIT_MANY_SOL, yytext());
            }
            // fall through
          case 47: break;
          case 24:
            { return symbol(CRED, yytext());
            }
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
